
demo_jetsonnano.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ea4  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  0800606c  0800606c  0000706c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062a4  080062a4  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  080062a4  080062a4  000072a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062ac  080062ac  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062ac  080062ac  000072ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080062b0  080062b0  000072b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080062b4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  2000000c  080062c0  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  080062c0  00008294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116e2  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003191  00000000  00000000  0001971e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  0001c8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d69  00000000  00000000  0001da48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026332  00000000  00000000  0001e7b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001547b  00000000  00000000  00044ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e90f6  00000000  00000000  00059f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00143054  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049dc  00000000  00000000  00143098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00147a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006054 	.word	0x08006054

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08006054 	.word	0x08006054

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	@ 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__aeabi_d2f>:
 80007d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80007dc:	bf24      	itt	cs
 80007de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007e6:	d90d      	bls.n	8000804 <__aeabi_d2f+0x30>
 80007e8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007f4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007fc:	bf08      	it	eq
 80007fe:	f020 0001 	biceq.w	r0, r0, #1
 8000802:	4770      	bx	lr
 8000804:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000808:	d121      	bne.n	800084e <__aeabi_d2f+0x7a>
 800080a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800080e:	bfbc      	itt	lt
 8000810:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000814:	4770      	bxlt	lr
 8000816:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800081a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800081e:	f1c2 0218 	rsb	r2, r2, #24
 8000822:	f1c2 0c20 	rsb	ip, r2, #32
 8000826:	fa10 f30c 	lsls.w	r3, r0, ip
 800082a:	fa20 f002 	lsr.w	r0, r0, r2
 800082e:	bf18      	it	ne
 8000830:	f040 0001 	orrne.w	r0, r0, #1
 8000834:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000838:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800083c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000840:	ea40 000c 	orr.w	r0, r0, ip
 8000844:	fa23 f302 	lsr.w	r3, r3, r2
 8000848:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800084c:	e7cc      	b.n	80007e8 <__aeabi_d2f+0x14>
 800084e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000852:	d107      	bne.n	8000864 <__aeabi_d2f+0x90>
 8000854:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000858:	bf1e      	ittt	ne
 800085a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800085e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000862:	4770      	bxne	lr
 8000864:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000868:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800086c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop

08000874 <__aeabi_uldivmod>:
 8000874:	b953      	cbnz	r3, 800088c <__aeabi_uldivmod+0x18>
 8000876:	b94a      	cbnz	r2, 800088c <__aeabi_uldivmod+0x18>
 8000878:	2900      	cmp	r1, #0
 800087a:	bf08      	it	eq
 800087c:	2800      	cmpeq	r0, #0
 800087e:	bf1c      	itt	ne
 8000880:	f04f 31ff 	movne.w	r1, #4294967295
 8000884:	f04f 30ff 	movne.w	r0, #4294967295
 8000888:	f000 b96a 	b.w	8000b60 <__aeabi_idiv0>
 800088c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000890:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000894:	f000 f806 	bl	80008a4 <__udivmoddi4>
 8000898:	f8dd e004 	ldr.w	lr, [sp, #4]
 800089c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a0:	b004      	add	sp, #16
 80008a2:	4770      	bx	lr

080008a4 <__udivmoddi4>:
 80008a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a8:	9d08      	ldr	r5, [sp, #32]
 80008aa:	460c      	mov	r4, r1
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d14e      	bne.n	800094e <__udivmoddi4+0xaa>
 80008b0:	4694      	mov	ip, r2
 80008b2:	458c      	cmp	ip, r1
 80008b4:	4686      	mov	lr, r0
 80008b6:	fab2 f282 	clz	r2, r2
 80008ba:	d962      	bls.n	8000982 <__udivmoddi4+0xde>
 80008bc:	b14a      	cbz	r2, 80008d2 <__udivmoddi4+0x2e>
 80008be:	f1c2 0320 	rsb	r3, r2, #32
 80008c2:	4091      	lsls	r1, r2
 80008c4:	fa20 f303 	lsr.w	r3, r0, r3
 80008c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008cc:	4319      	orrs	r1, r3
 80008ce:	fa00 fe02 	lsl.w	lr, r0, r2
 80008d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008d6:	fa1f f68c 	uxth.w	r6, ip
 80008da:	fbb1 f4f7 	udiv	r4, r1, r7
 80008de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008e2:	fb07 1114 	mls	r1, r7, r4, r1
 80008e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ea:	fb04 f106 	mul.w	r1, r4, r6
 80008ee:	4299      	cmp	r1, r3
 80008f0:	d90a      	bls.n	8000908 <__udivmoddi4+0x64>
 80008f2:	eb1c 0303 	adds.w	r3, ip, r3
 80008f6:	f104 30ff 	add.w	r0, r4, #4294967295
 80008fa:	f080 8112 	bcs.w	8000b22 <__udivmoddi4+0x27e>
 80008fe:	4299      	cmp	r1, r3
 8000900:	f240 810f 	bls.w	8000b22 <__udivmoddi4+0x27e>
 8000904:	3c02      	subs	r4, #2
 8000906:	4463      	add	r3, ip
 8000908:	1a59      	subs	r1, r3, r1
 800090a:	fa1f f38e 	uxth.w	r3, lr
 800090e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000912:	fb07 1110 	mls	r1, r7, r0, r1
 8000916:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800091a:	fb00 f606 	mul.w	r6, r0, r6
 800091e:	429e      	cmp	r6, r3
 8000920:	d90a      	bls.n	8000938 <__udivmoddi4+0x94>
 8000922:	eb1c 0303 	adds.w	r3, ip, r3
 8000926:	f100 31ff 	add.w	r1, r0, #4294967295
 800092a:	f080 80fc 	bcs.w	8000b26 <__udivmoddi4+0x282>
 800092e:	429e      	cmp	r6, r3
 8000930:	f240 80f9 	bls.w	8000b26 <__udivmoddi4+0x282>
 8000934:	4463      	add	r3, ip
 8000936:	3802      	subs	r0, #2
 8000938:	1b9b      	subs	r3, r3, r6
 800093a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800093e:	2100      	movs	r1, #0
 8000940:	b11d      	cbz	r5, 800094a <__udivmoddi4+0xa6>
 8000942:	40d3      	lsrs	r3, r2
 8000944:	2200      	movs	r2, #0
 8000946:	e9c5 3200 	strd	r3, r2, [r5]
 800094a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094e:	428b      	cmp	r3, r1
 8000950:	d905      	bls.n	800095e <__udivmoddi4+0xba>
 8000952:	b10d      	cbz	r5, 8000958 <__udivmoddi4+0xb4>
 8000954:	e9c5 0100 	strd	r0, r1, [r5]
 8000958:	2100      	movs	r1, #0
 800095a:	4608      	mov	r0, r1
 800095c:	e7f5      	b.n	800094a <__udivmoddi4+0xa6>
 800095e:	fab3 f183 	clz	r1, r3
 8000962:	2900      	cmp	r1, #0
 8000964:	d146      	bne.n	80009f4 <__udivmoddi4+0x150>
 8000966:	42a3      	cmp	r3, r4
 8000968:	d302      	bcc.n	8000970 <__udivmoddi4+0xcc>
 800096a:	4290      	cmp	r0, r2
 800096c:	f0c0 80f0 	bcc.w	8000b50 <__udivmoddi4+0x2ac>
 8000970:	1a86      	subs	r6, r0, r2
 8000972:	eb64 0303 	sbc.w	r3, r4, r3
 8000976:	2001      	movs	r0, #1
 8000978:	2d00      	cmp	r5, #0
 800097a:	d0e6      	beq.n	800094a <__udivmoddi4+0xa6>
 800097c:	e9c5 6300 	strd	r6, r3, [r5]
 8000980:	e7e3      	b.n	800094a <__udivmoddi4+0xa6>
 8000982:	2a00      	cmp	r2, #0
 8000984:	f040 8090 	bne.w	8000aa8 <__udivmoddi4+0x204>
 8000988:	eba1 040c 	sub.w	r4, r1, ip
 800098c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000990:	fa1f f78c 	uxth.w	r7, ip
 8000994:	2101      	movs	r1, #1
 8000996:	fbb4 f6f8 	udiv	r6, r4, r8
 800099a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800099e:	fb08 4416 	mls	r4, r8, r6, r4
 80009a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009a6:	fb07 f006 	mul.w	r0, r7, r6
 80009aa:	4298      	cmp	r0, r3
 80009ac:	d908      	bls.n	80009c0 <__udivmoddi4+0x11c>
 80009ae:	eb1c 0303 	adds.w	r3, ip, r3
 80009b2:	f106 34ff 	add.w	r4, r6, #4294967295
 80009b6:	d202      	bcs.n	80009be <__udivmoddi4+0x11a>
 80009b8:	4298      	cmp	r0, r3
 80009ba:	f200 80cd 	bhi.w	8000b58 <__udivmoddi4+0x2b4>
 80009be:	4626      	mov	r6, r4
 80009c0:	1a1c      	subs	r4, r3, r0
 80009c2:	fa1f f38e 	uxth.w	r3, lr
 80009c6:	fbb4 f0f8 	udiv	r0, r4, r8
 80009ca:	fb08 4410 	mls	r4, r8, r0, r4
 80009ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009d2:	fb00 f707 	mul.w	r7, r0, r7
 80009d6:	429f      	cmp	r7, r3
 80009d8:	d908      	bls.n	80009ec <__udivmoddi4+0x148>
 80009da:	eb1c 0303 	adds.w	r3, ip, r3
 80009de:	f100 34ff 	add.w	r4, r0, #4294967295
 80009e2:	d202      	bcs.n	80009ea <__udivmoddi4+0x146>
 80009e4:	429f      	cmp	r7, r3
 80009e6:	f200 80b0 	bhi.w	8000b4a <__udivmoddi4+0x2a6>
 80009ea:	4620      	mov	r0, r4
 80009ec:	1bdb      	subs	r3, r3, r7
 80009ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009f2:	e7a5      	b.n	8000940 <__udivmoddi4+0x9c>
 80009f4:	f1c1 0620 	rsb	r6, r1, #32
 80009f8:	408b      	lsls	r3, r1
 80009fa:	fa22 f706 	lsr.w	r7, r2, r6
 80009fe:	431f      	orrs	r7, r3
 8000a00:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a04:	fa04 f301 	lsl.w	r3, r4, r1
 8000a08:	ea43 030c 	orr.w	r3, r3, ip
 8000a0c:	40f4      	lsrs	r4, r6
 8000a0e:	fa00 f801 	lsl.w	r8, r0, r1
 8000a12:	0c38      	lsrs	r0, r7, #16
 8000a14:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a18:	fbb4 fef0 	udiv	lr, r4, r0
 8000a1c:	fa1f fc87 	uxth.w	ip, r7
 8000a20:	fb00 441e 	mls	r4, r0, lr, r4
 8000a24:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a28:	fb0e f90c 	mul.w	r9, lr, ip
 8000a2c:	45a1      	cmp	r9, r4
 8000a2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000a32:	d90a      	bls.n	8000a4a <__udivmoddi4+0x1a6>
 8000a34:	193c      	adds	r4, r7, r4
 8000a36:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a3a:	f080 8084 	bcs.w	8000b46 <__udivmoddi4+0x2a2>
 8000a3e:	45a1      	cmp	r9, r4
 8000a40:	f240 8081 	bls.w	8000b46 <__udivmoddi4+0x2a2>
 8000a44:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a48:	443c      	add	r4, r7
 8000a4a:	eba4 0409 	sub.w	r4, r4, r9
 8000a4e:	fa1f f983 	uxth.w	r9, r3
 8000a52:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a56:	fb00 4413 	mls	r4, r0, r3, r4
 8000a5a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a5e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a62:	45a4      	cmp	ip, r4
 8000a64:	d907      	bls.n	8000a76 <__udivmoddi4+0x1d2>
 8000a66:	193c      	adds	r4, r7, r4
 8000a68:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a6c:	d267      	bcs.n	8000b3e <__udivmoddi4+0x29a>
 8000a6e:	45a4      	cmp	ip, r4
 8000a70:	d965      	bls.n	8000b3e <__udivmoddi4+0x29a>
 8000a72:	3b02      	subs	r3, #2
 8000a74:	443c      	add	r4, r7
 8000a76:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a7a:	fba0 9302 	umull	r9, r3, r0, r2
 8000a7e:	eba4 040c 	sub.w	r4, r4, ip
 8000a82:	429c      	cmp	r4, r3
 8000a84:	46ce      	mov	lr, r9
 8000a86:	469c      	mov	ip, r3
 8000a88:	d351      	bcc.n	8000b2e <__udivmoddi4+0x28a>
 8000a8a:	d04e      	beq.n	8000b2a <__udivmoddi4+0x286>
 8000a8c:	b155      	cbz	r5, 8000aa4 <__udivmoddi4+0x200>
 8000a8e:	ebb8 030e 	subs.w	r3, r8, lr
 8000a92:	eb64 040c 	sbc.w	r4, r4, ip
 8000a96:	fa04 f606 	lsl.w	r6, r4, r6
 8000a9a:	40cb      	lsrs	r3, r1
 8000a9c:	431e      	orrs	r6, r3
 8000a9e:	40cc      	lsrs	r4, r1
 8000aa0:	e9c5 6400 	strd	r6, r4, [r5]
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	e750      	b.n	800094a <__udivmoddi4+0xa6>
 8000aa8:	f1c2 0320 	rsb	r3, r2, #32
 8000aac:	fa20 f103 	lsr.w	r1, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	430c      	orrs	r4, r1
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ac4:	fa1f f78c 	uxth.w	r7, ip
 8000ac8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000acc:	fb08 3110 	mls	r1, r8, r0, r3
 8000ad0:	0c23      	lsrs	r3, r4, #16
 8000ad2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad6:	fb00 f107 	mul.w	r1, r0, r7
 8000ada:	4299      	cmp	r1, r3
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0x24c>
 8000ade:	eb1c 0303 	adds.w	r3, ip, r3
 8000ae2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ae6:	d22c      	bcs.n	8000b42 <__udivmoddi4+0x29e>
 8000ae8:	4299      	cmp	r1, r3
 8000aea:	d92a      	bls.n	8000b42 <__udivmoddi4+0x29e>
 8000aec:	3802      	subs	r0, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000af8:	fb08 3311 	mls	r3, r8, r1, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb01 f307 	mul.w	r3, r1, r7
 8000b04:	42a3      	cmp	r3, r4
 8000b06:	d908      	bls.n	8000b1a <__udivmoddi4+0x276>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b10:	d213      	bcs.n	8000b3a <__udivmoddi4+0x296>
 8000b12:	42a3      	cmp	r3, r4
 8000b14:	d911      	bls.n	8000b3a <__udivmoddi4+0x296>
 8000b16:	3902      	subs	r1, #2
 8000b18:	4464      	add	r4, ip
 8000b1a:	1ae4      	subs	r4, r4, r3
 8000b1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b20:	e739      	b.n	8000996 <__udivmoddi4+0xf2>
 8000b22:	4604      	mov	r4, r0
 8000b24:	e6f0      	b.n	8000908 <__udivmoddi4+0x64>
 8000b26:	4608      	mov	r0, r1
 8000b28:	e706      	b.n	8000938 <__udivmoddi4+0x94>
 8000b2a:	45c8      	cmp	r8, r9
 8000b2c:	d2ae      	bcs.n	8000a8c <__udivmoddi4+0x1e8>
 8000b2e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b32:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b36:	3801      	subs	r0, #1
 8000b38:	e7a8      	b.n	8000a8c <__udivmoddi4+0x1e8>
 8000b3a:	4631      	mov	r1, r6
 8000b3c:	e7ed      	b.n	8000b1a <__udivmoddi4+0x276>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	e799      	b.n	8000a76 <__udivmoddi4+0x1d2>
 8000b42:	4630      	mov	r0, r6
 8000b44:	e7d4      	b.n	8000af0 <__udivmoddi4+0x24c>
 8000b46:	46d6      	mov	lr, sl
 8000b48:	e77f      	b.n	8000a4a <__udivmoddi4+0x1a6>
 8000b4a:	4463      	add	r3, ip
 8000b4c:	3802      	subs	r0, #2
 8000b4e:	e74d      	b.n	80009ec <__udivmoddi4+0x148>
 8000b50:	4606      	mov	r6, r0
 8000b52:	4623      	mov	r3, r4
 8000b54:	4608      	mov	r0, r1
 8000b56:	e70f      	b.n	8000978 <__udivmoddi4+0xd4>
 8000b58:	3e02      	subs	r6, #2
 8000b5a:	4463      	add	r3, ip
 8000b5c:	e730      	b.n	80009c0 <__udivmoddi4+0x11c>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_idiv0>:
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b76:	4b30      	ldr	r3, [pc, #192]	@ (8000c38 <MX_ADC1_Init+0xd4>)
 8000b78:	4a30      	ldr	r2, [pc, #192]	@ (8000c3c <MX_ADC1_Init+0xd8>)
 8000b7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b7c:	4b2e      	ldr	r3, [pc, #184]	@ (8000c38 <MX_ADC1_Init+0xd4>)
 8000b7e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b84:	4b2c      	ldr	r3, [pc, #176]	@ (8000c38 <MX_ADC1_Init+0xd4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000b8a:	4b2b      	ldr	r3, [pc, #172]	@ (8000c38 <MX_ADC1_Init+0xd4>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b90:	4b29      	ldr	r3, [pc, #164]	@ (8000c38 <MX_ADC1_Init+0xd4>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b96:	4b28      	ldr	r3, [pc, #160]	@ (8000c38 <MX_ADC1_Init+0xd4>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b9e:	4b26      	ldr	r3, [pc, #152]	@ (8000c38 <MX_ADC1_Init+0xd4>)
 8000ba0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ba4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000ba6:	4b24      	ldr	r3, [pc, #144]	@ (8000c38 <MX_ADC1_Init+0xd4>)
 8000ba8:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000bac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bae:	4b22      	ldr	r3, [pc, #136]	@ (8000c38 <MX_ADC1_Init+0xd4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000bb4:	4b20      	ldr	r3, [pc, #128]	@ (8000c38 <MX_ADC1_Init+0xd4>)
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000bba:	4b1f      	ldr	r3, [pc, #124]	@ (8000c38 <MX_ADC1_Init+0xd4>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c38 <MX_ADC1_Init+0xd4>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bc8:	481b      	ldr	r0, [pc, #108]	@ (8000c38 <MX_ADC1_Init+0xd4>)
 8000bca:	f001 fdf3 	bl	80027b4 <HAL_ADC_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000bd4:	f000 ff68 	bl	8001aa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000be0:	2301      	movs	r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be4:	463b      	mov	r3, r7
 8000be6:	4619      	mov	r1, r3
 8000be8:	4813      	ldr	r0, [pc, #76]	@ (8000c38 <MX_ADC1_Init+0xd4>)
 8000bea:	f002 f865 	bl	8002cb8 <HAL_ADC_ConfigChannel>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000bf4:	f000 ff58 	bl	8001aa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c00:	463b      	mov	r3, r7
 8000c02:	4619      	mov	r1, r3
 8000c04:	480c      	ldr	r0, [pc, #48]	@ (8000c38 <MX_ADC1_Init+0xd4>)
 8000c06:	f002 f857 	bl	8002cb8 <HAL_ADC_ConfigChannel>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000c10:	f000 ff4a 	bl	8001aa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c14:	2302      	movs	r3, #2
 8000c16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	@ (8000c38 <MX_ADC1_Init+0xd4>)
 8000c22:	f002 f849 	bl	8002cb8 <HAL_ADC_ConfigChannel>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000c2c:	f000 ff3c 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000028 	.word	0x20000028
 8000c3c:	40012000 	.word	0x40012000

08000c40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	@ 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a33      	ldr	r2, [pc, #204]	@ (8000d2c <HAL_ADC_MspInit+0xec>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d15f      	bne.n	8000d22 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	4b32      	ldr	r3, [pc, #200]	@ (8000d30 <HAL_ADC_MspInit+0xf0>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6a:	4a31      	ldr	r2, [pc, #196]	@ (8000d30 <HAL_ADC_MspInit+0xf0>)
 8000c6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c72:	4b2f      	ldr	r3, [pc, #188]	@ (8000d30 <HAL_ADC_MspInit+0xf0>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	4b2b      	ldr	r3, [pc, #172]	@ (8000d30 <HAL_ADC_MspInit+0xf0>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	4a2a      	ldr	r2, [pc, #168]	@ (8000d30 <HAL_ADC_MspInit+0xf0>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8e:	4b28      	ldr	r3, [pc, #160]	@ (8000d30 <HAL_ADC_MspInit+0xf0>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000c9a:	2307      	movs	r3, #7
 8000c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4619      	mov	r1, r3
 8000cac:	4821      	ldr	r0, [pc, #132]	@ (8000d34 <HAL_ADC_MspInit+0xf4>)
 8000cae:	f002 ff3f 	bl	8003b30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000cb2:	4b21      	ldr	r3, [pc, #132]	@ (8000d38 <HAL_ADC_MspInit+0xf8>)
 8000cb4:	4a21      	ldr	r2, [pc, #132]	@ (8000d3c <HAL_ADC_MspInit+0xfc>)
 8000cb6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d38 <HAL_ADC_MspInit+0xf8>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8000d38 <HAL_ADC_MspInit+0xf8>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d38 <HAL_ADC_MspInit+0xf8>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cca:	4b1b      	ldr	r3, [pc, #108]	@ (8000d38 <HAL_ADC_MspInit+0xf8>)
 8000ccc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cd0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cd2:	4b19      	ldr	r3, [pc, #100]	@ (8000d38 <HAL_ADC_MspInit+0xf8>)
 8000cd4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cd8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cda:	4b17      	ldr	r3, [pc, #92]	@ (8000d38 <HAL_ADC_MspInit+0xf8>)
 8000cdc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ce0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ce2:	4b15      	ldr	r3, [pc, #84]	@ (8000d38 <HAL_ADC_MspInit+0xf8>)
 8000ce4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ce8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cea:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <HAL_ADC_MspInit+0xf8>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <HAL_ADC_MspInit+0xf8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cf6:	4810      	ldr	r0, [pc, #64]	@ (8000d38 <HAL_ADC_MspInit+0xf8>)
 8000cf8:	f002 fbaa 	bl	8003450 <HAL_DMA_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000d02:	f000 fed1 	bl	8001aa8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a0b      	ldr	r2, [pc, #44]	@ (8000d38 <HAL_ADC_MspInit+0xf8>)
 8000d0a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d38 <HAL_ADC_MspInit+0xf8>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2100      	movs	r1, #0
 8000d16:	2012      	movs	r0, #18
 8000d18:	f002 fb63 	bl	80033e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000d1c:	2012      	movs	r0, #18
 8000d1e:	f002 fb7c 	bl	800341a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d22:	bf00      	nop
 8000d24:	3728      	adds	r7, #40	@ 0x28
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40012000 	.word	0x40012000
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020000 	.word	0x40020000
 8000d38:	20000070 	.word	0x20000070
 8000d3c:	40026410 	.word	0x40026410

08000d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d44:	4b04      	ldr	r3, [pc, #16]	@ (8000d58 <__NVIC_GetPriorityGrouping+0x18>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	f003 0307 	and.w	r3, r3, #7
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	db0b      	blt.n	8000d86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	f003 021f 	and.w	r2, r3, #31
 8000d74:	4907      	ldr	r1, [pc, #28]	@ (8000d94 <__NVIC_EnableIRQ+0x38>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	095b      	lsrs	r3, r3, #5
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000e100 	.word	0xe000e100

08000d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	db0a      	blt.n	8000dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	490c      	ldr	r1, [pc, #48]	@ (8000de4 <__NVIC_SetPriority+0x4c>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	0112      	lsls	r2, r2, #4
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	440b      	add	r3, r1
 8000dbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc0:	e00a      	b.n	8000dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4908      	ldr	r1, [pc, #32]	@ (8000de8 <__NVIC_SetPriority+0x50>)
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	f003 030f 	and.w	r3, r3, #15
 8000dce:	3b04      	subs	r3, #4
 8000dd0:	0112      	lsls	r2, r2, #4
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	440b      	add	r3, r1
 8000dd6:	761a      	strb	r2, [r3, #24]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000e100 	.word	0xe000e100
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	@ 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f1c3 0307 	rsb	r3, r3, #7
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	bf28      	it	cs
 8000e0a:	2304      	movcs	r3, #4
 8000e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3304      	adds	r3, #4
 8000e12:	2b06      	cmp	r3, #6
 8000e14:	d902      	bls.n	8000e1c <NVIC_EncodePriority+0x30>
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3b03      	subs	r3, #3
 8000e1a:	e000      	b.n	8000e1e <NVIC_EncodePriority+0x32>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	f04f 32ff 	mov.w	r2, #4294967295
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	401a      	ands	r2, r3
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e34:	f04f 31ff 	mov.w	r1, #4294967295
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	43d9      	mvns	r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	4313      	orrs	r3, r2
         );
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3724      	adds	r7, #36	@ 0x24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
	...

08000e54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000f0c <MX_DMA_Init+0xb8>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	4a2a      	ldr	r2, [pc, #168]	@ (8000f0c <MX_DMA_Init+0xb8>)
 8000e64:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6a:	4b28      	ldr	r3, [pc, #160]	@ (8000f0c <MX_DMA_Init+0xb8>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	603b      	str	r3, [r7, #0]
 8000e7a:	4b24      	ldr	r3, [pc, #144]	@ (8000f0c <MX_DMA_Init+0xb8>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a23      	ldr	r2, [pc, #140]	@ (8000f0c <MX_DMA_Init+0xb8>)
 8000e80:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b21      	ldr	r3, [pc, #132]	@ (8000f0c <MX_DMA_Init+0xb8>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000e92:	f7ff ff55 	bl	8000d40 <__NVIC_GetPriorityGrouping>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ffa5 	bl	8000dec <NVIC_EncodePriority>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	200e      	movs	r0, #14
 8000ea8:	f7ff ff76 	bl	8000d98 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000eac:	200e      	movs	r0, #14
 8000eae:	f7ff ff55 	bl	8000d5c <__NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	2038      	movs	r0, #56	@ 0x38
 8000eb8:	f002 fa93 	bl	80033e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ebc:	2038      	movs	r0, #56	@ 0x38
 8000ebe:	f002 faac 	bl	800341a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000ec2:	f7ff ff3d 	bl	8000d40 <__NVIC_GetPriorityGrouping>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff8d 	bl	8000dec <NVIC_EncodePriority>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	203a      	movs	r0, #58	@ 0x3a
 8000ed8:	f7ff ff5e 	bl	8000d98 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000edc:	203a      	movs	r0, #58	@ 0x3a
 8000ede:	f7ff ff3d 	bl	8000d5c <__NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000ee2:	f7ff ff2d 	bl	8000d40 <__NVIC_GetPriorityGrouping>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff7d 	bl	8000dec <NVIC_EncodePriority>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	2046      	movs	r0, #70	@ 0x46
 8000ef8:	f7ff ff4e 	bl	8000d98 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000efc:	2046      	movs	r0, #70	@ 0x46
 8000efe:	f7ff ff2d 	bl	8000d5c <__NVIC_EnableIRQ>

}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40023800 	.word	0x40023800

08000f10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	@ 0x28
 8000f14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	4a2c      	ldr	r2, [pc, #176]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f36:	4b2a      	ldr	r3, [pc, #168]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b26      	ldr	r3, [pc, #152]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	4a25      	ldr	r2, [pc, #148]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f52:	4b23      	ldr	r3, [pc, #140]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	4a1e      	ldr	r2, [pc, #120]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	4b18      	ldr	r3, [pc, #96]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	4a17      	ldr	r2, [pc, #92]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f84:	f043 0308 	orr.w	r3, r3, #8
 8000f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8a:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	f003 0308 	and.w	r3, r3, #8
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	603b      	str	r3, [r7, #0]
 8000f9a:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	4a10      	ldr	r2, [pc, #64]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <MX_GPIO_Init+0xd0>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	603b      	str	r3, [r7, #0]
 8000fb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2104      	movs	r1, #4
 8000fb6:	480b      	ldr	r0, [pc, #44]	@ (8000fe4 <MX_GPIO_Init+0xd4>)
 8000fb8:	f002 ff4e 	bl	8003e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4804      	ldr	r0, [pc, #16]	@ (8000fe4 <MX_GPIO_Init+0xd4>)
 8000fd4:	f002 fdac 	bl	8003b30 <HAL_GPIO_Init>

}
 8000fd8:	bf00      	nop
 8000fda:	3728      	adds	r7, #40	@ 0x28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40020c00 	.word	0x40020c00

08000fe8 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ff8:	2b80      	cmp	r3, #128	@ 0x80
 8000ffa:	bf0c      	ite	eq
 8000ffc:	2301      	moveq	r3, #1
 8000ffe:	2300      	movne	r3, #0
 8001000:	b2db      	uxtb	r3, r3
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 800100e:	b480      	push	{r7}
 8001010:	b089      	sub	sp, #36	@ 0x24
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	330c      	adds	r3, #12
 800101a:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	e853 3f00 	ldrex	r3, [r3]
 8001022:	60bb      	str	r3, [r7, #8]
   return(result);
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	f043 0310 	orr.w	r3, r3, #16
 800102a:	61fb      	str	r3, [r7, #28]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	330c      	adds	r3, #12
 8001030:	69fa      	ldr	r2, [r7, #28]
 8001032:	61ba      	str	r2, [r7, #24]
 8001034:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001036:	6979      	ldr	r1, [r7, #20]
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	e841 2300 	strex	r3, r2, [r1]
 800103e:	613b      	str	r3, [r7, #16]
   return(result);
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1e7      	bne.n	8001016 <LL_USART_EnableIT_IDLE+0x8>
}
 8001046:	bf00      	nop
 8001048:	bf00      	nop
 800104a:	3724      	adds	r7, #36	@ 0x24
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	@ 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3314      	adds	r3, #20
 8001060:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	e853 3f00 	ldrex	r3, [r3]
 8001068:	60bb      	str	r3, [r7, #8]
   return(result);
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001070:	61fb      	str	r3, [r7, #28]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3314      	adds	r3, #20
 8001076:	69fa      	ldr	r2, [r7, #28]
 8001078:	61ba      	str	r2, [r7, #24]
 800107a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800107c:	6979      	ldr	r1, [r7, #20]
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	e841 2300 	strex	r3, r2, [r1]
 8001084:	613b      	str	r3, [r7, #16]
   return(result);
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1e7      	bne.n	800105c <LL_USART_EnableDMAReq_RX+0x8>
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	3724      	adds	r7, #36	@ 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	460b      	mov	r3, r1
 80010a4:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80010a6:	78fa      	ldrb	r2, [r7, #3]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	605a      	str	r2, [r3, #4]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80010c2:	4a0c      	ldr	r2, [pc, #48]	@ (80010f4 <LL_DMA_EnableStream+0x3c>)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	4413      	add	r3, r2
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4413      	add	r3, r2
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4908      	ldr	r1, [pc, #32]	@ (80010f4 <LL_DMA_EnableStream+0x3c>)
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	440a      	add	r2, r1
 80010d8:	7812      	ldrb	r2, [r2, #0]
 80010da:	4611      	mov	r1, r2
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	440a      	add	r2, r1
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6013      	str	r3, [r2, #0]
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	0800626c 	.word	0x0800626c

080010f8 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8001104:	4a0d      	ldr	r2, [pc, #52]	@ (800113c <LL_DMA_SetDataLength+0x44>)
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	4413      	add	r3, r2
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4413      	add	r3, r2
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	0c1b      	lsrs	r3, r3, #16
 8001116:	041b      	lsls	r3, r3, #16
 8001118:	4908      	ldr	r1, [pc, #32]	@ (800113c <LL_DMA_SetDataLength+0x44>)
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	440a      	add	r2, r1
 800111e:	7812      	ldrb	r2, [r2, #0]
 8001120:	4611      	mov	r1, r2
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	440a      	add	r2, r1
 8001126:	4611      	mov	r1, r2
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	4313      	orrs	r3, r2
 800112c:	604b      	str	r3, [r1, #4]
}
 800112e:	bf00      	nop
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	0800626c 	.word	0x0800626c

08001140 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 800114c:	4a07      	ldr	r2, [pc, #28]	@ (800116c <LL_DMA_SetMemoryAddress+0x2c>)
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	4413      	add	r3, r2
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4413      	add	r3, r2
 800115a:	461a      	mov	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	60d3      	str	r3, [r2, #12]
}
 8001160:	bf00      	nop
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	0800626c 	.word	0x0800626c

08001170 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 800117c:	4a07      	ldr	r2, [pc, #28]	@ (800119c <LL_DMA_SetPeriphAddress+0x2c>)
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	4413      	add	r3, r2
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4413      	add	r3, r2
 800118a:	461a      	mov	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6093      	str	r3, [r2, #8]
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	0800626c 	.word	0x0800626c

080011a0 <writePacket>:
void convertlineangVelToSpeed(int32_t linear_vel, int32_t angular_vel);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void writePacket(uint8_t packet[], int length) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < length; i++) {
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	e011      	b.n	80011d4 <writePacket+0x34>
        while (!LL_USART_IsActiveFlag_TXE(USART1));
 80011b0:	bf00      	nop
 80011b2:	480d      	ldr	r0, [pc, #52]	@ (80011e8 <writePacket+0x48>)
 80011b4:	f7ff ff18 	bl	8000fe8 <LL_USART_IsActiveFlag_TXE>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0f9      	beq.n	80011b2 <writePacket+0x12>
        LL_USART_TransmitData8(USART1, packet[i]);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	4413      	add	r3, r2
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	4619      	mov	r1, r3
 80011c8:	4807      	ldr	r0, [pc, #28]	@ (80011e8 <writePacket+0x48>)
 80011ca:	f7ff ff66 	bl	800109a <LL_USART_TransmitData8>
    for (int i = 0; i < length; i++) {
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	3301      	adds	r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	429a      	cmp	r2, r3
 80011da:	dbe9      	blt.n	80011b0 <writePacket+0x10>
    }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40011000 	.word	0x40011000

080011ec <writePacket3>:
void writePacket3(uint8_t packet[], int length) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < length; i++) {
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	e011      	b.n	8001220 <writePacket3+0x34>
        while (!LL_USART_IsActiveFlag_TXE(USART3));
 80011fc:	bf00      	nop
 80011fe:	480d      	ldr	r0, [pc, #52]	@ (8001234 <writePacket3+0x48>)
 8001200:	f7ff fef2 	bl	8000fe8 <LL_USART_IsActiveFlag_TXE>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0f9      	beq.n	80011fe <writePacket3+0x12>
        LL_USART_TransmitData8(USART3, packet[i]);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	4413      	add	r3, r2
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	4619      	mov	r1, r3
 8001214:	4807      	ldr	r0, [pc, #28]	@ (8001234 <writePacket3+0x48>)
 8001216:	f7ff ff40 	bl	800109a <LL_USART_TransmitData8>
    for (int i = 0; i < length; i++) {
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	3301      	adds	r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fa      	ldr	r2, [r7, #12]
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	429a      	cmp	r2, r3
 8001226:	dbe9      	blt.n	80011fc <writePacket3+0x10>
    }
}
 8001228:	bf00      	nop
 800122a:	bf00      	nop
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40004800 	.word	0x40004800

08001238 <sendPsd>:

void sendPsd() {
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
    uint8_t packet[14]; // ?��?��(1) + ?��?��?��(12) + ?��?��(1)
    int index = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]

    packet[index++] = 0x08;
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	1c5a      	adds	r2, r3, #1
 8001246:	617a      	str	r2, [r7, #20]
 8001248:	3318      	adds	r3, #24
 800124a:	443b      	add	r3, r7
 800124c:	2208      	movs	r2, #8
 800124e:	f803 2c18 	strb.w	r2, [r3, #-24]

    for(int i=0; i<3; i++) {
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	e035      	b.n	80012c4 <sendPsd+0x8c>
		packet[index++] = (filtered_buffer[i] >> 24) & 0xFF;
 8001258:	4a24      	ldr	r2, [pc, #144]	@ (80012ec <sendPsd+0xb4>)
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001260:	0e19      	lsrs	r1, r3, #24
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	1c5a      	adds	r2, r3, #1
 8001266:	617a      	str	r2, [r7, #20]
 8001268:	b2ca      	uxtb	r2, r1
 800126a:	3318      	adds	r3, #24
 800126c:	443b      	add	r3, r7
 800126e:	f803 2c18 	strb.w	r2, [r3, #-24]
		packet[index++] = (filtered_buffer[i] >> 16) & 0xFF;
 8001272:	4a1e      	ldr	r2, [pc, #120]	@ (80012ec <sendPsd+0xb4>)
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127a:	0c19      	lsrs	r1, r3, #16
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	617a      	str	r2, [r7, #20]
 8001282:	b2ca      	uxtb	r2, r1
 8001284:	3318      	adds	r3, #24
 8001286:	443b      	add	r3, r7
 8001288:	f803 2c18 	strb.w	r2, [r3, #-24]
		packet[index++] = (filtered_buffer[i] >> 8) & 0xFF;
 800128c:	4a17      	ldr	r2, [pc, #92]	@ (80012ec <sendPsd+0xb4>)
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001294:	0a19      	lsrs	r1, r3, #8
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	1c5a      	adds	r2, r3, #1
 800129a:	617a      	str	r2, [r7, #20]
 800129c:	b2ca      	uxtb	r2, r1
 800129e:	3318      	adds	r3, #24
 80012a0:	443b      	add	r3, r7
 80012a2:	f803 2c18 	strb.w	r2, [r3, #-24]
		packet[index++] = filtered_buffer[i] & 0xFF;
 80012a6:	4a11      	ldr	r2, [pc, #68]	@ (80012ec <sendPsd+0xb4>)
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	617a      	str	r2, [r7, #20]
 80012b4:	b2ca      	uxtb	r2, r1
 80012b6:	3318      	adds	r3, #24
 80012b8:	443b      	add	r3, r7
 80012ba:	f803 2c18 	strb.w	r2, [r3, #-24]
    for(int i=0; i<3; i++) {
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	3301      	adds	r3, #1
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	ddc6      	ble.n	8001258 <sendPsd+0x20>
    }
    packet[index++] = 0x20;
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	1c5a      	adds	r2, r3, #1
 80012ce:	617a      	str	r2, [r7, #20]
 80012d0:	3318      	adds	r3, #24
 80012d2:	443b      	add	r3, r7
 80012d4:	2220      	movs	r2, #32
 80012d6:	f803 2c18 	strb.w	r2, [r3, #-24]

    writePacket(packet, index);
 80012da:	463b      	mov	r3, r7
 80012dc:	6979      	ldr	r1, [r7, #20]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff ff5e 	bl	80011a0 <writePacket>
}
 80012e4:	bf00      	nop
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	2000012c 	.word	0x2000012c

080012f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f4:	f001 f9ec 	bl	80026d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f8:	f000 f87c 	bl	80013f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012fc:	f7ff fe08 	bl	8000f10 <MX_GPIO_Init>
  MX_DMA_Init();
 8001300:	f7ff fda8 	bl	8000e54 <MX_DMA_Init>
  MX_ADC1_Init();
 8001304:	f7ff fc2e 	bl	8000b64 <MX_ADC1_Init>
  MX_TIM8_Init();
 8001308:	f000 fdb4 	bl	8001e74 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800130c:	f001 f862 	bl	80023d4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001310:	f001 f920 	bl	8002554 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim8);
 8001314:	482c      	ldr	r0, [pc, #176]	@ (80013c8 <main+0xd8>)
 8001316:	f003 fc0b 	bl	8004b30 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, adc1_buffer, 3);
 800131a:	2203      	movs	r2, #3
 800131c:	492b      	ldr	r1, [pc, #172]	@ (80013cc <main+0xdc>)
 800131e:	482c      	ldr	r0, [pc, #176]	@ (80013d0 <main+0xe0>)
 8001320:	f001 fb9c 	bl	8002a5c <HAL_ADC_Start_DMA>

  LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)PCrxBuffer);
 8001324:	4b2b      	ldr	r3, [pc, #172]	@ (80013d4 <main+0xe4>)
 8001326:	461a      	mov	r2, r3
 8001328:	2102      	movs	r1, #2
 800132a:	482b      	ldr	r0, [pc, #172]	@ (80013d8 <main+0xe8>)
 800132c:	f7ff ff08 	bl	8001140 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)&USART1->DR);
 8001330:	4a2a      	ldr	r2, [pc, #168]	@ (80013dc <main+0xec>)
 8001332:	2102      	movs	r1, #2
 8001334:	4828      	ldr	r0, [pc, #160]	@ (80013d8 <main+0xe8>)
 8001336:	f7ff ff1b 	bl	8001170 <LL_DMA_SetPeriphAddress>
  LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_2, RX_BUFFER_SIZE);
 800133a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800133e:	2102      	movs	r1, #2
 8001340:	4825      	ldr	r0, [pc, #148]	@ (80013d8 <main+0xe8>)
 8001342:	f7ff fed9 	bl	80010f8 <LL_DMA_SetDataLength>
  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_2);
 8001346:	2102      	movs	r1, #2
 8001348:	4823      	ldr	r0, [pc, #140]	@ (80013d8 <main+0xe8>)
 800134a:	f7ff feb5 	bl	80010b8 <LL_DMA_EnableStream>
  LL_USART_EnableDMAReq_RX(USART1);
 800134e:	4824      	ldr	r0, [pc, #144]	@ (80013e0 <main+0xf0>)
 8001350:	f7ff fe80 	bl	8001054 <LL_USART_EnableDMAReq_RX>
  LL_USART_EnableIT_IDLE(USART1);
 8001354:	4822      	ldr	r0, [pc, #136]	@ (80013e0 <main+0xf0>)
 8001356:	f7ff fe5a 	bl	800100e <LL_USART_EnableIT_IDLE>

  operatingMode(0);
 800135a:	2000      	movs	r0, #0
 800135c:	f000 fa26 	bl	80017ac <operatingMode>
  enableTorque(0);
 8001360:	2000      	movs	r0, #0
 8001362:	f000 f99b 	bl	800169c <enableTorque>
  operatingMode(1);
 8001366:	2001      	movs	r0, #1
 8001368:	f000 fa20 	bl	80017ac <operatingMode>
  enableTorque(1);
 800136c:	2001      	movs	r0, #1
 800136e:	f000 f995 	bl	800169c <enableTorque>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sendPsd();
 8001372:	f7ff ff61 	bl	8001238 <sendPsd>
	  convertlineangVelToSpeed(linear_vel, angular_vel);
 8001376:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <main+0xf4>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a1b      	ldr	r2, [pc, #108]	@ (80013e8 <main+0xf8>)
 800137c:	6812      	ldr	r2, [r2, #0]
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f000 fb45 	bl	8001a10 <convertlineangVelToSpeed>
	  sendGoalVelocity(0, -(velocity_0 * 10));
 8001386:	4b19      	ldr	r3, [pc, #100]	@ (80013ec <main+0xfc>)
 8001388:	edd3 7a00 	vldr	s15, [r3]
 800138c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001390:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001394:	eef1 7a67 	vneg.f32	s15, s15
 8001398:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800139c:	ee17 1a90 	vmov	r1, s15
 80013a0:	2000      	movs	r0, #0
 80013a2:	f000 fa8b 	bl	80018bc <sendGoalVelocity>
	  sendGoalVelocity(1, (velocity_1 * 10));
 80013a6:	4b12      	ldr	r3, [pc, #72]	@ (80013f0 <main+0x100>)
 80013a8:	edd3 7a00 	vldr	s15, [r3]
 80013ac:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80013b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013b8:	ee17 1a90 	vmov	r1, s15
 80013bc:	2001      	movs	r0, #1
 80013be:	f000 fa7d 	bl	80018bc <sendGoalVelocity>
	  sendPsd();
 80013c2:	bf00      	nop
 80013c4:	e7d5      	b.n	8001372 <main+0x82>
 80013c6:	bf00      	nop
 80013c8:	20000248 	.word	0x20000248
 80013cc:	200000d0 	.word	0x200000d0
 80013d0:	20000028 	.word	0x20000028
 80013d4:	20000138 	.word	0x20000138
 80013d8:	40026400 	.word	0x40026400
 80013dc:	40011004 	.word	0x40011004
 80013e0:	40011000 	.word	0x40011000
 80013e4:	20000240 	.word	0x20000240
 80013e8:	20000244 	.word	0x20000244
 80013ec:	20000238 	.word	0x20000238
 80013f0:	2000023c 	.word	0x2000023c

080013f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b094      	sub	sp, #80	@ 0x50
 80013f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	2234      	movs	r2, #52	@ 0x34
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f004 fdec 	bl	8005fe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001408:	f107 0308 	add.w	r3, r7, #8
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001418:	2300      	movs	r3, #0
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	4b2c      	ldr	r3, [pc, #176]	@ (80014d0 <SystemClock_Config+0xdc>)
 800141e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001420:	4a2b      	ldr	r2, [pc, #172]	@ (80014d0 <SystemClock_Config+0xdc>)
 8001422:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001426:	6413      	str	r3, [r2, #64]	@ 0x40
 8001428:	4b29      	ldr	r3, [pc, #164]	@ (80014d0 <SystemClock_Config+0xdc>)
 800142a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001434:	2300      	movs	r3, #0
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	4b26      	ldr	r3, [pc, #152]	@ (80014d4 <SystemClock_Config+0xe0>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a25      	ldr	r2, [pc, #148]	@ (80014d4 <SystemClock_Config+0xe0>)
 800143e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	4b23      	ldr	r3, [pc, #140]	@ (80014d4 <SystemClock_Config+0xe0>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800144c:	603b      	str	r3, [r7, #0]
 800144e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001450:	2301      	movs	r3, #1
 8001452:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001454:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001458:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800145a:	2302      	movs	r3, #2
 800145c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800145e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001462:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001464:	2308      	movs	r3, #8
 8001466:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001468:	23b4      	movs	r3, #180	@ 0xb4
 800146a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800146c:	2302      	movs	r3, #2
 800146e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001470:	2302      	movs	r3, #2
 8001472:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001474:	2302      	movs	r3, #2
 8001476:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	4618      	mov	r0, r3
 800147e:	f003 f869 	bl	8004554 <HAL_RCC_OscConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001488:	f000 fb0e 	bl	8001aa8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800148c:	f002 fcfe 	bl	8003e8c <HAL_PWREx_EnableOverDrive>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001496:	f000 fb07 	bl	8001aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800149a:	230f      	movs	r3, #15
 800149c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800149e:	2302      	movs	r3, #2
 80014a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014a6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80014aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014b2:	f107 0308 	add.w	r3, r7, #8
 80014b6:	2105      	movs	r1, #5
 80014b8:	4618      	mov	r0, r3
 80014ba:	f002 fd37 	bl	8003f2c <HAL_RCC_ClockConfig>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80014c4:	f000 faf0 	bl	8001aa8 <Error_Handler>
  }
}
 80014c8:	bf00      	nop
 80014ca:	3750      	adds	r7, #80	@ 0x50
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40007000 	.word	0x40007000

080014d8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80014d8:	b490      	push	{r4, r7}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == hadc1.Instance) {
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b2f      	ldr	r3, [pc, #188]	@ (80015a4 <HAL_ADC_ConvCpltCallback+0xcc>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d156      	bne.n	800159a <HAL_ADC_ConvCpltCallback+0xc2>
		for(int i = 0; i < 3; i++) {
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	e012      	b.n	8001518 <HAL_ADC_ConvCpltCallback+0x40>
			adc1_buffer_for6[i][adc_filter_index] = adc1_buffer[i];
 80014f2:	4b2d      	ldr	r3, [pc, #180]	@ (80015a8 <HAL_ADC_ConvCpltCallback+0xd0>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	461c      	mov	r4, r3
 80014f8:	4a2c      	ldr	r2, [pc, #176]	@ (80015ac <HAL_ADC_ConvCpltCallback+0xd4>)
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001500:	482b      	ldr	r0, [pc, #172]	@ (80015b0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	4613      	mov	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4413      	add	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4423      	add	r3, r4
 800150e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		for(int i = 0; i < 3; i++) {
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	3301      	adds	r3, #1
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	2b02      	cmp	r3, #2
 800151c:	dde9      	ble.n	80014f2 <HAL_ADC_ConvCpltCallback+0x1a>
		}
		adc_filter_index = (adc_filter_index + 1) % 6;
 800151e:	4b22      	ldr	r3, [pc, #136]	@ (80015a8 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	1c5a      	adds	r2, r3, #1
 8001524:	4b23      	ldr	r3, [pc, #140]	@ (80015b4 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001526:	fb83 3102 	smull	r3, r1, r3, r2
 800152a:	17d3      	asrs	r3, r2, #31
 800152c:	1ac9      	subs	r1, r1, r3
 800152e:	460b      	mov	r3, r1
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	440b      	add	r3, r1
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	1ad1      	subs	r1, r2, r3
 8001538:	b2ca      	uxtb	r2, r1
 800153a:	4b1b      	ldr	r3, [pc, #108]	@ (80015a8 <HAL_ADC_ConvCpltCallback+0xd0>)
 800153c:	701a      	strb	r2, [r3, #0]

		for(int i=0; i<3; i++) {
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	e027      	b.n	8001594 <HAL_ADC_ConvCpltCallback+0xbc>
			adc_filter_sum = 0;
 8001544:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
			for(int j=0; j<6; j++) {
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	e011      	b.n	8001574 <HAL_ADC_ConvCpltCallback+0x9c>
				adc_filter_sum += adc1_buffer_for6[i][j];
 8001550:	4917      	ldr	r1, [pc, #92]	@ (80015b0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4613      	mov	r3, r2
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	4413      	add	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	4413      	add	r3, r2
 8001560:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8001564:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4413      	add	r3, r2
 800156a:	4a13      	ldr	r2, [pc, #76]	@ (80015b8 <HAL_ADC_ConvCpltCallback+0xe0>)
 800156c:	6013      	str	r3, [r2, #0]
			for(int j=0; j<6; j++) {
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	3301      	adds	r3, #1
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2b05      	cmp	r3, #5
 8001578:	ddea      	ble.n	8001550 <HAL_ADC_ConvCpltCallback+0x78>
			}
			filtered_buffer[i] = adc_filter_sum / 6;
 800157a:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <HAL_ADC_ConvCpltCallback+0xe0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a0f      	ldr	r2, [pc, #60]	@ (80015bc <HAL_ADC_ConvCpltCallback+0xe4>)
 8001580:	fba2 2303 	umull	r2, r3, r2, r3
 8001584:	089a      	lsrs	r2, r3, #2
 8001586:	490e      	ldr	r1, [pc, #56]	@ (80015c0 <HAL_ADC_ConvCpltCallback+0xe8>)
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i=0; i<3; i++) {
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	3301      	adds	r3, #1
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	2b02      	cmp	r3, #2
 8001598:	ddd4      	ble.n	8001544 <HAL_ADC_ConvCpltCallback+0x6c>
		}
	}
}
 800159a:	bf00      	nop
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc90      	pop	{r4, r7}
 80015a2:	4770      	bx	lr
 80015a4:	20000028 	.word	0x20000028
 80015a8:	20000124 	.word	0x20000124
 80015ac:	200000d0 	.word	0x200000d0
 80015b0:	200000dc 	.word	0x200000dc
 80015b4:	2aaaaaab 	.word	0x2aaaaaab
 80015b8:	20000128 	.word	0x20000128
 80015bc:	aaaaaaab 	.word	0xaaaaaaab
 80015c0:	2000012c 	.word	0x2000012c

080015c4 <update_crc>:
unsigned short update_crc(unsigned short crc_accum, unsigned char *data_blk_ptr, unsigned short data_blk_size)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80015d0:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80015d4:	6019      	str	r1, [r3, #0]
 80015d6:	4611      	mov	r1, r2
 80015d8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80015dc:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 80015e0:	4602      	mov	r2, r0
 80015e2:	801a      	strh	r2, [r3, #0]
 80015e4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80015e8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80015ec:	460a      	mov	r2, r1
 80015ee:	801a      	strh	r2, [r3, #0]
  unsigned short i, j;
  unsigned short crc_table[256] = {
 80015f0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80015f4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015f8:	4a27      	ldr	r2, [pc, #156]	@ (8001698 <update_crc+0xd4>)
 80015fa:	4618      	mov	r0, r3
 80015fc:	4611      	mov	r1, r2
 80015fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001602:	461a      	mov	r2, r3
 8001604:	f004 fd18 	bl	8006038 <memcpy>
      0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
      0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
      0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
  };

  for(j = 0; j < data_blk_size; j++)
 8001608:	2300      	movs	r3, #0
 800160a:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e
 800160e:	e030      	b.n	8001672 <update_crc+0xae>
  {
      i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8001610:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001614:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	0a1b      	lsrs	r3, r3, #8
 800161c:	b29b      	uxth	r3, r3
 800161e:	f8b7 220e 	ldrh.w	r2, [r7, #526]	@ 0x20e
 8001622:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8001626:	f5a1 7104 	sub.w	r1, r1, #528	@ 0x210
 800162a:	6809      	ldr	r1, [r1, #0]
 800162c:	440a      	add	r2, r1
 800162e:	7812      	ldrb	r2, [r2, #0]
 8001630:	4053      	eors	r3, r2
 8001632:	b29b      	uxth	r3, r3
 8001634:	b2db      	uxtb	r3, r3
 8001636:	f8a7 320c 	strh.w	r3, [r7, #524]	@ 0x20c
      crc_accum = (crc_accum << 8) ^ crc_table[i];
 800163a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800163e:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	021b      	lsls	r3, r3, #8
 8001646:	b21a      	sxth	r2, r3
 8001648:	f8b7 120c 	ldrh.w	r1, [r7, #524]	@ 0x20c
 800164c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001650:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001654:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001658:	b21b      	sxth	r3, r3
 800165a:	4053      	eors	r3, r2
 800165c:	b21a      	sxth	r2, r3
 800165e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001662:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 8001666:	801a      	strh	r2, [r3, #0]
  for(j = 0; j < data_blk_size; j++)
 8001668:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 800166c:	3301      	adds	r3, #1
 800166e:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e
 8001672:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001676:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800167a:	f8b7 220e 	ldrh.w	r2, [r7, #526]	@ 0x20e
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	429a      	cmp	r2, r3
 8001682:	d3c5      	bcc.n	8001610 <update_crc+0x4c>
  }

  return crc_accum;
 8001684:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001688:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 800168c:	881b      	ldrh	r3, [r3, #0]
}
 800168e:	4618      	mov	r0, r3
 8001690:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	0800606c 	.word	0x0800606c

0800169c <enableTorque>:
void enableTorque(uint8_t motor_id) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
  uint8_t packet[14];
  size_t index = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]

  packet[index++] = 0xFF;
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	1c5a      	adds	r2, r3, #1
 80016ae:	61fa      	str	r2, [r7, #28]
 80016b0:	3320      	adds	r3, #32
 80016b2:	443b      	add	r3, r7
 80016b4:	22ff      	movs	r2, #255	@ 0xff
 80016b6:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0xFF;
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	1c5a      	adds	r2, r3, #1
 80016be:	61fa      	str	r2, [r7, #28]
 80016c0:	3320      	adds	r3, #32
 80016c2:	443b      	add	r3, r7
 80016c4:	22ff      	movs	r2, #255	@ 0xff
 80016c6:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0xFD;
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	1c5a      	adds	r2, r3, #1
 80016ce:	61fa      	str	r2, [r7, #28]
 80016d0:	3320      	adds	r3, #32
 80016d2:	443b      	add	r3, r7
 80016d4:	22fd      	movs	r2, #253	@ 0xfd
 80016d6:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0x00;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	1c5a      	adds	r2, r3, #1
 80016de:	61fa      	str	r2, [r7, #28]
 80016e0:	3320      	adds	r3, #32
 80016e2:	443b      	add	r3, r7
 80016e4:	2200      	movs	r2, #0
 80016e6:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = motor_id; // ID
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	61fa      	str	r2, [r7, #28]
 80016f0:	3320      	adds	r3, #32
 80016f2:	443b      	add	r3, r7
 80016f4:	79fa      	ldrb	r2, [r7, #7]
 80016f6:	f803 2c14 	strb.w	r2, [r3, #-20]

  packet[index++] = 0x06;
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	1c5a      	adds	r2, r3, #1
 80016fe:	61fa      	str	r2, [r7, #28]
 8001700:	3320      	adds	r3, #32
 8001702:	443b      	add	r3, r7
 8001704:	2206      	movs	r2, #6
 8001706:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0x00;
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	1c5a      	adds	r2, r3, #1
 800170e:	61fa      	str	r2, [r7, #28]
 8001710:	3320      	adds	r3, #32
 8001712:	443b      	add	r3, r7
 8001714:	2200      	movs	r2, #0
 8001716:	f803 2c14 	strb.w	r2, [r3, #-20]

  packet[index++] = 0x03; // Write
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	1c5a      	adds	r2, r3, #1
 800171e:	61fa      	str	r2, [r7, #28]
 8001720:	3320      	adds	r3, #32
 8001722:	443b      	add	r3, r7
 8001724:	2203      	movs	r2, #3
 8001726:	f803 2c14 	strb.w	r2, [r3, #-20]

  packet[index++] = 0x40;
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	1c5a      	adds	r2, r3, #1
 800172e:	61fa      	str	r2, [r7, #28]
 8001730:	3320      	adds	r3, #32
 8001732:	443b      	add	r3, r7
 8001734:	2240      	movs	r2, #64	@ 0x40
 8001736:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0x00;
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	61fa      	str	r2, [r7, #28]
 8001740:	3320      	adds	r3, #32
 8001742:	443b      	add	r3, r7
 8001744:	2200      	movs	r2, #0
 8001746:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0x01; // Torque ?��?��?��
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	1c5a      	adds	r2, r3, #1
 800174e:	61fa      	str	r2, [r7, #28]
 8001750:	3320      	adds	r3, #32
 8001752:	443b      	add	r3, r7
 8001754:	2201      	movs	r2, #1
 8001756:	f803 2c14 	strb.w	r2, [r3, #-20]

  unsigned short crc = update_crc(0, packet, index);
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	b29a      	uxth	r2, r3
 800175e:	f107 030c 	add.w	r3, r7, #12
 8001762:	4619      	mov	r1, r3
 8001764:	2000      	movs	r0, #0
 8001766:	f7ff ff2d 	bl	80015c4 <update_crc>
 800176a:	4603      	mov	r3, r0
 800176c:	837b      	strh	r3, [r7, #26]
  packet[index++] = crc & 0xFF;
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	1c5a      	adds	r2, r3, #1
 8001772:	61fa      	str	r2, [r7, #28]
 8001774:	8b7a      	ldrh	r2, [r7, #26]
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	3320      	adds	r3, #32
 800177a:	443b      	add	r3, r7
 800177c:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = (crc >> 8) & 0xFF;
 8001780:	8b7b      	ldrh	r3, [r7, #26]
 8001782:	0a1b      	lsrs	r3, r3, #8
 8001784:	b299      	uxth	r1, r3
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	1c5a      	adds	r2, r3, #1
 800178a:	61fa      	str	r2, [r7, #28]
 800178c:	b2ca      	uxtb	r2, r1
 800178e:	3320      	adds	r3, #32
 8001790:	443b      	add	r3, r7
 8001792:	f803 2c14 	strb.w	r2, [r3, #-20]

  writePacket3(packet, index);
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	f107 030c 	add.w	r3, r7, #12
 800179c:	4611      	mov	r1, r2
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fd24 	bl	80011ec <writePacket3>
}
 80017a4:	bf00      	nop
 80017a6:	3720      	adds	r7, #32
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <operatingMode>:

void operatingMode(uint8_t motor_id) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
  uint8_t packet[14];
  size_t index = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]

  packet[index++] = 0xFF;
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	1c5a      	adds	r2, r3, #1
 80017be:	61fa      	str	r2, [r7, #28]
 80017c0:	3320      	adds	r3, #32
 80017c2:	443b      	add	r3, r7
 80017c4:	22ff      	movs	r2, #255	@ 0xff
 80017c6:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0xFF;
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	1c5a      	adds	r2, r3, #1
 80017ce:	61fa      	str	r2, [r7, #28]
 80017d0:	3320      	adds	r3, #32
 80017d2:	443b      	add	r3, r7
 80017d4:	22ff      	movs	r2, #255	@ 0xff
 80017d6:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0xFD;
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	1c5a      	adds	r2, r3, #1
 80017de:	61fa      	str	r2, [r7, #28]
 80017e0:	3320      	adds	r3, #32
 80017e2:	443b      	add	r3, r7
 80017e4:	22fd      	movs	r2, #253	@ 0xfd
 80017e6:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0x00;
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	1c5a      	adds	r2, r3, #1
 80017ee:	61fa      	str	r2, [r7, #28]
 80017f0:	3320      	adds	r3, #32
 80017f2:	443b      	add	r3, r7
 80017f4:	2200      	movs	r2, #0
 80017f6:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = motor_id; // ID
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	1c5a      	adds	r2, r3, #1
 80017fe:	61fa      	str	r2, [r7, #28]
 8001800:	3320      	adds	r3, #32
 8001802:	443b      	add	r3, r7
 8001804:	79fa      	ldrb	r2, [r7, #7]
 8001806:	f803 2c14 	strb.w	r2, [r3, #-20]

  packet[index++] = 0x06;
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	1c5a      	adds	r2, r3, #1
 800180e:	61fa      	str	r2, [r7, #28]
 8001810:	3320      	adds	r3, #32
 8001812:	443b      	add	r3, r7
 8001814:	2206      	movs	r2, #6
 8001816:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0x00;
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	1c5a      	adds	r2, r3, #1
 800181e:	61fa      	str	r2, [r7, #28]
 8001820:	3320      	adds	r3, #32
 8001822:	443b      	add	r3, r7
 8001824:	2200      	movs	r2, #0
 8001826:	f803 2c14 	strb.w	r2, [r3, #-20]

  packet[index++] = 0x03; // Write
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	1c5a      	adds	r2, r3, #1
 800182e:	61fa      	str	r2, [r7, #28]
 8001830:	3320      	adds	r3, #32
 8001832:	443b      	add	r3, r7
 8001834:	2203      	movs	r2, #3
 8001836:	f803 2c14 	strb.w	r2, [r3, #-20]

  packet[index++] = 0x0B;
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	1c5a      	adds	r2, r3, #1
 800183e:	61fa      	str	r2, [r7, #28]
 8001840:	3320      	adds	r3, #32
 8001842:	443b      	add	r3, r7
 8001844:	220b      	movs	r2, #11
 8001846:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0x00;
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	1c5a      	adds	r2, r3, #1
 800184e:	61fa      	str	r2, [r7, #28]
 8001850:	3320      	adds	r3, #32
 8001852:	443b      	add	r3, r7
 8001854:	2200      	movs	r2, #0
 8001856:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0x01;
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	1c5a      	adds	r2, r3, #1
 800185e:	61fa      	str	r2, [r7, #28]
 8001860:	3320      	adds	r3, #32
 8001862:	443b      	add	r3, r7
 8001864:	2201      	movs	r2, #1
 8001866:	f803 2c14 	strb.w	r2, [r3, #-20]

  unsigned short crc = update_crc(0, packet, index);
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	b29a      	uxth	r2, r3
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	4619      	mov	r1, r3
 8001874:	2000      	movs	r0, #0
 8001876:	f7ff fea5 	bl	80015c4 <update_crc>
 800187a:	4603      	mov	r3, r0
 800187c:	837b      	strh	r3, [r7, #26]
  packet[index++] = crc & 0xFF;
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	1c5a      	adds	r2, r3, #1
 8001882:	61fa      	str	r2, [r7, #28]
 8001884:	8b7a      	ldrh	r2, [r7, #26]
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	3320      	adds	r3, #32
 800188a:	443b      	add	r3, r7
 800188c:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = (crc >> 8) & 0xFF;
 8001890:	8b7b      	ldrh	r3, [r7, #26]
 8001892:	0a1b      	lsrs	r3, r3, #8
 8001894:	b299      	uxth	r1, r3
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	1c5a      	adds	r2, r3, #1
 800189a:	61fa      	str	r2, [r7, #28]
 800189c:	b2ca      	uxtb	r2, r1
 800189e:	3320      	adds	r3, #32
 80018a0:	443b      	add	r3, r7
 80018a2:	f803 2c14 	strb.w	r2, [r3, #-20]

  writePacket3(packet, index);
 80018a6:	69fa      	ldr	r2, [r7, #28]
 80018a8:	f107 030c 	add.w	r3, r7, #12
 80018ac:	4611      	mov	r1, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fc9c 	bl	80011ec <writePacket3>
}
 80018b4:	bf00      	nop
 80018b6:	3720      	adds	r7, #32
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <sendGoalVelocity>:

void sendGoalVelocity(uint8_t motor_id, int32_t velocity) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b088      	sub	sp, #32
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	6039      	str	r1, [r7, #0]
 80018c6:	71fb      	strb	r3, [r7, #7]
  uint8_t packet[16];
  size_t index = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]

  packet[index++] = 0xFF;
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	61fa      	str	r2, [r7, #28]
 80018d2:	3320      	adds	r3, #32
 80018d4:	443b      	add	r3, r7
 80018d6:	22ff      	movs	r2, #255	@ 0xff
 80018d8:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = 0xFF;
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	1c5a      	adds	r2, r3, #1
 80018e0:	61fa      	str	r2, [r7, #28]
 80018e2:	3320      	adds	r3, #32
 80018e4:	443b      	add	r3, r7
 80018e6:	22ff      	movs	r2, #255	@ 0xff
 80018e8:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = 0xFD;
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	61fa      	str	r2, [r7, #28]
 80018f2:	3320      	adds	r3, #32
 80018f4:	443b      	add	r3, r7
 80018f6:	22fd      	movs	r2, #253	@ 0xfd
 80018f8:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = 0x00;
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	1c5a      	adds	r2, r3, #1
 8001900:	61fa      	str	r2, [r7, #28]
 8001902:	3320      	adds	r3, #32
 8001904:	443b      	add	r3, r7
 8001906:	2200      	movs	r2, #0
 8001908:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = motor_id; // ID
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	61fa      	str	r2, [r7, #28]
 8001912:	3320      	adds	r3, #32
 8001914:	443b      	add	r3, r7
 8001916:	79fa      	ldrb	r2, [r7, #7]
 8001918:	f803 2c18 	strb.w	r2, [r3, #-24]

  packet[index++] = 0x09;
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	61fa      	str	r2, [r7, #28]
 8001922:	3320      	adds	r3, #32
 8001924:	443b      	add	r3, r7
 8001926:	2209      	movs	r2, #9
 8001928:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = 0x00;
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	1c5a      	adds	r2, r3, #1
 8001930:	61fa      	str	r2, [r7, #28]
 8001932:	3320      	adds	r3, #32
 8001934:	443b      	add	r3, r7
 8001936:	2200      	movs	r2, #0
 8001938:	f803 2c18 	strb.w	r2, [r3, #-24]

  packet[index++] = 0x03; // Write
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	61fa      	str	r2, [r7, #28]
 8001942:	3320      	adds	r3, #32
 8001944:	443b      	add	r3, r7
 8001946:	2203      	movs	r2, #3
 8001948:	f803 2c18 	strb.w	r2, [r3, #-24]

  packet[index++] = 0x68;
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	61fa      	str	r2, [r7, #28]
 8001952:	3320      	adds	r3, #32
 8001954:	443b      	add	r3, r7
 8001956:	2268      	movs	r2, #104	@ 0x68
 8001958:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = 0x00;
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	61fa      	str	r2, [r7, #28]
 8001962:	3320      	adds	r3, #32
 8001964:	443b      	add	r3, r7
 8001966:	2200      	movs	r2, #0
 8001968:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = (velocity & 0xFF);
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	1c5a      	adds	r2, r3, #1
 8001970:	61fa      	str	r2, [r7, #28]
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	3320      	adds	r3, #32
 8001978:	443b      	add	r3, r7
 800197a:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = (velocity >> 8) & 0xFF;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	1219      	asrs	r1, r3, #8
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	1c5a      	adds	r2, r3, #1
 8001986:	61fa      	str	r2, [r7, #28]
 8001988:	b2ca      	uxtb	r2, r1
 800198a:	3320      	adds	r3, #32
 800198c:	443b      	add	r3, r7
 800198e:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = (velocity >> 16) & 0xFF;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	1419      	asrs	r1, r3, #16
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	1c5a      	adds	r2, r3, #1
 800199a:	61fa      	str	r2, [r7, #28]
 800199c:	b2ca      	uxtb	r2, r1
 800199e:	3320      	adds	r3, #32
 80019a0:	443b      	add	r3, r7
 80019a2:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = (velocity >> 24) & 0xFF;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	0e19      	lsrs	r1, r3, #24
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	61fa      	str	r2, [r7, #28]
 80019b0:	b2ca      	uxtb	r2, r1
 80019b2:	3320      	adds	r3, #32
 80019b4:	443b      	add	r3, r7
 80019b6:	f803 2c18 	strb.w	r2, [r3, #-24]

  unsigned short crc = update_crc(0, packet, index);
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	b29a      	uxth	r2, r3
 80019be:	f107 0308 	add.w	r3, r7, #8
 80019c2:	4619      	mov	r1, r3
 80019c4:	2000      	movs	r0, #0
 80019c6:	f7ff fdfd 	bl	80015c4 <update_crc>
 80019ca:	4603      	mov	r3, r0
 80019cc:	837b      	strh	r3, [r7, #26]
  packet[index++] = crc & 0xFF;
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	61fa      	str	r2, [r7, #28]
 80019d4:	8b7a      	ldrh	r2, [r7, #26]
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	3320      	adds	r3, #32
 80019da:	443b      	add	r3, r7
 80019dc:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = (crc >> 8) & 0xFF;
 80019e0:	8b7b      	ldrh	r3, [r7, #26]
 80019e2:	0a1b      	lsrs	r3, r3, #8
 80019e4:	b299      	uxth	r1, r3
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	61fa      	str	r2, [r7, #28]
 80019ec:	b2ca      	uxtb	r2, r1
 80019ee:	3320      	adds	r3, #32
 80019f0:	443b      	add	r3, r7
 80019f2:	f803 2c18 	strb.w	r2, [r3, #-24]

  writePacket3(packet, index);
 80019f6:	69fa      	ldr	r2, [r7, #28]
 80019f8:	f107 0308 	add.w	r3, r7, #8
 80019fc:	4611      	mov	r1, r2
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fbf4 	bl	80011ec <writePacket3>
}
 8001a04:	bf00      	nop
 8001a06:	3720      	adds	r7, #32
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	0000      	movs	r0, r0
	...

08001a10 <convertlineangVelToSpeed>:
void convertlineangVelToSpeed(int32_t linear_vel, int32_t angular_vel) {
 8001a10:	b5b0      	push	{r4, r5, r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
	velocity_0 = linear_vel + (angular_vel * 0.9);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7fe fe70 	bl	8000700 <__aeabi_i2d>
 8001a20:	4604      	mov	r4, r0
 8001a22:	460d      	mov	r5, r1
 8001a24:	6838      	ldr	r0, [r7, #0]
 8001a26:	f7fe fe6b 	bl	8000700 <__aeabi_i2d>
 8001a2a:	a31b      	add	r3, pc, #108	@ (adr r3, 8001a98 <convertlineangVelToSpeed+0x88>)
 8001a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a30:	f7fe fbea 	bl	8000208 <__aeabi_dmul>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4620      	mov	r0, r4
 8001a3a:	4629      	mov	r1, r5
 8001a3c:	f7fe fd14 	bl	8000468 <__adddf3>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4610      	mov	r0, r2
 8001a46:	4619      	mov	r1, r3
 8001a48:	f7fe fec4 	bl	80007d4 <__aeabi_d2f>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4a14      	ldr	r2, [pc, #80]	@ (8001aa0 <convertlineangVelToSpeed+0x90>)
 8001a50:	6013      	str	r3, [r2, #0]
	velocity_1 = linear_vel - (angular_vel * 0.9);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7fe fe54 	bl	8000700 <__aeabi_i2d>
 8001a58:	4604      	mov	r4, r0
 8001a5a:	460d      	mov	r5, r1
 8001a5c:	6838      	ldr	r0, [r7, #0]
 8001a5e:	f7fe fe4f 	bl	8000700 <__aeabi_i2d>
 8001a62:	a30d      	add	r3, pc, #52	@ (adr r3, 8001a98 <convertlineangVelToSpeed+0x88>)
 8001a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a68:	f7fe fbce 	bl	8000208 <__aeabi_dmul>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4620      	mov	r0, r4
 8001a72:	4629      	mov	r1, r5
 8001a74:	f7fe fcf6 	bl	8000464 <__aeabi_dsub>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f7fe fea8 	bl	80007d4 <__aeabi_d2f>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4a07      	ldr	r2, [pc, #28]	@ (8001aa4 <convertlineangVelToSpeed+0x94>)
 8001a88:	6013      	str	r3, [r2, #0]
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bdb0      	pop	{r4, r5, r7, pc}
 8001a92:	bf00      	nop
 8001a94:	f3af 8000 	nop.w
 8001a98:	cccccccd 	.word	0xcccccccd
 8001a9c:	3feccccc 	.word	0x3feccccc
 8001aa0:	20000238 	.word	0x20000238
 8001aa4:	2000023c 	.word	0x2000023c

08001aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aac:	b672      	cpsid	i
}
 8001aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <Error_Handler+0x8>

08001ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	4b10      	ldr	r3, [pc, #64]	@ (8001b00 <HAL_MspInit+0x4c>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac2:	4a0f      	ldr	r2, [pc, #60]	@ (8001b00 <HAL_MspInit+0x4c>)
 8001ac4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ac8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aca:	4b0d      	ldr	r3, [pc, #52]	@ (8001b00 <HAL_MspInit+0x4c>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ace:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	603b      	str	r3, [r7, #0]
 8001ada:	4b09      	ldr	r3, [pc, #36]	@ (8001b00 <HAL_MspInit+0x4c>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ade:	4a08      	ldr	r2, [pc, #32]	@ (8001b00 <HAL_MspInit+0x4c>)
 8001ae0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ae6:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <HAL_MspInit+0x4c>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800

08001b04 <LL_USART_IsActiveFlag_ORE>:
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	bf0c      	ite	eq
 8001b18:	2301      	moveq	r3, #1
 8001b1a:	2300      	movne	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <LL_USART_IsActiveFlag_IDLE>:
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0310 	and.w	r3, r3, #16
 8001b3a:	2b10      	cmp	r3, #16
 8001b3c:	bf0c      	ite	eq
 8001b3e:	2301      	moveq	r3, #1
 8001b40:	2300      	movne	r3, #0
 8001b42:	b2db      	uxtb	r3, r3
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_USART_ClearFlag_ORE>:
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001b66:	68fb      	ldr	r3, [r7, #12]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_USART_ClearFlag_IDLE>:
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001b82:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
}
 8001b8c:	bf00      	nop
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	619a      	str	r2, [r3, #24]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_DMA_EnableStream>:
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8001bbe:	4a0c      	ldr	r2, [pc, #48]	@ (8001bf0 <LL_DMA_EnableStream+0x3c>)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4413      	add	r3, r2
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4908      	ldr	r1, [pc, #32]	@ (8001bf0 <LL_DMA_EnableStream+0x3c>)
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	440a      	add	r2, r1
 8001bd4:	7812      	ldrb	r2, [r2, #0]
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	440a      	add	r2, r1
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6013      	str	r3, [r2, #0]
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	08006274 	.word	0x08006274

08001bf4 <LL_DMA_DisableStream>:
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8001bfe:	4a0c      	ldr	r2, [pc, #48]	@ (8001c30 <LL_DMA_DisableStream+0x3c>)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	4413      	add	r3, r2
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4908      	ldr	r1, [pc, #32]	@ (8001c30 <LL_DMA_DisableStream+0x3c>)
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	440a      	add	r2, r1
 8001c14:	7812      	ldrb	r2, [r2, #0]
 8001c16:	4611      	mov	r1, r2
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	440a      	add	r2, r1
 8001c1c:	f023 0301 	bic.w	r3, r3, #1
 8001c20:	6013      	str	r3, [r2, #0]
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	08006274 	.word	0x08006274

08001c34 <LL_DMA_SetDataLength>:
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8001c40:	4a0d      	ldr	r2, [pc, #52]	@ (8001c78 <LL_DMA_SetDataLength+0x44>)
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	4413      	add	r3, r2
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	0c1b      	lsrs	r3, r3, #16
 8001c52:	041b      	lsls	r3, r3, #16
 8001c54:	4908      	ldr	r1, [pc, #32]	@ (8001c78 <LL_DMA_SetDataLength+0x44>)
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	440a      	add	r2, r1
 8001c5a:	7812      	ldrb	r2, [r2, #0]
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	440a      	add	r2, r1
 8001c62:	4611      	mov	r1, r2
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	604b      	str	r3, [r1, #4]
}
 8001c6a:	bf00      	nop
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	08006274 	.word	0x08006274

08001c7c <LL_DMA_GetDataLength>:
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT));
 8001c86:	4a07      	ldr	r2, [pc, #28]	@ (8001ca4 <LL_DMA_GetDataLength+0x28>)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4413      	add	r3, r2
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	b29b      	uxth	r3, r3
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	08006274 	.word	0x08006274

08001ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cac:	bf00      	nop
 8001cae:	e7fd      	b.n	8001cac <NMI_Handler+0x4>

08001cb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb4:	bf00      	nop
 8001cb6:	e7fd      	b.n	8001cb4 <HardFault_Handler+0x4>

08001cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cbc:	bf00      	nop
 8001cbe:	e7fd      	b.n	8001cbc <MemManage_Handler+0x4>

08001cc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <BusFault_Handler+0x4>

08001cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <UsageFault_Handler+0x4>

08001cd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cfe:	f000 fd39 	bl	8002774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d18:	4802      	ldr	r0, [pc, #8]	@ (8001d24 <ADC_IRQHandler+0x10>)
 8001d1a:	f000 fd8e 	bl	800283a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000028 	.word	0x20000028

08001d28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(LL_USART_IsActiveFlag_IDLE(USART1)) {
 8001d2e:	482d      	ldr	r0, [pc, #180]	@ (8001de4 <USART1_IRQHandler+0xbc>)
 8001d30:	f7ff fefb 	bl	8001b2a <LL_USART_IsActiveFlag_IDLE>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d047      	beq.n	8001dca <USART1_IRQHandler+0xa2>
		int len = RX_BUFFER_SIZE - LL_DMA_GetDataLength(DMA2, LL_DMA_STREAM_2);
 8001d3a:	2102      	movs	r1, #2
 8001d3c:	482a      	ldr	r0, [pc, #168]	@ (8001de8 <USART1_IRQHandler+0xc0>)
 8001d3e:	f7ff ff9d 	bl	8001c7c <LL_DMA_GetDataLength>
 8001d42:	4603      	mov	r3, r0
 8001d44:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8001d48:	607b      	str	r3, [r7, #4]

		LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_2);
 8001d4a:	2104      	movs	r1, #4
 8001d4c:	4827      	ldr	r0, [pc, #156]	@ (8001dec <USART1_IRQHandler+0xc4>)
 8001d4e:	f7ff ff23 	bl	8001b98 <LL_GPIO_SetOutputPin>

		if(len >= 10) {
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b09      	cmp	r3, #9
 8001d56:	dd27      	ble.n	8001da8 <USART1_IRQHandler+0x80>
			if(PCrxBuffer[0] == 0x19 && PCrxBuffer[9] == 0x03) {
 8001d58:	4b25      	ldr	r3, [pc, #148]	@ (8001df0 <USART1_IRQHandler+0xc8>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b19      	cmp	r3, #25
 8001d5e:	d123      	bne.n	8001da8 <USART1_IRQHandler+0x80>
 8001d60:	4b23      	ldr	r3, [pc, #140]	@ (8001df0 <USART1_IRQHandler+0xc8>)
 8001d62:	7a5b      	ldrb	r3, [r3, #9]
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d11f      	bne.n	8001da8 <USART1_IRQHandler+0x80>
				linear_vel = (PCrxBuffer[1] << 24) | (PCrxBuffer[2] << 16) | (PCrxBuffer[3] << 8) | PCrxBuffer[4];
 8001d68:	4b21      	ldr	r3, [pc, #132]	@ (8001df0 <USART1_IRQHandler+0xc8>)
 8001d6a:	785b      	ldrb	r3, [r3, #1]
 8001d6c:	061a      	lsls	r2, r3, #24
 8001d6e:	4b20      	ldr	r3, [pc, #128]	@ (8001df0 <USART1_IRQHandler+0xc8>)
 8001d70:	789b      	ldrb	r3, [r3, #2]
 8001d72:	041b      	lsls	r3, r3, #16
 8001d74:	431a      	orrs	r2, r3
 8001d76:	4b1e      	ldr	r3, [pc, #120]	@ (8001df0 <USART1_IRQHandler+0xc8>)
 8001d78:	78db      	ldrb	r3, [r3, #3]
 8001d7a:	021b      	lsls	r3, r3, #8
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	4a1c      	ldr	r2, [pc, #112]	@ (8001df0 <USART1_IRQHandler+0xc8>)
 8001d80:	7912      	ldrb	r2, [r2, #4]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	4a1b      	ldr	r2, [pc, #108]	@ (8001df4 <USART1_IRQHandler+0xcc>)
 8001d86:	6013      	str	r3, [r2, #0]
				angular_vel = (PCrxBuffer[5] << 24) | (PCrxBuffer[6] << 16) | (PCrxBuffer[7] << 8) | PCrxBuffer[8];
 8001d88:	4b19      	ldr	r3, [pc, #100]	@ (8001df0 <USART1_IRQHandler+0xc8>)
 8001d8a:	795b      	ldrb	r3, [r3, #5]
 8001d8c:	061a      	lsls	r2, r3, #24
 8001d8e:	4b18      	ldr	r3, [pc, #96]	@ (8001df0 <USART1_IRQHandler+0xc8>)
 8001d90:	799b      	ldrb	r3, [r3, #6]
 8001d92:	041b      	lsls	r3, r3, #16
 8001d94:	431a      	orrs	r2, r3
 8001d96:	4b16      	ldr	r3, [pc, #88]	@ (8001df0 <USART1_IRQHandler+0xc8>)
 8001d98:	79db      	ldrb	r3, [r3, #7]
 8001d9a:	021b      	lsls	r3, r3, #8
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	4a14      	ldr	r2, [pc, #80]	@ (8001df0 <USART1_IRQHandler+0xc8>)
 8001da0:	7a12      	ldrb	r2, [r2, #8]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	4a14      	ldr	r2, [pc, #80]	@ (8001df8 <USART1_IRQHandler+0xd0>)
 8001da6:	6013      	str	r3, [r2, #0]
			}
		}
		LL_USART_ClearFlag_IDLE(USART1);
 8001da8:	480e      	ldr	r0, [pc, #56]	@ (8001de4 <USART1_IRQHandler+0xbc>)
 8001daa:	f7ff fee3 	bl	8001b74 <LL_USART_ClearFlag_IDLE>
		LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_2);
 8001dae:	2102      	movs	r1, #2
 8001db0:	480d      	ldr	r0, [pc, #52]	@ (8001de8 <USART1_IRQHandler+0xc0>)
 8001db2:	f7ff ff1f 	bl	8001bf4 <LL_DMA_DisableStream>
		LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_2, RX_BUFFER_SIZE);
 8001db6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dba:	2102      	movs	r1, #2
 8001dbc:	480a      	ldr	r0, [pc, #40]	@ (8001de8 <USART1_IRQHandler+0xc0>)
 8001dbe:	f7ff ff39 	bl	8001c34 <LL_DMA_SetDataLength>
		LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_2);
 8001dc2:	2102      	movs	r1, #2
 8001dc4:	4808      	ldr	r0, [pc, #32]	@ (8001de8 <USART1_IRQHandler+0xc0>)
 8001dc6:	f7ff fef5 	bl	8001bb4 <LL_DMA_EnableStream>
	}

	if(LL_USART_IsActiveFlag_ORE(USART1))
 8001dca:	4806      	ldr	r0, [pc, #24]	@ (8001de4 <USART1_IRQHandler+0xbc>)
 8001dcc:	f7ff fe9a 	bl	8001b04 <LL_USART_IsActiveFlag_ORE>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d002      	beq.n	8001ddc <USART1_IRQHandler+0xb4>
		LL_USART_ClearFlag_ORE(USART1);
 8001dd6:	4803      	ldr	r0, [pc, #12]	@ (8001de4 <USART1_IRQHandler+0xbc>)
 8001dd8:	f7ff feba 	bl	8001b50 <LL_USART_ClearFlag_ORE>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40011000 	.word	0x40011000
 8001de8:	40026400 	.word	0x40026400
 8001dec:	40020c00 	.word	0x40020c00
 8001df0:	20000138 	.word	0x20000138
 8001df4:	20000240 	.word	0x20000240
 8001df8:	20000244 	.word	0x20000244

08001dfc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001e10:	4802      	ldr	r0, [pc, #8]	@ (8001e1c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001e12:	f002 fefd 	bl	8004c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000248 	.word	0x20000248

08001e20 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e24:	4802      	ldr	r0, [pc, #8]	@ (8001e30 <DMA2_Stream0_IRQHandler+0x10>)
 8001e26:	f001 fc19 	bl	800365c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000070 	.word	0x20000070

08001e34 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Stream2_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Stream7_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e54:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <SystemInit+0x20>)
 8001e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e5a:	4a05      	ldr	r2, [pc, #20]	@ (8001e70 <SystemInit+0x20>)
 8001e5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e7a:	f107 0308 	add.w	r3, r7, #8
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e88:	463b      	mov	r3, r7
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001e90:	4b1e      	ldr	r3, [pc, #120]	@ (8001f0c <MX_TIM8_Init+0x98>)
 8001e92:	4a1f      	ldr	r2, [pc, #124]	@ (8001f10 <MX_TIM8_Init+0x9c>)
 8001e94:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 8001e96:	4b1d      	ldr	r3, [pc, #116]	@ (8001f0c <MX_TIM8_Init+0x98>)
 8001e98:	22b3      	movs	r2, #179	@ 0xb3
 8001e9a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001f0c <MX_TIM8_Init+0x98>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 10000-1;
 8001ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f0c <MX_TIM8_Init+0x98>)
 8001ea4:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001ea8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eaa:	4b18      	ldr	r3, [pc, #96]	@ (8001f0c <MX_TIM8_Init+0x98>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001eb0:	4b16      	ldr	r3, [pc, #88]	@ (8001f0c <MX_TIM8_Init+0x98>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb6:	4b15      	ldr	r3, [pc, #84]	@ (8001f0c <MX_TIM8_Init+0x98>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001ebc:	4813      	ldr	r0, [pc, #76]	@ (8001f0c <MX_TIM8_Init+0x98>)
 8001ebe:	f002 fde7 	bl	8004a90 <HAL_TIM_Base_Init>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001ec8:	f7ff fdee 	bl	8001aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ecc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ed0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001ed2:	f107 0308 	add.w	r3, r7, #8
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	480c      	ldr	r0, [pc, #48]	@ (8001f0c <MX_TIM8_Init+0x98>)
 8001eda:	f002 ff89 	bl	8004df0 <HAL_TIM_ConfigClockSource>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001ee4:	f7ff fde0 	bl	8001aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ee8:	2320      	movs	r3, #32
 8001eea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ef0:	463b      	mov	r3, r7
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4805      	ldr	r0, [pc, #20]	@ (8001f0c <MX_TIM8_Init+0x98>)
 8001ef6:	f003 f9bb 	bl	8005270 <HAL_TIMEx_MasterConfigSynchronization>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001f00:	f7ff fdd2 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001f04:	bf00      	nop
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000248 	.word	0x20000248
 8001f10:	40010400 	.word	0x40010400

08001f14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a0e      	ldr	r2, [pc, #56]	@ (8001f5c <HAL_TIM_Base_MspInit+0x48>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d115      	bne.n	8001f52 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f60 <HAL_TIM_Base_MspInit+0x4c>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2e:	4a0c      	ldr	r2, [pc, #48]	@ (8001f60 <HAL_TIM_Base_MspInit+0x4c>)
 8001f30:	f043 0302 	orr.w	r3, r3, #2
 8001f34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f36:	4b0a      	ldr	r3, [pc, #40]	@ (8001f60 <HAL_TIM_Base_MspInit+0x4c>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2100      	movs	r1, #0
 8001f46:	202c      	movs	r0, #44	@ 0x2c
 8001f48:	f001 fa4b 	bl	80033e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001f4c:	202c      	movs	r0, #44	@ 0x2c
 8001f4e:	f001 fa64 	bl	800341a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001f52:	bf00      	nop
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40010400 	.word	0x40010400
 8001f60:	40023800 	.word	0x40023800

08001f64 <__NVIC_GetPriorityGrouping>:
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f68:	4b04      	ldr	r3, [pc, #16]	@ (8001f7c <__NVIC_GetPriorityGrouping+0x18>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	f003 0307 	and.w	r3, r3, #7
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <__NVIC_EnableIRQ>:
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	db0b      	blt.n	8001faa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	f003 021f 	and.w	r2, r3, #31
 8001f98:	4907      	ldr	r1, [pc, #28]	@ (8001fb8 <__NVIC_EnableIRQ+0x38>)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000e100 	.word	0xe000e100

08001fbc <__NVIC_SetPriority>:
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	6039      	str	r1, [r7, #0]
 8001fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	db0a      	blt.n	8001fe6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	490c      	ldr	r1, [pc, #48]	@ (8002008 <__NVIC_SetPriority+0x4c>)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	0112      	lsls	r2, r2, #4
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	440b      	add	r3, r1
 8001fe0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001fe4:	e00a      	b.n	8001ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	4908      	ldr	r1, [pc, #32]	@ (800200c <__NVIC_SetPriority+0x50>)
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	3b04      	subs	r3, #4
 8001ff4:	0112      	lsls	r2, r2, #4
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	761a      	strb	r2, [r3, #24]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000e100 	.word	0xe000e100
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <NVIC_EncodePriority>:
{
 8002010:	b480      	push	{r7}
 8002012:	b089      	sub	sp, #36	@ 0x24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f1c3 0307 	rsb	r3, r3, #7
 800202a:	2b04      	cmp	r3, #4
 800202c:	bf28      	it	cs
 800202e:	2304      	movcs	r3, #4
 8002030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3304      	adds	r3, #4
 8002036:	2b06      	cmp	r3, #6
 8002038:	d902      	bls.n	8002040 <NVIC_EncodePriority+0x30>
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3b03      	subs	r3, #3
 800203e:	e000      	b.n	8002042 <NVIC_EncodePriority+0x32>
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	f04f 32ff 	mov.w	r2, #4294967295
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43da      	mvns	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	401a      	ands	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002058:	f04f 31ff 	mov.w	r1, #4294967295
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	fa01 f303 	lsl.w	r3, r1, r3
 8002062:	43d9      	mvns	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002068:	4313      	orrs	r3, r2
}
 800206a:	4618      	mov	r0, r3
 800206c:	3724      	adds	r7, #36	@ 0x24
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <LL_USART_Enable>:
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	60da      	str	r2, [r3, #12]
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <LL_USART_ConfigAsyncMode>:
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	615a      	str	r2, [r3, #20]
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80020cc:	4b08      	ldr	r3, [pc, #32]	@ (80020f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80020ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020d0:	4907      	ldr	r1, [pc, #28]	@ (80020f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80020d8:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80020da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4013      	ands	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020e2:	68fb      	ldr	r3, [r7, #12]
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	40023800 	.word	0x40023800

080020f4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80020fc:	4b08      	ldr	r3, [pc, #32]	@ (8002120 <LL_APB1_GRP1_EnableClock+0x2c>)
 80020fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002100:	4907      	ldr	r1, [pc, #28]	@ (8002120 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4313      	orrs	r3, r2
 8002106:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002108:	4b05      	ldr	r3, [pc, #20]	@ (8002120 <LL_APB1_GRP1_EnableClock+0x2c>)
 800210a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4013      	ands	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002112:	68fb      	ldr	r3, [r7, #12]
}
 8002114:	bf00      	nop
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	40023800 	.word	0x40023800

08002124 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800212c:	4b08      	ldr	r3, [pc, #32]	@ (8002150 <LL_APB2_GRP1_EnableClock+0x2c>)
 800212e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002130:	4907      	ldr	r1, [pc, #28]	@ (8002150 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4313      	orrs	r3, r2
 8002136:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002138:	4b05      	ldr	r3, [pc, #20]	@ (8002150 <LL_APB2_GRP1_EnableClock+0x2c>)
 800213a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4013      	ands	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002142:	68fb      	ldr	r3, [r7, #12]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	40023800 	.word	0x40023800

08002154 <LL_DMA_SetDataTransferDirection>:
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8002160:	4a0d      	ldr	r2, [pc, #52]	@ (8002198 <LL_DMA_SetDataTransferDirection+0x44>)
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	4413      	add	r3, r2
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4413      	add	r3, r2
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002174:	4908      	ldr	r1, [pc, #32]	@ (8002198 <LL_DMA_SetDataTransferDirection+0x44>)
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	440b      	add	r3, r1
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	4619      	mov	r1, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	440b      	add	r3, r1
 8002182:	4619      	mov	r1, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4313      	orrs	r3, r2
 8002188:	600b      	str	r3, [r1, #0]
}
 800218a:	bf00      	nop
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	08006294 	.word	0x08006294

0800219c <LL_DMA_SetMode>:
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80021a8:	4a0d      	ldr	r2, [pc, #52]	@ (80021e0 <LL_DMA_SetMode+0x44>)
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	4413      	add	r3, r2
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	4413      	add	r3, r2
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 80021bc:	4908      	ldr	r1, [pc, #32]	@ (80021e0 <LL_DMA_SetMode+0x44>)
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	440b      	add	r3, r1
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	4619      	mov	r1, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	440b      	add	r3, r1
 80021ca:	4619      	mov	r1, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	600b      	str	r3, [r1, #0]
}
 80021d2:	bf00      	nop
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	08006294 	.word	0x08006294

080021e4 <LL_DMA_SetPeriphIncMode>:
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 80021f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002228 <LL_DMA_SetPeriphIncMode+0x44>)
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	4413      	add	r3, r2
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4413      	add	r3, r2
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002204:	4908      	ldr	r1, [pc, #32]	@ (8002228 <LL_DMA_SetPeriphIncMode+0x44>)
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	440b      	add	r3, r1
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4619      	mov	r1, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	440b      	add	r3, r1
 8002212:	4619      	mov	r1, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4313      	orrs	r3, r2
 8002218:	600b      	str	r3, [r1, #0]
}
 800221a:	bf00      	nop
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	08006294 	.word	0x08006294

0800222c <LL_DMA_SetMemoryIncMode>:
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8002238:	4a0d      	ldr	r2, [pc, #52]	@ (8002270 <LL_DMA_SetMemoryIncMode+0x44>)
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	4413      	add	r3, r2
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	461a      	mov	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4413      	add	r3, r2
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800224c:	4908      	ldr	r1, [pc, #32]	@ (8002270 <LL_DMA_SetMemoryIncMode+0x44>)
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	440b      	add	r3, r1
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	4619      	mov	r1, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	440b      	add	r3, r1
 800225a:	4619      	mov	r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]
}
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	08006294 	.word	0x08006294

08002274 <LL_DMA_SetPeriphSize>:
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8002280:	4a0d      	ldr	r2, [pc, #52]	@ (80022b8 <LL_DMA_SetPeriphSize+0x44>)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	4413      	add	r3, r2
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	461a      	mov	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4413      	add	r3, r2
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8002294:	4908      	ldr	r1, [pc, #32]	@ (80022b8 <LL_DMA_SetPeriphSize+0x44>)
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	440b      	add	r3, r1
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	4619      	mov	r1, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	440b      	add	r3, r1
 80022a2:	4619      	mov	r1, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]
}
 80022aa:	bf00      	nop
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	08006294 	.word	0x08006294

080022bc <LL_DMA_SetMemorySize>:
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 80022c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002300 <LL_DMA_SetMemorySize+0x44>)
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	4413      	add	r3, r2
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	461a      	mov	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	4413      	add	r3, r2
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 80022dc:	4908      	ldr	r1, [pc, #32]	@ (8002300 <LL_DMA_SetMemorySize+0x44>)
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	440b      	add	r3, r1
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	4619      	mov	r1, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	440b      	add	r3, r1
 80022ea:	4619      	mov	r1, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]
}
 80022f2:	bf00      	nop
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	08006294 	.word	0x08006294

08002304 <LL_DMA_SetStreamPriorityLevel>:
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8002310:	4a0d      	ldr	r2, [pc, #52]	@ (8002348 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	4413      	add	r3, r2
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	4413      	add	r3, r2
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002324:	4908      	ldr	r1, [pc, #32]	@ (8002348 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	440b      	add	r3, r1
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	4619      	mov	r1, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	440b      	add	r3, r1
 8002332:	4619      	mov	r1, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4313      	orrs	r3, r2
 8002338:	600b      	str	r3, [r1, #0]
}
 800233a:	bf00      	nop
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	08006294 	.word	0x08006294

0800234c <LL_DMA_SetChannelSelection>:
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8002358:	4a0d      	ldr	r2, [pc, #52]	@ (8002390 <LL_DMA_SetChannelSelection+0x44>)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	4413      	add	r3, r2
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	461a      	mov	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	4413      	add	r3, r2
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800236c:	4908      	ldr	r1, [pc, #32]	@ (8002390 <LL_DMA_SetChannelSelection+0x44>)
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	440b      	add	r3, r1
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	4619      	mov	r1, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	440b      	add	r3, r1
 800237a:	4619      	mov	r1, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]
}
 8002382:	bf00      	nop
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	08006294 	.word	0x08006294

08002394 <LL_DMA_DisableFifoMode>:
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800239e:	4a0c      	ldr	r2, [pc, #48]	@ (80023d0 <LL_DMA_DisableFifoMode+0x3c>)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	4413      	add	r3, r2
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4413      	add	r3, r2
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	4908      	ldr	r1, [pc, #32]	@ (80023d0 <LL_DMA_DisableFifoMode+0x3c>)
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	440a      	add	r2, r1
 80023b4:	7812      	ldrb	r2, [r2, #0]
 80023b6:	4611      	mov	r1, r2
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	440a      	add	r2, r1
 80023bc:	f023 0304 	bic.w	r3, r3, #4
 80023c0:	6153      	str	r3, [r2, #20]
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	08006294 	.word	0x08006294

080023d4 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08e      	sub	sp, #56	@ 0x38
 80023d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80023da:	f107 031c 	add.w	r3, r7, #28
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	605a      	str	r2, [r3, #4]
 80023e4:	609a      	str	r2, [r3, #8]
 80023e6:	60da      	str	r2, [r3, #12]
 80023e8:	611a      	str	r2, [r3, #16]
 80023ea:	615a      	str	r2, [r3, #20]
 80023ec:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ee:	1d3b      	adds	r3, r7, #4
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	611a      	str	r2, [r3, #16]
 80023fc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80023fe:	2010      	movs	r0, #16
 8002400:	f7ff fe90 	bl	8002124 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002404:	2002      	movs	r0, #2
 8002406:	f7ff fe5d 	bl	80020c4 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800240a:	23c0      	movs	r3, #192	@ 0xc0
 800240c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800240e:	2302      	movs	r3, #2
 8002410:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002412:	2303      	movs	r3, #3
 8002414:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800241e:	2307      	movs	r3, #7
 8002420:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002422:	1d3b      	adds	r3, r7, #4
 8002424:	4619      	mov	r1, r3
 8002426:	4848      	ldr	r0, [pc, #288]	@ (8002548 <MX_USART1_UART_Init+0x174>)
 8002428:	f003 f8fd 	bl	8005626 <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_RX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_2, LL_DMA_CHANNEL_4);
 800242c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002430:	2102      	movs	r1, #2
 8002432:	4846      	ldr	r0, [pc, #280]	@ (800254c <MX_USART1_UART_Init+0x178>)
 8002434:	f7ff ff8a 	bl	800234c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002438:	2200      	movs	r2, #0
 800243a:	2102      	movs	r1, #2
 800243c:	4843      	ldr	r0, [pc, #268]	@ (800254c <MX_USART1_UART_Init+0x178>)
 800243e:	f7ff fe89 	bl	8002154 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_2, LL_DMA_PRIORITY_LOW);
 8002442:	2200      	movs	r2, #0
 8002444:	2102      	movs	r1, #2
 8002446:	4841      	ldr	r0, [pc, #260]	@ (800254c <MX_USART1_UART_Init+0x178>)
 8002448:	f7ff ff5c 	bl	8002304 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MODE_CIRCULAR);
 800244c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002450:	2102      	movs	r1, #2
 8002452:	483e      	ldr	r0, [pc, #248]	@ (800254c <MX_USART1_UART_Init+0x178>)
 8002454:	f7ff fea2 	bl	800219c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_PERIPH_NOINCREMENT);
 8002458:	2200      	movs	r2, #0
 800245a:	2102      	movs	r1, #2
 800245c:	483b      	ldr	r0, [pc, #236]	@ (800254c <MX_USART1_UART_Init+0x178>)
 800245e:	f7ff fec1 	bl	80021e4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MEMORY_INCREMENT);
 8002462:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002466:	2102      	movs	r1, #2
 8002468:	4838      	ldr	r0, [pc, #224]	@ (800254c <MX_USART1_UART_Init+0x178>)
 800246a:	f7ff fedf 	bl	800222c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_2, LL_DMA_PDATAALIGN_BYTE);
 800246e:	2200      	movs	r2, #0
 8002470:	2102      	movs	r1, #2
 8002472:	4836      	ldr	r0, [pc, #216]	@ (800254c <MX_USART1_UART_Init+0x178>)
 8002474:	f7ff fefe 	bl	8002274 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_2, LL_DMA_MDATAALIGN_BYTE);
 8002478:	2200      	movs	r2, #0
 800247a:	2102      	movs	r1, #2
 800247c:	4833      	ldr	r0, [pc, #204]	@ (800254c <MX_USART1_UART_Init+0x178>)
 800247e:	f7ff ff1d 	bl	80022bc <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_2);
 8002482:	2102      	movs	r1, #2
 8002484:	4831      	ldr	r0, [pc, #196]	@ (800254c <MX_USART1_UART_Init+0x178>)
 8002486:	f7ff ff85 	bl	8002394 <LL_DMA_DisableFifoMode>

  /* USART1_TX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_7, LL_DMA_CHANNEL_4);
 800248a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800248e:	2107      	movs	r1, #7
 8002490:	482e      	ldr	r0, [pc, #184]	@ (800254c <MX_USART1_UART_Init+0x178>)
 8002492:	f7ff ff5b 	bl	800234c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002496:	2240      	movs	r2, #64	@ 0x40
 8002498:	2107      	movs	r1, #7
 800249a:	482c      	ldr	r0, [pc, #176]	@ (800254c <MX_USART1_UART_Init+0x178>)
 800249c:	f7ff fe5a 	bl	8002154 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_7, LL_DMA_PRIORITY_LOW);
 80024a0:	2200      	movs	r2, #0
 80024a2:	2107      	movs	r1, #7
 80024a4:	4829      	ldr	r0, [pc, #164]	@ (800254c <MX_USART1_UART_Init+0x178>)
 80024a6:	f7ff ff2d 	bl	8002304 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_7, LL_DMA_MODE_CIRCULAR);
 80024aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024ae:	2107      	movs	r1, #7
 80024b0:	4826      	ldr	r0, [pc, #152]	@ (800254c <MX_USART1_UART_Init+0x178>)
 80024b2:	f7ff fe73 	bl	800219c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_7, LL_DMA_PERIPH_NOINCREMENT);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2107      	movs	r1, #7
 80024ba:	4824      	ldr	r0, [pc, #144]	@ (800254c <MX_USART1_UART_Init+0x178>)
 80024bc:	f7ff fe92 	bl	80021e4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_7, LL_DMA_MEMORY_INCREMENT);
 80024c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024c4:	2107      	movs	r1, #7
 80024c6:	4821      	ldr	r0, [pc, #132]	@ (800254c <MX_USART1_UART_Init+0x178>)
 80024c8:	f7ff feb0 	bl	800222c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_7, LL_DMA_PDATAALIGN_BYTE);
 80024cc:	2200      	movs	r2, #0
 80024ce:	2107      	movs	r1, #7
 80024d0:	481e      	ldr	r0, [pc, #120]	@ (800254c <MX_USART1_UART_Init+0x178>)
 80024d2:	f7ff fecf 	bl	8002274 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_7, LL_DMA_MDATAALIGN_BYTE);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2107      	movs	r1, #7
 80024da:	481c      	ldr	r0, [pc, #112]	@ (800254c <MX_USART1_UART_Init+0x178>)
 80024dc:	f7ff feee 	bl	80022bc <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_7);
 80024e0:	2107      	movs	r1, #7
 80024e2:	481a      	ldr	r0, [pc, #104]	@ (800254c <MX_USART1_UART_Init+0x178>)
 80024e4:	f7ff ff56 	bl	8002394 <LL_DMA_DisableFifoMode>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80024e8:	f7ff fd3c 	bl	8001f64 <__NVIC_GetPriorityGrouping>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2200      	movs	r2, #0
 80024f0:	2100      	movs	r1, #0
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fd8c 	bl	8002010 <NVIC_EncodePriority>
 80024f8:	4603      	mov	r3, r0
 80024fa:	4619      	mov	r1, r3
 80024fc:	2025      	movs	r0, #37	@ 0x25
 80024fe:	f7ff fd5d 	bl	8001fbc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8002502:	2025      	movs	r0, #37	@ 0x25
 8002504:	f7ff fd3c 	bl	8001f80 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002508:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800250c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800250e:	2300      	movs	r3, #0
 8002510:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002512:	2300      	movs	r3, #0
 8002514:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002516:	2300      	movs	r3, #0
 8002518:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800251a:	230c      	movs	r3, #12
 800251c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800251e:	2300      	movs	r3, #0
 8002520:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002522:	2300      	movs	r3, #0
 8002524:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8002526:	f107 031c 	add.w	r3, r7, #28
 800252a:	4619      	mov	r1, r3
 800252c:	4808      	ldr	r0, [pc, #32]	@ (8002550 <MX_USART1_UART_Init+0x17c>)
 800252e:	f003 fcd7 	bl	8005ee0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8002532:	4807      	ldr	r0, [pc, #28]	@ (8002550 <MX_USART1_UART_Init+0x17c>)
 8002534:	f7ff fdaf 	bl	8002096 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8002538:	4805      	ldr	r0, [pc, #20]	@ (8002550 <MX_USART1_UART_Init+0x17c>)
 800253a:	f7ff fd9c 	bl	8002076 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800253e:	bf00      	nop
 8002540:	3738      	adds	r7, #56	@ 0x38
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40020400 	.word	0x40020400
 800254c:	40026400 	.word	0x40026400
 8002550:	40011000 	.word	0x40011000

08002554 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08e      	sub	sp, #56	@ 0x38
 8002558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800255a:	f107 031c 	add.w	r3, r7, #28
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	609a      	str	r2, [r3, #8]
 8002566:	60da      	str	r2, [r3, #12]
 8002568:	611a      	str	r2, [r3, #16]
 800256a:	615a      	str	r2, [r3, #20]
 800256c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256e:	1d3b      	adds	r3, r7, #4
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	60da      	str	r2, [r3, #12]
 800257a:	611a      	str	r2, [r3, #16]
 800257c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 800257e:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8002582:	f7ff fdb7 	bl	80020f4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002586:	2004      	movs	r0, #4
 8002588:	f7ff fd9c 	bl	80020c4 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PC5   ------> USART3_RX
  PC10   ------> USART3_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_10;
 800258c:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8002590:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002592:	2302      	movs	r3, #2
 8002594:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002596:	2303      	movs	r3, #3
 8002598:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80025a2:	2307      	movs	r3, #7
 80025a4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a6:	1d3b      	adds	r3, r7, #4
 80025a8:	4619      	mov	r1, r3
 80025aa:	4830      	ldr	r0, [pc, #192]	@ (800266c <MX_USART3_UART_Init+0x118>)
 80025ac:	f003 f83b 	bl	8005626 <LL_GPIO_Init>

  /* USART3 DMA Init */

  /* USART3_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_3, LL_DMA_CHANNEL_4);
 80025b0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80025b4:	2103      	movs	r1, #3
 80025b6:	482e      	ldr	r0, [pc, #184]	@ (8002670 <MX_USART3_UART_Init+0x11c>)
 80025b8:	f7ff fec8 	bl	800234c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80025bc:	2240      	movs	r2, #64	@ 0x40
 80025be:	2103      	movs	r1, #3
 80025c0:	482b      	ldr	r0, [pc, #172]	@ (8002670 <MX_USART3_UART_Init+0x11c>)
 80025c2:	f7ff fdc7 	bl	8002154 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_3, LL_DMA_PRIORITY_LOW);
 80025c6:	2200      	movs	r2, #0
 80025c8:	2103      	movs	r1, #3
 80025ca:	4829      	ldr	r0, [pc, #164]	@ (8002670 <MX_USART3_UART_Init+0x11c>)
 80025cc:	f7ff fe9a 	bl	8002304 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_3, LL_DMA_MODE_CIRCULAR);
 80025d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025d4:	2103      	movs	r1, #3
 80025d6:	4826      	ldr	r0, [pc, #152]	@ (8002670 <MX_USART3_UART_Init+0x11c>)
 80025d8:	f7ff fde0 	bl	800219c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_3, LL_DMA_PERIPH_NOINCREMENT);
 80025dc:	2200      	movs	r2, #0
 80025de:	2103      	movs	r1, #3
 80025e0:	4823      	ldr	r0, [pc, #140]	@ (8002670 <MX_USART3_UART_Init+0x11c>)
 80025e2:	f7ff fdff 	bl	80021e4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_3, LL_DMA_MEMORY_INCREMENT);
 80025e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025ea:	2103      	movs	r1, #3
 80025ec:	4820      	ldr	r0, [pc, #128]	@ (8002670 <MX_USART3_UART_Init+0x11c>)
 80025ee:	f7ff fe1d 	bl	800222c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_3, LL_DMA_PDATAALIGN_BYTE);
 80025f2:	2200      	movs	r2, #0
 80025f4:	2103      	movs	r1, #3
 80025f6:	481e      	ldr	r0, [pc, #120]	@ (8002670 <MX_USART3_UART_Init+0x11c>)
 80025f8:	f7ff fe3c 	bl	8002274 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_3, LL_DMA_MDATAALIGN_BYTE);
 80025fc:	2200      	movs	r2, #0
 80025fe:	2103      	movs	r1, #3
 8002600:	481b      	ldr	r0, [pc, #108]	@ (8002670 <MX_USART3_UART_Init+0x11c>)
 8002602:	f7ff fe5b 	bl	80022bc <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_3);
 8002606:	2103      	movs	r1, #3
 8002608:	4819      	ldr	r0, [pc, #100]	@ (8002670 <MX_USART3_UART_Init+0x11c>)
 800260a:	f7ff fec3 	bl	8002394 <LL_DMA_DisableFifoMode>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800260e:	f7ff fca9 	bl	8001f64 <__NVIC_GetPriorityGrouping>
 8002612:	4603      	mov	r3, r0
 8002614:	2200      	movs	r2, #0
 8002616:	2100      	movs	r1, #0
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fcf9 	bl	8002010 <NVIC_EncodePriority>
 800261e:	4603      	mov	r3, r0
 8002620:	4619      	mov	r1, r3
 8002622:	2027      	movs	r0, #39	@ 0x27
 8002624:	f7ff fcca 	bl	8001fbc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8002628:	2027      	movs	r0, #39	@ 0x27
 800262a:	f7ff fca9 	bl	8001f80 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 1000000;
 800262e:	4b11      	ldr	r3, [pc, #68]	@ (8002674 <MX_USART3_UART_Init+0x120>)
 8002630:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002632:	2300      	movs	r3, #0
 8002634:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002636:	2300      	movs	r3, #0
 8002638:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800263a:	2300      	movs	r3, #0
 800263c:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800263e:	230c      	movs	r3, #12
 8002640:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002642:	2300      	movs	r3, #0
 8002644:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002646:	2300      	movs	r3, #0
 8002648:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 800264a:	f107 031c 	add.w	r3, r7, #28
 800264e:	4619      	mov	r1, r3
 8002650:	4809      	ldr	r0, [pc, #36]	@ (8002678 <MX_USART3_UART_Init+0x124>)
 8002652:	f003 fc45 	bl	8005ee0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8002656:	4808      	ldr	r0, [pc, #32]	@ (8002678 <MX_USART3_UART_Init+0x124>)
 8002658:	f7ff fd1d 	bl	8002096 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 800265c:	4806      	ldr	r0, [pc, #24]	@ (8002678 <MX_USART3_UART_Init+0x124>)
 800265e:	f7ff fd0a 	bl	8002076 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002662:	bf00      	nop
 8002664:	3738      	adds	r7, #56	@ 0x38
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40020800 	.word	0x40020800
 8002670:	40026000 	.word	0x40026000
 8002674:	000f4240 	.word	0x000f4240
 8002678:	40004800 	.word	0x40004800

0800267c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800267c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002680:	f7ff fbe6 	bl	8001e50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002684:	480c      	ldr	r0, [pc, #48]	@ (80026b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002686:	490d      	ldr	r1, [pc, #52]	@ (80026bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002688:	4a0d      	ldr	r2, [pc, #52]	@ (80026c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800268a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800268c:	e002      	b.n	8002694 <LoopCopyDataInit>

0800268e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800268e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002692:	3304      	adds	r3, #4

08002694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002698:	d3f9      	bcc.n	800268e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800269a:	4a0a      	ldr	r2, [pc, #40]	@ (80026c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800269c:	4c0a      	ldr	r4, [pc, #40]	@ (80026c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800269e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026a0:	e001      	b.n	80026a6 <LoopFillZerobss>

080026a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026a4:	3204      	adds	r2, #4

080026a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026a8:	d3fb      	bcc.n	80026a2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80026aa:	f003 fca1 	bl	8005ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ae:	f7fe fe1f 	bl	80012f0 <main>
  bx  lr    
 80026b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80026c0:	080062b4 	.word	0x080062b4
  ldr r2, =_sbss
 80026c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80026c8:	20000294 	.word	0x20000294

080026cc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026cc:	e7fe      	b.n	80026cc <CAN1_RX0_IRQHandler>
	...

080026d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002710 <HAL_Init+0x40>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002710 <HAL_Init+0x40>)
 80026da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002710 <HAL_Init+0x40>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002710 <HAL_Init+0x40>)
 80026e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026ec:	4b08      	ldr	r3, [pc, #32]	@ (8002710 <HAL_Init+0x40>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a07      	ldr	r2, [pc, #28]	@ (8002710 <HAL_Init+0x40>)
 80026f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026f8:	2003      	movs	r0, #3
 80026fa:	f000 fe67 	bl	80033cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026fe:	200f      	movs	r0, #15
 8002700:	f000 f808 	bl	8002714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002704:	f7ff f9d6 	bl	8001ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40023c00 	.word	0x40023c00

08002714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800271c:	4b12      	ldr	r3, [pc, #72]	@ (8002768 <HAL_InitTick+0x54>)
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4b12      	ldr	r3, [pc, #72]	@ (800276c <HAL_InitTick+0x58>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	4619      	mov	r1, r3
 8002726:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800272a:	fbb3 f3f1 	udiv	r3, r3, r1
 800272e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002732:	4618      	mov	r0, r3
 8002734:	f000 fe7f 	bl	8003436 <HAL_SYSTICK_Config>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e00e      	b.n	8002760 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b0f      	cmp	r3, #15
 8002746:	d80a      	bhi.n	800275e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002748:	2200      	movs	r2, #0
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	f04f 30ff 	mov.w	r0, #4294967295
 8002750:	f000 fe47 	bl	80033e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002754:	4a06      	ldr	r2, [pc, #24]	@ (8002770 <HAL_InitTick+0x5c>)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800275a:	2300      	movs	r3, #0
 800275c:	e000      	b.n	8002760 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
}
 8002760:	4618      	mov	r0, r3
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20000000 	.word	0x20000000
 800276c:	20000008 	.word	0x20000008
 8002770:	20000004 	.word	0x20000004

08002774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002778:	4b06      	ldr	r3, [pc, #24]	@ (8002794 <HAL_IncTick+0x20>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <HAL_IncTick+0x24>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4413      	add	r3, r2
 8002784:	4a04      	ldr	r2, [pc, #16]	@ (8002798 <HAL_IncTick+0x24>)
 8002786:	6013      	str	r3, [r2, #0]
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	20000008 	.word	0x20000008
 8002798:	20000290 	.word	0x20000290

0800279c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return uwTick;
 80027a0:	4b03      	ldr	r3, [pc, #12]	@ (80027b0 <HAL_GetTick+0x14>)
 80027a2:	681b      	ldr	r3, [r3, #0]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	20000290 	.word	0x20000290

080027b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e033      	b.n	8002832 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d109      	bne.n	80027e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7fe fa34 	bl	8000c40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ea:	f003 0310 	and.w	r3, r3, #16
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d118      	bne.n	8002824 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80027fa:	f023 0302 	bic.w	r3, r3, #2
 80027fe:	f043 0202 	orr.w	r2, r3, #2
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 fb88 	bl	8002f1c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002816:	f023 0303 	bic.w	r3, r3, #3
 800281a:	f043 0201 	orr.w	r2, r3, #1
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	641a      	str	r2, [r3, #64]	@ 0x40
 8002822:	e001      	b.n	8002828 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002830:	7bfb      	ldrb	r3, [r7, #15]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b086      	sub	sp, #24
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	f003 0320 	and.w	r3, r3, #32
 8002868:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d049      	beq.n	8002904 <HAL_ADC_IRQHandler+0xca>
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d046      	beq.n	8002904 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	f003 0310 	and.w	r3, r3, #16
 800287e:	2b00      	cmp	r3, #0
 8002880:	d105      	bne.n	800288e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002886:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d12b      	bne.n	80028f4 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d127      	bne.n	80028f4 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028aa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d006      	beq.n	80028c0 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d119      	bne.n	80028f4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0220 	bic.w	r2, r2, #32
 80028ce:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d105      	bne.n	80028f4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ec:	f043 0201 	orr.w	r2, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7fe fdef 	bl	80014d8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f06f 0212 	mvn.w	r2, #18
 8002902:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002912:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d057      	beq.n	80029ca <HAL_ADC_IRQHandler+0x190>
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d054      	beq.n	80029ca <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	2b00      	cmp	r3, #0
 800292a:	d105      	bne.n	8002938 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002930:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d139      	bne.n	80029ba <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800294c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002950:	2b00      	cmp	r3, #0
 8002952:	d006      	beq.n	8002962 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800295e:	2b00      	cmp	r3, #0
 8002960:	d12b      	bne.n	80029ba <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800296c:	2b00      	cmp	r3, #0
 800296e:	d124      	bne.n	80029ba <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800297a:	2b00      	cmp	r3, #0
 800297c:	d11d      	bne.n	80029ba <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002982:	2b00      	cmp	r3, #0
 8002984:	d119      	bne.n	80029ba <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002994:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d105      	bne.n	80029ba <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	f043 0201 	orr.w	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 fc2c 	bl	8003218 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 020c 	mvn.w	r2, #12
 80029c8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029d8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d017      	beq.n	8002a10 <HAL_ADC_IRQHandler+0x1d6>
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d014      	beq.n	8002a10 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d10d      	bne.n	8002a10 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f945 	bl	8002c90 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f06f 0201 	mvn.w	r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f003 0320 	and.w	r3, r3, #32
 8002a16:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a1e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d015      	beq.n	8002a52 <HAL_ADC_IRQHandler+0x218>
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d012      	beq.n	8002a52 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a30:	f043 0202 	orr.w	r2, r3, #2
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f06f 0220 	mvn.w	r2, #32
 8002a40:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f92e 	bl	8002ca4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f06f 0220 	mvn.w	r2, #32
 8002a50:	601a      	str	r2, [r3, #0]
  }
}
 8002a52:	bf00      	nop
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d101      	bne.n	8002a7a <HAL_ADC_Start_DMA+0x1e>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e0e9      	b.n	8002c4e <HAL_ADC_Start_DMA+0x1f2>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d018      	beq.n	8002ac2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002aa0:	4b6d      	ldr	r3, [pc, #436]	@ (8002c58 <HAL_ADC_Start_DMA+0x1fc>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a6d      	ldr	r2, [pc, #436]	@ (8002c5c <HAL_ADC_Start_DMA+0x200>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	0c9a      	lsrs	r2, r3, #18
 8002aac:	4613      	mov	r3, r2
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	4413      	add	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002ab4:	e002      	b.n	8002abc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f9      	bne.n	8002ab6 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002acc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ad0:	d107      	bne.n	8002ae2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ae0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	f040 80a1 	bne.w	8002c34 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002afa:	f023 0301 	bic.w	r3, r3, #1
 8002afe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d007      	beq.n	8002b24 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b18:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b1c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b30:	d106      	bne.n	8002b40 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b36:	f023 0206 	bic.w	r2, r3, #6
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b3e:	e002      	b.n	8002b46 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b4e:	4b44      	ldr	r3, [pc, #272]	@ (8002c60 <HAL_ADC_Start_DMA+0x204>)
 8002b50:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b56:	4a43      	ldr	r2, [pc, #268]	@ (8002c64 <HAL_ADC_Start_DMA+0x208>)
 8002b58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b5e:	4a42      	ldr	r2, [pc, #264]	@ (8002c68 <HAL_ADC_Start_DMA+0x20c>)
 8002b60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b66:	4a41      	ldr	r2, [pc, #260]	@ (8002c6c <HAL_ADC_Start_DMA+0x210>)
 8002b68:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002b72:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002b82:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b92:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	334c      	adds	r3, #76	@ 0x4c
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f000 fd02 	bl	80035ac <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 031f 	and.w	r3, r3, #31
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d12a      	bne.n	8002c0a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a2d      	ldr	r2, [pc, #180]	@ (8002c70 <HAL_ADC_Start_DMA+0x214>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d015      	beq.n	8002bea <HAL_ADC_Start_DMA+0x18e>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a2c      	ldr	r2, [pc, #176]	@ (8002c74 <HAL_ADC_Start_DMA+0x218>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d105      	bne.n	8002bd4 <HAL_ADC_Start_DMA+0x178>
 8002bc8:	4b25      	ldr	r3, [pc, #148]	@ (8002c60 <HAL_ADC_Start_DMA+0x204>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 031f 	and.w	r3, r3, #31
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00a      	beq.n	8002bea <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a27      	ldr	r2, [pc, #156]	@ (8002c78 <HAL_ADC_Start_DMA+0x21c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d136      	bne.n	8002c4c <HAL_ADC_Start_DMA+0x1f0>
 8002bde:	4b20      	ldr	r3, [pc, #128]	@ (8002c60 <HAL_ADC_Start_DMA+0x204>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 0310 	and.w	r3, r3, #16
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d130      	bne.n	8002c4c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d129      	bne.n	8002c4c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	e020      	b.n	8002c4c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a18      	ldr	r2, [pc, #96]	@ (8002c70 <HAL_ADC_Start_DMA+0x214>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d11b      	bne.n	8002c4c <HAL_ADC_Start_DMA+0x1f0>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d114      	bne.n	8002c4c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c30:	609a      	str	r2, [r3, #8]
 8002c32:	e00b      	b.n	8002c4c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c38:	f043 0210 	orr.w	r2, r3, #16
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c44:	f043 0201 	orr.w	r2, r3, #1
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20000000 	.word	0x20000000
 8002c5c:	431bde83 	.word	0x431bde83
 8002c60:	40012300 	.word	0x40012300
 8002c64:	08003115 	.word	0x08003115
 8002c68:	080031cf 	.word	0x080031cf
 8002c6c:	080031eb 	.word	0x080031eb
 8002c70:	40012000 	.word	0x40012000
 8002c74:	40012100 	.word	0x40012100
 8002c78:	40012200 	.word	0x40012200

08002c7c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x1c>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e113      	b.n	8002efc <HAL_ADC_ConfigChannel+0x244>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b09      	cmp	r3, #9
 8002ce2:	d925      	bls.n	8002d30 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68d9      	ldr	r1, [r3, #12]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3b1e      	subs	r3, #30
 8002cfa:	2207      	movs	r2, #7
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43da      	mvns	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	400a      	ands	r2, r1
 8002d08:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68d9      	ldr	r1, [r3, #12]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	4403      	add	r3, r0
 8002d22:	3b1e      	subs	r3, #30
 8002d24:	409a      	lsls	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	60da      	str	r2, [r3, #12]
 8002d2e:	e022      	b.n	8002d76 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6919      	ldr	r1, [r3, #16]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4613      	mov	r3, r2
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	4413      	add	r3, r2
 8002d44:	2207      	movs	r2, #7
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43da      	mvns	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	400a      	ands	r2, r1
 8002d52:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6919      	ldr	r1, [r3, #16]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	4618      	mov	r0, r3
 8002d66:	4603      	mov	r3, r0
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	4403      	add	r3, r0
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b06      	cmp	r3, #6
 8002d7c:	d824      	bhi.n	8002dc8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3b05      	subs	r3, #5
 8002d90:	221f      	movs	r2, #31
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43da      	mvns	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	400a      	ands	r2, r1
 8002d9e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	4618      	mov	r0, r3
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	3b05      	subs	r3, #5
 8002dba:	fa00 f203 	lsl.w	r2, r0, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002dc6:	e04c      	b.n	8002e62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b0c      	cmp	r3, #12
 8002dce:	d824      	bhi.n	8002e1a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	3b23      	subs	r3, #35	@ 0x23
 8002de2:	221f      	movs	r2, #31
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43da      	mvns	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	400a      	ands	r2, r1
 8002df0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	4618      	mov	r0, r3
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	3b23      	subs	r3, #35	@ 0x23
 8002e0c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e18:	e023      	b.n	8002e62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	3b41      	subs	r3, #65	@ 0x41
 8002e2c:	221f      	movs	r2, #31
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43da      	mvns	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	400a      	ands	r2, r1
 8002e3a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	4618      	mov	r0, r3
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	3b41      	subs	r3, #65	@ 0x41
 8002e56:	fa00 f203 	lsl.w	r2, r0, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e62:	4b29      	ldr	r3, [pc, #164]	@ (8002f08 <HAL_ADC_ConfigChannel+0x250>)
 8002e64:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a28      	ldr	r2, [pc, #160]	@ (8002f0c <HAL_ADC_ConfigChannel+0x254>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d10f      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x1d8>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b12      	cmp	r3, #18
 8002e76:	d10b      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a1d      	ldr	r2, [pc, #116]	@ (8002f0c <HAL_ADC_ConfigChannel+0x254>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d12b      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x23a>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a1c      	ldr	r2, [pc, #112]	@ (8002f10 <HAL_ADC_ConfigChannel+0x258>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d003      	beq.n	8002eac <HAL_ADC_ConfigChannel+0x1f4>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b11      	cmp	r3, #17
 8002eaa:	d122      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a11      	ldr	r2, [pc, #68]	@ (8002f10 <HAL_ADC_ConfigChannel+0x258>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d111      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ece:	4b11      	ldr	r3, [pc, #68]	@ (8002f14 <HAL_ADC_ConfigChannel+0x25c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a11      	ldr	r2, [pc, #68]	@ (8002f18 <HAL_ADC_ConfigChannel+0x260>)
 8002ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed8:	0c9a      	lsrs	r2, r3, #18
 8002eda:	4613      	mov	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002ee4:	e002      	b.n	8002eec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f9      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	40012300 	.word	0x40012300
 8002f0c:	40012000 	.word	0x40012000
 8002f10:	10000012 	.word	0x10000012
 8002f14:	20000000 	.word	0x20000000
 8002f18:	431bde83 	.word	0x431bde83

08002f1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f24:	4b79      	ldr	r3, [pc, #484]	@ (800310c <ADC_Init+0x1f0>)
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6859      	ldr	r1, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	021a      	lsls	r2, r3, #8
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002f74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6859      	ldr	r1, [r3, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6899      	ldr	r1, [r3, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fae:	4a58      	ldr	r2, [pc, #352]	@ (8003110 <ADC_Init+0x1f4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d022      	beq.n	8002ffa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fc2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6899      	ldr	r1, [r3, #8]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002fe4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6899      	ldr	r1, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	609a      	str	r2, [r3, #8]
 8002ff8:	e00f      	b.n	800301a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003008:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003018:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0202 	bic.w	r2, r2, #2
 8003028:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6899      	ldr	r1, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	7e1b      	ldrb	r3, [r3, #24]
 8003034:	005a      	lsls	r2, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d01b      	beq.n	8003080 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003056:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003066:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6859      	ldr	r1, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003072:	3b01      	subs	r3, #1
 8003074:	035a      	lsls	r2, r3, #13
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	e007      	b.n	8003090 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800308e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800309e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	051a      	lsls	r2, r3, #20
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80030c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6899      	ldr	r1, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80030d2:	025a      	lsls	r2, r3, #9
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6899      	ldr	r1, [r3, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	029a      	lsls	r2, r3, #10
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	609a      	str	r2, [r3, #8]
}
 8003100:	bf00      	nop
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	40012300 	.word	0x40012300
 8003110:	0f000001 	.word	0x0f000001

08003114 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003120:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800312a:	2b00      	cmp	r3, #0
 800312c:	d13c      	bne.n	80031a8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003132:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d12b      	bne.n	80031a0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800314c:	2b00      	cmp	r3, #0
 800314e:	d127      	bne.n	80031a0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003156:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800315a:	2b00      	cmp	r3, #0
 800315c:	d006      	beq.n	800316c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003168:	2b00      	cmp	r3, #0
 800316a:	d119      	bne.n	80031a0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0220 	bic.w	r2, r2, #32
 800317a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003180:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d105      	bne.n	80031a0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003198:	f043 0201 	orr.w	r2, r3, #1
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f7fe f999 	bl	80014d8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031a6:	e00e      	b.n	80031c6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ac:	f003 0310 	and.w	r3, r3, #16
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f7ff fd75 	bl	8002ca4 <HAL_ADC_ErrorCallback>
}
 80031ba:	e004      	b.n	80031c6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	4798      	blx	r3
}
 80031c6:	bf00      	nop
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b084      	sub	sp, #16
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031da:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f7ff fd4d 	bl	8002c7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031e2:	bf00      	nop
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b084      	sub	sp, #16
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2240      	movs	r2, #64	@ 0x40
 80031fc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003202:	f043 0204 	orr.w	r2, r3, #4
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f7ff fd4a 	bl	8002ca4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003210:	bf00      	nop
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <__NVIC_SetPriorityGrouping>:
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800323c:	4b0c      	ldr	r3, [pc, #48]	@ (8003270 <__NVIC_SetPriorityGrouping+0x44>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003248:	4013      	ands	r3, r2
 800324a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003254:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003258:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800325c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800325e:	4a04      	ldr	r2, [pc, #16]	@ (8003270 <__NVIC_SetPriorityGrouping+0x44>)
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	60d3      	str	r3, [r2, #12]
}
 8003264:	bf00      	nop
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <__NVIC_GetPriorityGrouping>:
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003278:	4b04      	ldr	r3, [pc, #16]	@ (800328c <__NVIC_GetPriorityGrouping+0x18>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	0a1b      	lsrs	r3, r3, #8
 800327e:	f003 0307 	and.w	r3, r3, #7
}
 8003282:	4618      	mov	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	e000ed00 	.word	0xe000ed00

08003290 <__NVIC_EnableIRQ>:
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800329a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	db0b      	blt.n	80032ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032a2:	79fb      	ldrb	r3, [r7, #7]
 80032a4:	f003 021f 	and.w	r2, r3, #31
 80032a8:	4907      	ldr	r1, [pc, #28]	@ (80032c8 <__NVIC_EnableIRQ+0x38>)
 80032aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	2001      	movs	r0, #1
 80032b2:	fa00 f202 	lsl.w	r2, r0, r2
 80032b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	e000e100 	.word	0xe000e100

080032cc <__NVIC_SetPriority>:
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	6039      	str	r1, [r7, #0]
 80032d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	db0a      	blt.n	80032f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	490c      	ldr	r1, [pc, #48]	@ (8003318 <__NVIC_SetPriority+0x4c>)
 80032e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ea:	0112      	lsls	r2, r2, #4
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	440b      	add	r3, r1
 80032f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80032f4:	e00a      	b.n	800330c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	4908      	ldr	r1, [pc, #32]	@ (800331c <__NVIC_SetPriority+0x50>)
 80032fc:	79fb      	ldrb	r3, [r7, #7]
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	3b04      	subs	r3, #4
 8003304:	0112      	lsls	r2, r2, #4
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	440b      	add	r3, r1
 800330a:	761a      	strb	r2, [r3, #24]
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	e000e100 	.word	0xe000e100
 800331c:	e000ed00 	.word	0xe000ed00

08003320 <NVIC_EncodePriority>:
{
 8003320:	b480      	push	{r7}
 8003322:	b089      	sub	sp, #36	@ 0x24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f1c3 0307 	rsb	r3, r3, #7
 800333a:	2b04      	cmp	r3, #4
 800333c:	bf28      	it	cs
 800333e:	2304      	movcs	r3, #4
 8003340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3304      	adds	r3, #4
 8003346:	2b06      	cmp	r3, #6
 8003348:	d902      	bls.n	8003350 <NVIC_EncodePriority+0x30>
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	3b03      	subs	r3, #3
 800334e:	e000      	b.n	8003352 <NVIC_EncodePriority+0x32>
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003354:	f04f 32ff 	mov.w	r2, #4294967295
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43da      	mvns	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	401a      	ands	r2, r3
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003368:	f04f 31ff 	mov.w	r1, #4294967295
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	fa01 f303 	lsl.w	r3, r1, r3
 8003372:	43d9      	mvns	r1, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003378:	4313      	orrs	r3, r2
}
 800337a:	4618      	mov	r0, r3
 800337c:	3724      	adds	r7, #36	@ 0x24
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
	...

08003388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3b01      	subs	r3, #1
 8003394:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003398:	d301      	bcc.n	800339e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800339a:	2301      	movs	r3, #1
 800339c:	e00f      	b.n	80033be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800339e:	4a0a      	ldr	r2, [pc, #40]	@ (80033c8 <SysTick_Config+0x40>)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033a6:	210f      	movs	r1, #15
 80033a8:	f04f 30ff 	mov.w	r0, #4294967295
 80033ac:	f7ff ff8e 	bl	80032cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033b0:	4b05      	ldr	r3, [pc, #20]	@ (80033c8 <SysTick_Config+0x40>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033b6:	4b04      	ldr	r3, [pc, #16]	@ (80033c8 <SysTick_Config+0x40>)
 80033b8:	2207      	movs	r2, #7
 80033ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	e000e010 	.word	0xe000e010

080033cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff ff29 	bl	800322c <__NVIC_SetPriorityGrouping>
}
 80033da:	bf00      	nop
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b086      	sub	sp, #24
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	4603      	mov	r3, r0
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	607a      	str	r2, [r7, #4]
 80033ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033f4:	f7ff ff3e 	bl	8003274 <__NVIC_GetPriorityGrouping>
 80033f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	68b9      	ldr	r1, [r7, #8]
 80033fe:	6978      	ldr	r0, [r7, #20]
 8003400:	f7ff ff8e 	bl	8003320 <NVIC_EncodePriority>
 8003404:	4602      	mov	r2, r0
 8003406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800340a:	4611      	mov	r1, r2
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff ff5d 	bl	80032cc <__NVIC_SetPriority>
}
 8003412:	bf00      	nop
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	4603      	mov	r3, r0
 8003422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff ff31 	bl	8003290 <__NVIC_EnableIRQ>
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b082      	sub	sp, #8
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7ff ffa2 	bl	8003388 <SysTick_Config>
 8003444:	4603      	mov	r3, r0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
	...

08003450 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800345c:	f7ff f99e 	bl	800279c <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e099      	b.n	80035a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0201 	bic.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800348c:	e00f      	b.n	80034ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800348e:	f7ff f985 	bl	800279c <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b05      	cmp	r3, #5
 800349a:	d908      	bls.n	80034ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2220      	movs	r2, #32
 80034a0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2203      	movs	r2, #3
 80034a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e078      	b.n	80035a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1e8      	bne.n	800348e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	4b38      	ldr	r3, [pc, #224]	@ (80035a8 <HAL_DMA_Init+0x158>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003504:	2b04      	cmp	r3, #4
 8003506:	d107      	bne.n	8003518 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003510:	4313      	orrs	r3, r2
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	4313      	orrs	r3, r2
 8003516:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f023 0307 	bic.w	r3, r3, #7
 800352e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	4313      	orrs	r3, r2
 8003538:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353e:	2b04      	cmp	r3, #4
 8003540:	d117      	bne.n	8003572 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	4313      	orrs	r3, r2
 800354a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00e      	beq.n	8003572 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 fa6f 	bl	8003a38 <DMA_CheckFifoParam>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d008      	beq.n	8003572 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2240      	movs	r2, #64	@ 0x40
 8003564:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800356e:	2301      	movs	r3, #1
 8003570:	e016      	b.n	80035a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fa26 	bl	80039cc <DMA_CalcBaseAndBitshift>
 8003580:	4603      	mov	r3, r0
 8003582:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003588:	223f      	movs	r2, #63	@ 0x3f
 800358a:	409a      	lsls	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	f010803f 	.word	0xf010803f

080035ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
 80035b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ba:	2300      	movs	r3, #0
 80035bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_DMA_Start_IT+0x26>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e040      	b.n	8003654 <HAL_DMA_Start_IT+0xa8>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d12f      	bne.n	8003646 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2202      	movs	r2, #2
 80035ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 f9b8 	bl	8003970 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003604:	223f      	movs	r2, #63	@ 0x3f
 8003606:	409a      	lsls	r2, r3
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0216 	orr.w	r2, r2, #22
 800361a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003620:	2b00      	cmp	r3, #0
 8003622:	d007      	beq.n	8003634 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0208 	orr.w	r2, r2, #8
 8003632:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0201 	orr.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	e005      	b.n	8003652 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800364e:	2302      	movs	r3, #2
 8003650:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003652:	7dfb      	ldrb	r3, [r7, #23]
}
 8003654:	4618      	mov	r0, r3
 8003656:	3718      	adds	r7, #24
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003668:	4b8e      	ldr	r3, [pc, #568]	@ (80038a4 <HAL_DMA_IRQHandler+0x248>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a8e      	ldr	r2, [pc, #568]	@ (80038a8 <HAL_DMA_IRQHandler+0x24c>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	0a9b      	lsrs	r3, r3, #10
 8003674:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003686:	2208      	movs	r2, #8
 8003688:	409a      	lsls	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4013      	ands	r3, r2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d01a      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d013      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0204 	bic.w	r2, r2, #4
 80036ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b4:	2208      	movs	r2, #8
 80036b6:	409a      	lsls	r2, r3
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c0:	f043 0201 	orr.w	r2, r3, #1
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036cc:	2201      	movs	r2, #1
 80036ce:	409a      	lsls	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d012      	beq.n	80036fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00b      	beq.n	80036fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ea:	2201      	movs	r2, #1
 80036ec:	409a      	lsls	r2, r3
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f6:	f043 0202 	orr.w	r2, r3, #2
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003702:	2204      	movs	r2, #4
 8003704:	409a      	lsls	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4013      	ands	r3, r2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d012      	beq.n	8003734 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00b      	beq.n	8003734 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003720:	2204      	movs	r2, #4
 8003722:	409a      	lsls	r2, r3
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800372c:	f043 0204 	orr.w	r2, r3, #4
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003738:	2210      	movs	r2, #16
 800373a:	409a      	lsls	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4013      	ands	r3, r2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d043      	beq.n	80037cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	d03c      	beq.n	80037cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003756:	2210      	movs	r2, #16
 8003758:	409a      	lsls	r2, r3
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d018      	beq.n	800379e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d108      	bne.n	800378c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377e:	2b00      	cmp	r3, #0
 8003780:	d024      	beq.n	80037cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	4798      	blx	r3
 800378a:	e01f      	b.n	80037cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003790:	2b00      	cmp	r3, #0
 8003792:	d01b      	beq.n	80037cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	4798      	blx	r3
 800379c:	e016      	b.n	80037cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d107      	bne.n	80037bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0208 	bic.w	r2, r2, #8
 80037ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d0:	2220      	movs	r2, #32
 80037d2:	409a      	lsls	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4013      	ands	r3, r2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 808f 	beq.w	80038fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0310 	and.w	r3, r3, #16
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 8087 	beq.w	80038fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f2:	2220      	movs	r2, #32
 80037f4:	409a      	lsls	r2, r3
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b05      	cmp	r3, #5
 8003804:	d136      	bne.n	8003874 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0216 	bic.w	r2, r2, #22
 8003814:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695a      	ldr	r2, [r3, #20]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003824:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382a:	2b00      	cmp	r3, #0
 800382c:	d103      	bne.n	8003836 <HAL_DMA_IRQHandler+0x1da>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003832:	2b00      	cmp	r3, #0
 8003834:	d007      	beq.n	8003846 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0208 	bic.w	r2, r2, #8
 8003844:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800384a:	223f      	movs	r2, #63	@ 0x3f
 800384c:	409a      	lsls	r2, r3
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003866:	2b00      	cmp	r3, #0
 8003868:	d07e      	beq.n	8003968 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	4798      	blx	r3
        }
        return;
 8003872:	e079      	b.n	8003968 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d01d      	beq.n	80038be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10d      	bne.n	80038ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003894:	2b00      	cmp	r3, #0
 8003896:	d031      	beq.n	80038fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	4798      	blx	r3
 80038a0:	e02c      	b.n	80038fc <HAL_DMA_IRQHandler+0x2a0>
 80038a2:	bf00      	nop
 80038a4:	20000000 	.word	0x20000000
 80038a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d023      	beq.n	80038fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	4798      	blx	r3
 80038bc:	e01e      	b.n	80038fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10f      	bne.n	80038ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0210 	bic.w	r2, r2, #16
 80038da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003900:	2b00      	cmp	r3, #0
 8003902:	d032      	beq.n	800396a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b00      	cmp	r3, #0
 800390e:	d022      	beq.n	8003956 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2205      	movs	r2, #5
 8003914:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0201 	bic.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	3301      	adds	r3, #1
 800392c:	60bb      	str	r3, [r7, #8]
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	429a      	cmp	r2, r3
 8003932:	d307      	bcc.n	8003944 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f2      	bne.n	8003928 <HAL_DMA_IRQHandler+0x2cc>
 8003942:	e000      	b.n	8003946 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003944:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800395a:	2b00      	cmp	r3, #0
 800395c:	d005      	beq.n	800396a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	4798      	blx	r3
 8003966:	e000      	b.n	800396a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003968:	bf00      	nop
    }
  }
}
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800398c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2b40      	cmp	r3, #64	@ 0x40
 800399c:	d108      	bne.n	80039b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039ae:	e007      	b.n	80039c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	60da      	str	r2, [r3, #12]
}
 80039c0:	bf00      	nop
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	3b10      	subs	r3, #16
 80039dc:	4a14      	ldr	r2, [pc, #80]	@ (8003a30 <DMA_CalcBaseAndBitshift+0x64>)
 80039de:	fba2 2303 	umull	r2, r3, r2, r3
 80039e2:	091b      	lsrs	r3, r3, #4
 80039e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039e6:	4a13      	ldr	r2, [pc, #76]	@ (8003a34 <DMA_CalcBaseAndBitshift+0x68>)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4413      	add	r3, r2
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2b03      	cmp	r3, #3
 80039f8:	d909      	bls.n	8003a0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003a02:	f023 0303 	bic.w	r3, r3, #3
 8003a06:	1d1a      	adds	r2, r3, #4
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a0c:	e007      	b.n	8003a1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003a16:	f023 0303 	bic.w	r3, r3, #3
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	aaaaaaab 	.word	0xaaaaaaab
 8003a34:	0800629c 	.word	0x0800629c

08003a38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a40:	2300      	movs	r3, #0
 8003a42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d11f      	bne.n	8003a92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b03      	cmp	r3, #3
 8003a56:	d856      	bhi.n	8003b06 <DMA_CheckFifoParam+0xce>
 8003a58:	a201      	add	r2, pc, #4	@ (adr r2, 8003a60 <DMA_CheckFifoParam+0x28>)
 8003a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5e:	bf00      	nop
 8003a60:	08003a71 	.word	0x08003a71
 8003a64:	08003a83 	.word	0x08003a83
 8003a68:	08003a71 	.word	0x08003a71
 8003a6c:	08003b07 	.word	0x08003b07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d046      	beq.n	8003b0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a80:	e043      	b.n	8003b0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a86:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a8a:	d140      	bne.n	8003b0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a90:	e03d      	b.n	8003b0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a9a:	d121      	bne.n	8003ae0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d837      	bhi.n	8003b12 <DMA_CheckFifoParam+0xda>
 8003aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8003aa8 <DMA_CheckFifoParam+0x70>)
 8003aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa8:	08003ab9 	.word	0x08003ab9
 8003aac:	08003abf 	.word	0x08003abf
 8003ab0:	08003ab9 	.word	0x08003ab9
 8003ab4:	08003ad1 	.word	0x08003ad1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	73fb      	strb	r3, [r7, #15]
      break;
 8003abc:	e030      	b.n	8003b20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d025      	beq.n	8003b16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ace:	e022      	b.n	8003b16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003ad8:	d11f      	bne.n	8003b1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ade:	e01c      	b.n	8003b1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d903      	bls.n	8003aee <DMA_CheckFifoParam+0xb6>
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b03      	cmp	r3, #3
 8003aea:	d003      	beq.n	8003af4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003aec:	e018      	b.n	8003b20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	73fb      	strb	r3, [r7, #15]
      break;
 8003af2:	e015      	b.n	8003b20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00e      	beq.n	8003b1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	73fb      	strb	r3, [r7, #15]
      break;
 8003b04:	e00b      	b.n	8003b1e <DMA_CheckFifoParam+0xe6>
      break;
 8003b06:	bf00      	nop
 8003b08:	e00a      	b.n	8003b20 <DMA_CheckFifoParam+0xe8>
      break;
 8003b0a:	bf00      	nop
 8003b0c:	e008      	b.n	8003b20 <DMA_CheckFifoParam+0xe8>
      break;
 8003b0e:	bf00      	nop
 8003b10:	e006      	b.n	8003b20 <DMA_CheckFifoParam+0xe8>
      break;
 8003b12:	bf00      	nop
 8003b14:	e004      	b.n	8003b20 <DMA_CheckFifoParam+0xe8>
      break;
 8003b16:	bf00      	nop
 8003b18:	e002      	b.n	8003b20 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b1a:	bf00      	nop
 8003b1c:	e000      	b.n	8003b20 <DMA_CheckFifoParam+0xe8>
      break;
 8003b1e:	bf00      	nop
    }
  } 
  
  return status; 
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop

08003b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b089      	sub	sp, #36	@ 0x24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b46:	2300      	movs	r3, #0
 8003b48:	61fb      	str	r3, [r7, #28]
 8003b4a:	e165      	b.n	8003e18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	f040 8154 	bne.w	8003e12 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d005      	beq.n	8003b82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d130      	bne.n	8003be4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	2203      	movs	r2, #3
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	43db      	mvns	r3, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4013      	ands	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bb8:	2201      	movs	r2, #1
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	091b      	lsrs	r3, r3, #4
 8003bce:	f003 0201 	and.w	r2, r3, #1
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 0303 	and.w	r3, r3, #3
 8003bec:	2b03      	cmp	r3, #3
 8003bee:	d017      	beq.n	8003c20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	2203      	movs	r2, #3
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	43db      	mvns	r3, r3
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	4013      	ands	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d123      	bne.n	8003c74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	08da      	lsrs	r2, r3, #3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3208      	adds	r2, #8
 8003c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	220f      	movs	r2, #15
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	691a      	ldr	r2, [r3, #16]
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	08da      	lsrs	r2, r3, #3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	3208      	adds	r2, #8
 8003c6e:	69b9      	ldr	r1, [r7, #24]
 8003c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	2203      	movs	r2, #3
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	43db      	mvns	r3, r3
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 0203 	and.w	r2, r3, #3
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 80ae 	beq.w	8003e12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	4b5d      	ldr	r3, [pc, #372]	@ (8003e30 <HAL_GPIO_Init+0x300>)
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cbe:	4a5c      	ldr	r2, [pc, #368]	@ (8003e30 <HAL_GPIO_Init+0x300>)
 8003cc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cc6:	4b5a      	ldr	r3, [pc, #360]	@ (8003e30 <HAL_GPIO_Init+0x300>)
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cd2:	4a58      	ldr	r2, [pc, #352]	@ (8003e34 <HAL_GPIO_Init+0x304>)
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	089b      	lsrs	r3, r3, #2
 8003cd8:	3302      	adds	r3, #2
 8003cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	220f      	movs	r2, #15
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a4f      	ldr	r2, [pc, #316]	@ (8003e38 <HAL_GPIO_Init+0x308>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d025      	beq.n	8003d4a <HAL_GPIO_Init+0x21a>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a4e      	ldr	r2, [pc, #312]	@ (8003e3c <HAL_GPIO_Init+0x30c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d01f      	beq.n	8003d46 <HAL_GPIO_Init+0x216>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a4d      	ldr	r2, [pc, #308]	@ (8003e40 <HAL_GPIO_Init+0x310>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d019      	beq.n	8003d42 <HAL_GPIO_Init+0x212>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a4c      	ldr	r2, [pc, #304]	@ (8003e44 <HAL_GPIO_Init+0x314>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d013      	beq.n	8003d3e <HAL_GPIO_Init+0x20e>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a4b      	ldr	r2, [pc, #300]	@ (8003e48 <HAL_GPIO_Init+0x318>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d00d      	beq.n	8003d3a <HAL_GPIO_Init+0x20a>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a4a      	ldr	r2, [pc, #296]	@ (8003e4c <HAL_GPIO_Init+0x31c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d007      	beq.n	8003d36 <HAL_GPIO_Init+0x206>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a49      	ldr	r2, [pc, #292]	@ (8003e50 <HAL_GPIO_Init+0x320>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d101      	bne.n	8003d32 <HAL_GPIO_Init+0x202>
 8003d2e:	2306      	movs	r3, #6
 8003d30:	e00c      	b.n	8003d4c <HAL_GPIO_Init+0x21c>
 8003d32:	2307      	movs	r3, #7
 8003d34:	e00a      	b.n	8003d4c <HAL_GPIO_Init+0x21c>
 8003d36:	2305      	movs	r3, #5
 8003d38:	e008      	b.n	8003d4c <HAL_GPIO_Init+0x21c>
 8003d3a:	2304      	movs	r3, #4
 8003d3c:	e006      	b.n	8003d4c <HAL_GPIO_Init+0x21c>
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e004      	b.n	8003d4c <HAL_GPIO_Init+0x21c>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e002      	b.n	8003d4c <HAL_GPIO_Init+0x21c>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <HAL_GPIO_Init+0x21c>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	69fa      	ldr	r2, [r7, #28]
 8003d4e:	f002 0203 	and.w	r2, r2, #3
 8003d52:	0092      	lsls	r2, r2, #2
 8003d54:	4093      	lsls	r3, r2
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d5c:	4935      	ldr	r1, [pc, #212]	@ (8003e34 <HAL_GPIO_Init+0x304>)
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	089b      	lsrs	r3, r3, #2
 8003d62:	3302      	adds	r3, #2
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d6a:	4b3a      	ldr	r3, [pc, #232]	@ (8003e54 <HAL_GPIO_Init+0x324>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	43db      	mvns	r3, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4013      	ands	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d8e:	4a31      	ldr	r2, [pc, #196]	@ (8003e54 <HAL_GPIO_Init+0x324>)
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d94:	4b2f      	ldr	r3, [pc, #188]	@ (8003e54 <HAL_GPIO_Init+0x324>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4013      	ands	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003db8:	4a26      	ldr	r2, [pc, #152]	@ (8003e54 <HAL_GPIO_Init+0x324>)
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003dbe:	4b25      	ldr	r3, [pc, #148]	@ (8003e54 <HAL_GPIO_Init+0x324>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003de2:	4a1c      	ldr	r2, [pc, #112]	@ (8003e54 <HAL_GPIO_Init+0x324>)
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003de8:	4b1a      	ldr	r3, [pc, #104]	@ (8003e54 <HAL_GPIO_Init+0x324>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	43db      	mvns	r3, r3
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4013      	ands	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e0c:	4a11      	ldr	r2, [pc, #68]	@ (8003e54 <HAL_GPIO_Init+0x324>)
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	3301      	adds	r3, #1
 8003e16:	61fb      	str	r3, [r7, #28]
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	2b0f      	cmp	r3, #15
 8003e1c:	f67f ae96 	bls.w	8003b4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e20:	bf00      	nop
 8003e22:	bf00      	nop
 8003e24:	3724      	adds	r7, #36	@ 0x24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	40023800 	.word	0x40023800
 8003e34:	40013800 	.word	0x40013800
 8003e38:	40020000 	.word	0x40020000
 8003e3c:	40020400 	.word	0x40020400
 8003e40:	40020800 	.word	0x40020800
 8003e44:	40020c00 	.word	0x40020c00
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	40021400 	.word	0x40021400
 8003e50:	40021800 	.word	0x40021800
 8003e54:	40013c00 	.word	0x40013c00

08003e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	460b      	mov	r3, r1
 8003e62:	807b      	strh	r3, [r7, #2]
 8003e64:	4613      	mov	r3, r2
 8003e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e68:	787b      	ldrb	r3, [r7, #1]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e6e:	887a      	ldrh	r2, [r7, #2]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e74:	e003      	b.n	8003e7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e76:	887b      	ldrh	r3, [r7, #2]
 8003e78:	041a      	lsls	r2, r3, #16
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	619a      	str	r2, [r3, #24]
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
	...

08003e8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e96:	2300      	movs	r3, #0
 8003e98:	603b      	str	r3, [r7, #0]
 8003e9a:	4b20      	ldr	r3, [pc, #128]	@ (8003f1c <HAL_PWREx_EnableOverDrive+0x90>)
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9e:	4a1f      	ldr	r2, [pc, #124]	@ (8003f1c <HAL_PWREx_EnableOverDrive+0x90>)
 8003ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ea4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8003f1c <HAL_PWREx_EnableOverDrive+0x90>)
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eae:	603b      	str	r3, [r7, #0]
 8003eb0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8003f20 <HAL_PWREx_EnableOverDrive+0x94>)
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003eb8:	f7fe fc70 	bl	800279c <HAL_GetTick>
 8003ebc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ebe:	e009      	b.n	8003ed4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ec0:	f7fe fc6c 	bl	800279c <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ece:	d901      	bls.n	8003ed4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e01f      	b.n	8003f14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ed4:	4b13      	ldr	r3, [pc, #76]	@ (8003f24 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003edc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ee0:	d1ee      	bne.n	8003ec0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003ee2:	4b11      	ldr	r3, [pc, #68]	@ (8003f28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ee8:	f7fe fc58 	bl	800279c <HAL_GetTick>
 8003eec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003eee:	e009      	b.n	8003f04 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ef0:	f7fe fc54 	bl	800279c <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003efe:	d901      	bls.n	8003f04 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e007      	b.n	8003f14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f04:	4b07      	ldr	r3, [pc, #28]	@ (8003f24 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f10:	d1ee      	bne.n	8003ef0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	420e0040 	.word	0x420e0040
 8003f24:	40007000 	.word	0x40007000
 8003f28:	420e0044 	.word	0x420e0044

08003f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0cc      	b.n	80040da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f40:	4b68      	ldr	r3, [pc, #416]	@ (80040e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 030f 	and.w	r3, r3, #15
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d90c      	bls.n	8003f68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f4e:	4b65      	ldr	r3, [pc, #404]	@ (80040e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f56:	4b63      	ldr	r3, [pc, #396]	@ (80040e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d001      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0b8      	b.n	80040da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d020      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d005      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f80:	4b59      	ldr	r3, [pc, #356]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	4a58      	ldr	r2, [pc, #352]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d005      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f98:	4b53      	ldr	r3, [pc, #332]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	4a52      	ldr	r2, [pc, #328]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003fa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fa4:	4b50      	ldr	r3, [pc, #320]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	494d      	ldr	r1, [pc, #308]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d044      	beq.n	800404c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d107      	bne.n	8003fda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fca:	4b47      	ldr	r3, [pc, #284]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d119      	bne.n	800400a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e07f      	b.n	80040da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d003      	beq.n	8003fea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d107      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fea:	4b3f      	ldr	r3, [pc, #252]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d109      	bne.n	800400a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e06f      	b.n	80040da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ffa:	4b3b      	ldr	r3, [pc, #236]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e067      	b.n	80040da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800400a:	4b37      	ldr	r3, [pc, #220]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f023 0203 	bic.w	r2, r3, #3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	4934      	ldr	r1, [pc, #208]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004018:	4313      	orrs	r3, r2
 800401a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800401c:	f7fe fbbe 	bl	800279c <HAL_GetTick>
 8004020:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004022:	e00a      	b.n	800403a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004024:	f7fe fbba 	bl	800279c <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004032:	4293      	cmp	r3, r2
 8004034:	d901      	bls.n	800403a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e04f      	b.n	80040da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403a:	4b2b      	ldr	r3, [pc, #172]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 020c 	and.w	r2, r3, #12
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	429a      	cmp	r2, r3
 800404a:	d1eb      	bne.n	8004024 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800404c:	4b25      	ldr	r3, [pc, #148]	@ (80040e4 <HAL_RCC_ClockConfig+0x1b8>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 030f 	and.w	r3, r3, #15
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	429a      	cmp	r2, r3
 8004058:	d20c      	bcs.n	8004074 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800405a:	4b22      	ldr	r3, [pc, #136]	@ (80040e4 <HAL_RCC_ClockConfig+0x1b8>)
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	b2d2      	uxtb	r2, r2
 8004060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004062:	4b20      	ldr	r3, [pc, #128]	@ (80040e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	429a      	cmp	r2, r3
 800406e:	d001      	beq.n	8004074 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e032      	b.n	80040da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b00      	cmp	r3, #0
 800407e:	d008      	beq.n	8004092 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004080:	4b19      	ldr	r3, [pc, #100]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	4916      	ldr	r1, [pc, #88]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	4313      	orrs	r3, r2
 8004090:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b00      	cmp	r3, #0
 800409c:	d009      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800409e:	4b12      	ldr	r3, [pc, #72]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	490e      	ldr	r1, [pc, #56]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040b2:	f000 f821 	bl	80040f8 <HAL_RCC_GetSysClockFreq>
 80040b6:	4602      	mov	r2, r0
 80040b8:	4b0b      	ldr	r3, [pc, #44]	@ (80040e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	091b      	lsrs	r3, r3, #4
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	490a      	ldr	r1, [pc, #40]	@ (80040ec <HAL_RCC_ClockConfig+0x1c0>)
 80040c4:	5ccb      	ldrb	r3, [r1, r3]
 80040c6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ca:	4a09      	ldr	r2, [pc, #36]	@ (80040f0 <HAL_RCC_ClockConfig+0x1c4>)
 80040cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80040ce:	4b09      	ldr	r3, [pc, #36]	@ (80040f4 <HAL_RCC_ClockConfig+0x1c8>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fe fb1e 	bl	8002714 <HAL_InitTick>

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40023c00 	.word	0x40023c00
 80040e8:	40023800 	.word	0x40023800
 80040ec:	0800627c 	.word	0x0800627c
 80040f0:	20000000 	.word	0x20000000
 80040f4:	20000004 	.word	0x20000004

080040f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040fc:	b0ae      	sub	sp, #184	@ 0xb8
 80040fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800411e:	4bcb      	ldr	r3, [pc, #812]	@ (800444c <HAL_RCC_GetSysClockFreq+0x354>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 030c 	and.w	r3, r3, #12
 8004126:	2b0c      	cmp	r3, #12
 8004128:	f200 8204 	bhi.w	8004534 <HAL_RCC_GetSysClockFreq+0x43c>
 800412c:	a201      	add	r2, pc, #4	@ (adr r2, 8004134 <HAL_RCC_GetSysClockFreq+0x3c>)
 800412e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004132:	bf00      	nop
 8004134:	08004169 	.word	0x08004169
 8004138:	08004535 	.word	0x08004535
 800413c:	08004535 	.word	0x08004535
 8004140:	08004535 	.word	0x08004535
 8004144:	08004171 	.word	0x08004171
 8004148:	08004535 	.word	0x08004535
 800414c:	08004535 	.word	0x08004535
 8004150:	08004535 	.word	0x08004535
 8004154:	08004179 	.word	0x08004179
 8004158:	08004535 	.word	0x08004535
 800415c:	08004535 	.word	0x08004535
 8004160:	08004535 	.word	0x08004535
 8004164:	08004369 	.word	0x08004369
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004168:	4bb9      	ldr	r3, [pc, #740]	@ (8004450 <HAL_RCC_GetSysClockFreq+0x358>)
 800416a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800416e:	e1e5      	b.n	800453c <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004170:	4bb7      	ldr	r3, [pc, #732]	@ (8004450 <HAL_RCC_GetSysClockFreq+0x358>)
 8004172:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004176:	e1e1      	b.n	800453c <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004178:	4bb4      	ldr	r3, [pc, #720]	@ (800444c <HAL_RCC_GetSysClockFreq+0x354>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004180:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004184:	4bb1      	ldr	r3, [pc, #708]	@ (800444c <HAL_RCC_GetSysClockFreq+0x354>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d071      	beq.n	8004274 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004190:	4bae      	ldr	r3, [pc, #696]	@ (800444c <HAL_RCC_GetSysClockFreq+0x354>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	099b      	lsrs	r3, r3, #6
 8004196:	2200      	movs	r2, #0
 8004198:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800419c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80041a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041ac:	2300      	movs	r3, #0
 80041ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80041b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80041b6:	4622      	mov	r2, r4
 80041b8:	462b      	mov	r3, r5
 80041ba:	f04f 0000 	mov.w	r0, #0
 80041be:	f04f 0100 	mov.w	r1, #0
 80041c2:	0159      	lsls	r1, r3, #5
 80041c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041c8:	0150      	lsls	r0, r2, #5
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4621      	mov	r1, r4
 80041d0:	1a51      	subs	r1, r2, r1
 80041d2:	6439      	str	r1, [r7, #64]	@ 0x40
 80041d4:	4629      	mov	r1, r5
 80041d6:	eb63 0301 	sbc.w	r3, r3, r1
 80041da:	647b      	str	r3, [r7, #68]	@ 0x44
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80041e8:	4649      	mov	r1, r9
 80041ea:	018b      	lsls	r3, r1, #6
 80041ec:	4641      	mov	r1, r8
 80041ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041f2:	4641      	mov	r1, r8
 80041f4:	018a      	lsls	r2, r1, #6
 80041f6:	4641      	mov	r1, r8
 80041f8:	1a51      	subs	r1, r2, r1
 80041fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80041fc:	4649      	mov	r1, r9
 80041fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004202:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004210:	4649      	mov	r1, r9
 8004212:	00cb      	lsls	r3, r1, #3
 8004214:	4641      	mov	r1, r8
 8004216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800421a:	4641      	mov	r1, r8
 800421c:	00ca      	lsls	r2, r1, #3
 800421e:	4610      	mov	r0, r2
 8004220:	4619      	mov	r1, r3
 8004222:	4603      	mov	r3, r0
 8004224:	4622      	mov	r2, r4
 8004226:	189b      	adds	r3, r3, r2
 8004228:	633b      	str	r3, [r7, #48]	@ 0x30
 800422a:	462b      	mov	r3, r5
 800422c:	460a      	mov	r2, r1
 800422e:	eb42 0303 	adc.w	r3, r2, r3
 8004232:	637b      	str	r3, [r7, #52]	@ 0x34
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	f04f 0300 	mov.w	r3, #0
 800423c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004240:	4629      	mov	r1, r5
 8004242:	028b      	lsls	r3, r1, #10
 8004244:	4621      	mov	r1, r4
 8004246:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800424a:	4621      	mov	r1, r4
 800424c:	028a      	lsls	r2, r1, #10
 800424e:	4610      	mov	r0, r2
 8004250:	4619      	mov	r1, r3
 8004252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004256:	2200      	movs	r2, #0
 8004258:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800425c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004260:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004264:	f7fc fb06 	bl	8000874 <__aeabi_uldivmod>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4613      	mov	r3, r2
 800426e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004272:	e067      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004274:	4b75      	ldr	r3, [pc, #468]	@ (800444c <HAL_RCC_GetSysClockFreq+0x354>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	099b      	lsrs	r3, r3, #6
 800427a:	2200      	movs	r2, #0
 800427c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004280:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004284:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800428c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800428e:	2300      	movs	r3, #0
 8004290:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004292:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004296:	4622      	mov	r2, r4
 8004298:	462b      	mov	r3, r5
 800429a:	f04f 0000 	mov.w	r0, #0
 800429e:	f04f 0100 	mov.w	r1, #0
 80042a2:	0159      	lsls	r1, r3, #5
 80042a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042a8:	0150      	lsls	r0, r2, #5
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	4621      	mov	r1, r4
 80042b0:	1a51      	subs	r1, r2, r1
 80042b2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80042b4:	4629      	mov	r1, r5
 80042b6:	eb63 0301 	sbc.w	r3, r3, r1
 80042ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80042c8:	4649      	mov	r1, r9
 80042ca:	018b      	lsls	r3, r1, #6
 80042cc:	4641      	mov	r1, r8
 80042ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042d2:	4641      	mov	r1, r8
 80042d4:	018a      	lsls	r2, r1, #6
 80042d6:	4641      	mov	r1, r8
 80042d8:	ebb2 0a01 	subs.w	sl, r2, r1
 80042dc:	4649      	mov	r1, r9
 80042de:	eb63 0b01 	sbc.w	fp, r3, r1
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042ee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042f6:	4692      	mov	sl, r2
 80042f8:	469b      	mov	fp, r3
 80042fa:	4623      	mov	r3, r4
 80042fc:	eb1a 0303 	adds.w	r3, sl, r3
 8004300:	623b      	str	r3, [r7, #32]
 8004302:	462b      	mov	r3, r5
 8004304:	eb4b 0303 	adc.w	r3, fp, r3
 8004308:	627b      	str	r3, [r7, #36]	@ 0x24
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004316:	4629      	mov	r1, r5
 8004318:	028b      	lsls	r3, r1, #10
 800431a:	4621      	mov	r1, r4
 800431c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004320:	4621      	mov	r1, r4
 8004322:	028a      	lsls	r2, r1, #10
 8004324:	4610      	mov	r0, r2
 8004326:	4619      	mov	r1, r3
 8004328:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800432c:	2200      	movs	r2, #0
 800432e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004330:	677a      	str	r2, [r7, #116]	@ 0x74
 8004332:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004336:	f7fc fa9d 	bl	8000874 <__aeabi_uldivmod>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	4613      	mov	r3, r2
 8004340:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004344:	4b41      	ldr	r3, [pc, #260]	@ (800444c <HAL_RCC_GetSysClockFreq+0x354>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	0c1b      	lsrs	r3, r3, #16
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	3301      	adds	r3, #1
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004356:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800435a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800435e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004362:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004366:	e0e9      	b.n	800453c <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004368:	4b38      	ldr	r3, [pc, #224]	@ (800444c <HAL_RCC_GetSysClockFreq+0x354>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004370:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004374:	4b35      	ldr	r3, [pc, #212]	@ (800444c <HAL_RCC_GetSysClockFreq+0x354>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d069      	beq.n	8004454 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004380:	4b32      	ldr	r3, [pc, #200]	@ (800444c <HAL_RCC_GetSysClockFreq+0x354>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	099b      	lsrs	r3, r3, #6
 8004386:	2200      	movs	r2, #0
 8004388:	66bb      	str	r3, [r7, #104]	@ 0x68
 800438a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800438c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800438e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004392:	663b      	str	r3, [r7, #96]	@ 0x60
 8004394:	2300      	movs	r3, #0
 8004396:	667b      	str	r3, [r7, #100]	@ 0x64
 8004398:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800439c:	4622      	mov	r2, r4
 800439e:	462b      	mov	r3, r5
 80043a0:	f04f 0000 	mov.w	r0, #0
 80043a4:	f04f 0100 	mov.w	r1, #0
 80043a8:	0159      	lsls	r1, r3, #5
 80043aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043ae:	0150      	lsls	r0, r2, #5
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	4621      	mov	r1, r4
 80043b6:	1a51      	subs	r1, r2, r1
 80043b8:	61b9      	str	r1, [r7, #24]
 80043ba:	4629      	mov	r1, r5
 80043bc:	eb63 0301 	sbc.w	r3, r3, r1
 80043c0:	61fb      	str	r3, [r7, #28]
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	f04f 0300 	mov.w	r3, #0
 80043ca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80043ce:	4659      	mov	r1, fp
 80043d0:	018b      	lsls	r3, r1, #6
 80043d2:	4651      	mov	r1, sl
 80043d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043d8:	4651      	mov	r1, sl
 80043da:	018a      	lsls	r2, r1, #6
 80043dc:	4651      	mov	r1, sl
 80043de:	ebb2 0801 	subs.w	r8, r2, r1
 80043e2:	4659      	mov	r1, fp
 80043e4:	eb63 0901 	sbc.w	r9, r3, r1
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043fc:	4690      	mov	r8, r2
 80043fe:	4699      	mov	r9, r3
 8004400:	4623      	mov	r3, r4
 8004402:	eb18 0303 	adds.w	r3, r8, r3
 8004406:	613b      	str	r3, [r7, #16]
 8004408:	462b      	mov	r3, r5
 800440a:	eb49 0303 	adc.w	r3, r9, r3
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800441c:	4629      	mov	r1, r5
 800441e:	028b      	lsls	r3, r1, #10
 8004420:	4621      	mov	r1, r4
 8004422:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004426:	4621      	mov	r1, r4
 8004428:	028a      	lsls	r2, r1, #10
 800442a:	4610      	mov	r0, r2
 800442c:	4619      	mov	r1, r3
 800442e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004432:	2200      	movs	r2, #0
 8004434:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004436:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004438:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800443c:	f7fc fa1a 	bl	8000874 <__aeabi_uldivmod>
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	4613      	mov	r3, r2
 8004446:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800444a:	e063      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x41c>
 800444c:	40023800 	.word	0x40023800
 8004450:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004454:	4b3d      	ldr	r3, [pc, #244]	@ (800454c <HAL_RCC_GetSysClockFreq+0x454>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	099b      	lsrs	r3, r3, #6
 800445a:	2200      	movs	r2, #0
 800445c:	4618      	mov	r0, r3
 800445e:	4611      	mov	r1, r2
 8004460:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004464:	653b      	str	r3, [r7, #80]	@ 0x50
 8004466:	2300      	movs	r3, #0
 8004468:	657b      	str	r3, [r7, #84]	@ 0x54
 800446a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800446e:	4642      	mov	r2, r8
 8004470:	464b      	mov	r3, r9
 8004472:	f04f 0000 	mov.w	r0, #0
 8004476:	f04f 0100 	mov.w	r1, #0
 800447a:	0159      	lsls	r1, r3, #5
 800447c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004480:	0150      	lsls	r0, r2, #5
 8004482:	4602      	mov	r2, r0
 8004484:	460b      	mov	r3, r1
 8004486:	4641      	mov	r1, r8
 8004488:	1a51      	subs	r1, r2, r1
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	4649      	mov	r1, r9
 800448e:	eb63 0301 	sbc.w	r3, r3, r1
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80044a0:	4659      	mov	r1, fp
 80044a2:	018b      	lsls	r3, r1, #6
 80044a4:	4651      	mov	r1, sl
 80044a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044aa:	4651      	mov	r1, sl
 80044ac:	018a      	lsls	r2, r1, #6
 80044ae:	4651      	mov	r1, sl
 80044b0:	1a54      	subs	r4, r2, r1
 80044b2:	4659      	mov	r1, fp
 80044b4:	eb63 0501 	sbc.w	r5, r3, r1
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	f04f 0300 	mov.w	r3, #0
 80044c0:	00eb      	lsls	r3, r5, #3
 80044c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044c6:	00e2      	lsls	r2, r4, #3
 80044c8:	4614      	mov	r4, r2
 80044ca:	461d      	mov	r5, r3
 80044cc:	4643      	mov	r3, r8
 80044ce:	18e3      	adds	r3, r4, r3
 80044d0:	603b      	str	r3, [r7, #0]
 80044d2:	464b      	mov	r3, r9
 80044d4:	eb45 0303 	adc.w	r3, r5, r3
 80044d8:	607b      	str	r3, [r7, #4]
 80044da:	f04f 0200 	mov.w	r2, #0
 80044de:	f04f 0300 	mov.w	r3, #0
 80044e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044e6:	4629      	mov	r1, r5
 80044e8:	028b      	lsls	r3, r1, #10
 80044ea:	4621      	mov	r1, r4
 80044ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044f0:	4621      	mov	r1, r4
 80044f2:	028a      	lsls	r2, r1, #10
 80044f4:	4610      	mov	r0, r2
 80044f6:	4619      	mov	r1, r3
 80044f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80044fc:	2200      	movs	r2, #0
 80044fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004500:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004502:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004506:	f7fc f9b5 	bl	8000874 <__aeabi_uldivmod>
 800450a:	4602      	mov	r2, r0
 800450c:	460b      	mov	r3, r1
 800450e:	4613      	mov	r3, r2
 8004510:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004514:	4b0d      	ldr	r3, [pc, #52]	@ (800454c <HAL_RCC_GetSysClockFreq+0x454>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	0f1b      	lsrs	r3, r3, #28
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004522:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004526:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800452a:	fbb2 f3f3 	udiv	r3, r2, r3
 800452e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004532:	e003      	b.n	800453c <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004534:	4b06      	ldr	r3, [pc, #24]	@ (8004550 <HAL_RCC_GetSysClockFreq+0x458>)
 8004536:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800453a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800453c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004540:	4618      	mov	r0, r3
 8004542:	37b8      	adds	r7, #184	@ 0xb8
 8004544:	46bd      	mov	sp, r7
 8004546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800454a:	bf00      	nop
 800454c:	40023800 	.word	0x40023800
 8004550:	00f42400 	.word	0x00f42400

08004554 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e28d      	b.n	8004a82 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 8083 	beq.w	800467a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004574:	4b94      	ldr	r3, [pc, #592]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 030c 	and.w	r3, r3, #12
 800457c:	2b04      	cmp	r3, #4
 800457e:	d019      	beq.n	80045b4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004580:	4b91      	ldr	r3, [pc, #580]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f003 030c 	and.w	r3, r3, #12
        || \
 8004588:	2b08      	cmp	r3, #8
 800458a:	d106      	bne.n	800459a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800458c:	4b8e      	ldr	r3, [pc, #568]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004594:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004598:	d00c      	beq.n	80045b4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800459a:	4b8b      	ldr	r3, [pc, #556]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80045a2:	2b0c      	cmp	r3, #12
 80045a4:	d112      	bne.n	80045cc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045a6:	4b88      	ldr	r3, [pc, #544]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045b2:	d10b      	bne.n	80045cc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b4:	4b84      	ldr	r3, [pc, #528]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d05b      	beq.n	8004678 <HAL_RCC_OscConfig+0x124>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d157      	bne.n	8004678 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e25a      	b.n	8004a82 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045d4:	d106      	bne.n	80045e4 <HAL_RCC_OscConfig+0x90>
 80045d6:	4b7c      	ldr	r3, [pc, #496]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a7b      	ldr	r2, [pc, #492]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 80045dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045e0:	6013      	str	r3, [r2, #0]
 80045e2:	e01d      	b.n	8004620 <HAL_RCC_OscConfig+0xcc>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045ec:	d10c      	bne.n	8004608 <HAL_RCC_OscConfig+0xb4>
 80045ee:	4b76      	ldr	r3, [pc, #472]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a75      	ldr	r2, [pc, #468]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 80045f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	4b73      	ldr	r3, [pc, #460]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a72      	ldr	r2, [pc, #456]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 8004600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004604:	6013      	str	r3, [r2, #0]
 8004606:	e00b      	b.n	8004620 <HAL_RCC_OscConfig+0xcc>
 8004608:	4b6f      	ldr	r3, [pc, #444]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a6e      	ldr	r2, [pc, #440]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 800460e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004612:	6013      	str	r3, [r2, #0]
 8004614:	4b6c      	ldr	r3, [pc, #432]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a6b      	ldr	r2, [pc, #428]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 800461a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800461e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d013      	beq.n	8004650 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004628:	f7fe f8b8 	bl	800279c <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004630:	f7fe f8b4 	bl	800279c <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b64      	cmp	r3, #100	@ 0x64
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e21f      	b.n	8004a82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004642:	4b61      	ldr	r3, [pc, #388]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0f0      	beq.n	8004630 <HAL_RCC_OscConfig+0xdc>
 800464e:	e014      	b.n	800467a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004650:	f7fe f8a4 	bl	800279c <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004658:	f7fe f8a0 	bl	800279c <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b64      	cmp	r3, #100	@ 0x64
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e20b      	b.n	8004a82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800466a:	4b57      	ldr	r3, [pc, #348]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1f0      	bne.n	8004658 <HAL_RCC_OscConfig+0x104>
 8004676:	e000      	b.n	800467a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d06f      	beq.n	8004766 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004686:	4b50      	ldr	r3, [pc, #320]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 030c 	and.w	r3, r3, #12
 800468e:	2b00      	cmp	r3, #0
 8004690:	d017      	beq.n	80046c2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004692:	4b4d      	ldr	r3, [pc, #308]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 030c 	and.w	r3, r3, #12
        || \
 800469a:	2b08      	cmp	r3, #8
 800469c:	d105      	bne.n	80046aa <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800469e:	4b4a      	ldr	r3, [pc, #296]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00b      	beq.n	80046c2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046aa:	4b47      	ldr	r3, [pc, #284]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80046b2:	2b0c      	cmp	r3, #12
 80046b4:	d11c      	bne.n	80046f0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046b6:	4b44      	ldr	r3, [pc, #272]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d116      	bne.n	80046f0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046c2:	4b41      	ldr	r3, [pc, #260]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d005      	beq.n	80046da <HAL_RCC_OscConfig+0x186>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d001      	beq.n	80046da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e1d3      	b.n	8004a82 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046da:	4b3b      	ldr	r3, [pc, #236]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	4937      	ldr	r1, [pc, #220]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ee:	e03a      	b.n	8004766 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d020      	beq.n	800473a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046f8:	4b34      	ldr	r3, [pc, #208]	@ (80047cc <HAL_RCC_OscConfig+0x278>)
 80046fa:	2201      	movs	r2, #1
 80046fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fe:	f7fe f84d 	bl	800279c <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004704:	e008      	b.n	8004718 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004706:	f7fe f849 	bl	800279c <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e1b4      	b.n	8004a82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004718:	4b2b      	ldr	r3, [pc, #172]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0f0      	beq.n	8004706 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004724:	4b28      	ldr	r3, [pc, #160]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	4925      	ldr	r1, [pc, #148]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 8004734:	4313      	orrs	r3, r2
 8004736:	600b      	str	r3, [r1, #0]
 8004738:	e015      	b.n	8004766 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800473a:	4b24      	ldr	r3, [pc, #144]	@ (80047cc <HAL_RCC_OscConfig+0x278>)
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004740:	f7fe f82c 	bl	800279c <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004748:	f7fe f828 	bl	800279c <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e193      	b.n	8004a82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800475a:	4b1b      	ldr	r3, [pc, #108]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1f0      	bne.n	8004748 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	2b00      	cmp	r3, #0
 8004770:	d036      	beq.n	80047e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d016      	beq.n	80047a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800477a:	4b15      	ldr	r3, [pc, #84]	@ (80047d0 <HAL_RCC_OscConfig+0x27c>)
 800477c:	2201      	movs	r2, #1
 800477e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004780:	f7fe f80c 	bl	800279c <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004788:	f7fe f808 	bl	800279c <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e173      	b.n	8004a82 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800479a:	4b0b      	ldr	r3, [pc, #44]	@ (80047c8 <HAL_RCC_OscConfig+0x274>)
 800479c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0f0      	beq.n	8004788 <HAL_RCC_OscConfig+0x234>
 80047a6:	e01b      	b.n	80047e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047a8:	4b09      	ldr	r3, [pc, #36]	@ (80047d0 <HAL_RCC_OscConfig+0x27c>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ae:	f7fd fff5 	bl	800279c <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047b4:	e00e      	b.n	80047d4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047b6:	f7fd fff1 	bl	800279c <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d907      	bls.n	80047d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e15c      	b.n	8004a82 <HAL_RCC_OscConfig+0x52e>
 80047c8:	40023800 	.word	0x40023800
 80047cc:	42470000 	.word	0x42470000
 80047d0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047d4:	4b8a      	ldr	r3, [pc, #552]	@ (8004a00 <HAL_RCC_OscConfig+0x4ac>)
 80047d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1ea      	bne.n	80047b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 8097 	beq.w	800491c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ee:	2300      	movs	r3, #0
 80047f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047f2:	4b83      	ldr	r3, [pc, #524]	@ (8004a00 <HAL_RCC_OscConfig+0x4ac>)
 80047f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10f      	bne.n	800481e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047fe:	2300      	movs	r3, #0
 8004800:	60bb      	str	r3, [r7, #8]
 8004802:	4b7f      	ldr	r3, [pc, #508]	@ (8004a00 <HAL_RCC_OscConfig+0x4ac>)
 8004804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004806:	4a7e      	ldr	r2, [pc, #504]	@ (8004a00 <HAL_RCC_OscConfig+0x4ac>)
 8004808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800480c:	6413      	str	r3, [r2, #64]	@ 0x40
 800480e:	4b7c      	ldr	r3, [pc, #496]	@ (8004a00 <HAL_RCC_OscConfig+0x4ac>)
 8004810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004816:	60bb      	str	r3, [r7, #8]
 8004818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800481a:	2301      	movs	r3, #1
 800481c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800481e:	4b79      	ldr	r3, [pc, #484]	@ (8004a04 <HAL_RCC_OscConfig+0x4b0>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004826:	2b00      	cmp	r3, #0
 8004828:	d118      	bne.n	800485c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800482a:	4b76      	ldr	r3, [pc, #472]	@ (8004a04 <HAL_RCC_OscConfig+0x4b0>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a75      	ldr	r2, [pc, #468]	@ (8004a04 <HAL_RCC_OscConfig+0x4b0>)
 8004830:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004836:	f7fd ffb1 	bl	800279c <HAL_GetTick>
 800483a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800483c:	e008      	b.n	8004850 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800483e:	f7fd ffad 	bl	800279c <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e118      	b.n	8004a82 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004850:	4b6c      	ldr	r3, [pc, #432]	@ (8004a04 <HAL_RCC_OscConfig+0x4b0>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0f0      	beq.n	800483e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d106      	bne.n	8004872 <HAL_RCC_OscConfig+0x31e>
 8004864:	4b66      	ldr	r3, [pc, #408]	@ (8004a00 <HAL_RCC_OscConfig+0x4ac>)
 8004866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004868:	4a65      	ldr	r2, [pc, #404]	@ (8004a00 <HAL_RCC_OscConfig+0x4ac>)
 800486a:	f043 0301 	orr.w	r3, r3, #1
 800486e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004870:	e01c      	b.n	80048ac <HAL_RCC_OscConfig+0x358>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	2b05      	cmp	r3, #5
 8004878:	d10c      	bne.n	8004894 <HAL_RCC_OscConfig+0x340>
 800487a:	4b61      	ldr	r3, [pc, #388]	@ (8004a00 <HAL_RCC_OscConfig+0x4ac>)
 800487c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800487e:	4a60      	ldr	r2, [pc, #384]	@ (8004a00 <HAL_RCC_OscConfig+0x4ac>)
 8004880:	f043 0304 	orr.w	r3, r3, #4
 8004884:	6713      	str	r3, [r2, #112]	@ 0x70
 8004886:	4b5e      	ldr	r3, [pc, #376]	@ (8004a00 <HAL_RCC_OscConfig+0x4ac>)
 8004888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800488a:	4a5d      	ldr	r2, [pc, #372]	@ (8004a00 <HAL_RCC_OscConfig+0x4ac>)
 800488c:	f043 0301 	orr.w	r3, r3, #1
 8004890:	6713      	str	r3, [r2, #112]	@ 0x70
 8004892:	e00b      	b.n	80048ac <HAL_RCC_OscConfig+0x358>
 8004894:	4b5a      	ldr	r3, [pc, #360]	@ (8004a00 <HAL_RCC_OscConfig+0x4ac>)
 8004896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004898:	4a59      	ldr	r2, [pc, #356]	@ (8004a00 <HAL_RCC_OscConfig+0x4ac>)
 800489a:	f023 0301 	bic.w	r3, r3, #1
 800489e:	6713      	str	r3, [r2, #112]	@ 0x70
 80048a0:	4b57      	ldr	r3, [pc, #348]	@ (8004a00 <HAL_RCC_OscConfig+0x4ac>)
 80048a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a4:	4a56      	ldr	r2, [pc, #344]	@ (8004a00 <HAL_RCC_OscConfig+0x4ac>)
 80048a6:	f023 0304 	bic.w	r3, r3, #4
 80048aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d015      	beq.n	80048e0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b4:	f7fd ff72 	bl	800279c <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ba:	e00a      	b.n	80048d2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048bc:	f7fd ff6e 	bl	800279c <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e0d7      	b.n	8004a82 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048d2:	4b4b      	ldr	r3, [pc, #300]	@ (8004a00 <HAL_RCC_OscConfig+0x4ac>)
 80048d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d0ee      	beq.n	80048bc <HAL_RCC_OscConfig+0x368>
 80048de:	e014      	b.n	800490a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e0:	f7fd ff5c 	bl	800279c <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048e6:	e00a      	b.n	80048fe <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e8:	f7fd ff58 	bl	800279c <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e0c1      	b.n	8004a82 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048fe:	4b40      	ldr	r3, [pc, #256]	@ (8004a00 <HAL_RCC_OscConfig+0x4ac>)
 8004900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1ee      	bne.n	80048e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800490a:	7dfb      	ldrb	r3, [r7, #23]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d105      	bne.n	800491c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004910:	4b3b      	ldr	r3, [pc, #236]	@ (8004a00 <HAL_RCC_OscConfig+0x4ac>)
 8004912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004914:	4a3a      	ldr	r2, [pc, #232]	@ (8004a00 <HAL_RCC_OscConfig+0x4ac>)
 8004916:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800491a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 80ad 	beq.w	8004a80 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004926:	4b36      	ldr	r3, [pc, #216]	@ (8004a00 <HAL_RCC_OscConfig+0x4ac>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 030c 	and.w	r3, r3, #12
 800492e:	2b08      	cmp	r3, #8
 8004930:	d060      	beq.n	80049f4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	2b02      	cmp	r3, #2
 8004938:	d145      	bne.n	80049c6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800493a:	4b33      	ldr	r3, [pc, #204]	@ (8004a08 <HAL_RCC_OscConfig+0x4b4>)
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004940:	f7fd ff2c 	bl	800279c <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004948:	f7fd ff28 	bl	800279c <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e093      	b.n	8004a82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800495a:	4b29      	ldr	r3, [pc, #164]	@ (8004a00 <HAL_RCC_OscConfig+0x4ac>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f0      	bne.n	8004948 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	69da      	ldr	r2, [r3, #28]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004974:	019b      	lsls	r3, r3, #6
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497c:	085b      	lsrs	r3, r3, #1
 800497e:	3b01      	subs	r3, #1
 8004980:	041b      	lsls	r3, r3, #16
 8004982:	431a      	orrs	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004988:	061b      	lsls	r3, r3, #24
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004990:	071b      	lsls	r3, r3, #28
 8004992:	491b      	ldr	r1, [pc, #108]	@ (8004a00 <HAL_RCC_OscConfig+0x4ac>)
 8004994:	4313      	orrs	r3, r2
 8004996:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004998:	4b1b      	ldr	r3, [pc, #108]	@ (8004a08 <HAL_RCC_OscConfig+0x4b4>)
 800499a:	2201      	movs	r2, #1
 800499c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499e:	f7fd fefd 	bl	800279c <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049a4:	e008      	b.n	80049b8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a6:	f7fd fef9 	bl	800279c <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e064      	b.n	8004a82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049b8:	4b11      	ldr	r3, [pc, #68]	@ (8004a00 <HAL_RCC_OscConfig+0x4ac>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0f0      	beq.n	80049a6 <HAL_RCC_OscConfig+0x452>
 80049c4:	e05c      	b.n	8004a80 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049c6:	4b10      	ldr	r3, [pc, #64]	@ (8004a08 <HAL_RCC_OscConfig+0x4b4>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049cc:	f7fd fee6 	bl	800279c <HAL_GetTick>
 80049d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d4:	f7fd fee2 	bl	800279c <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e04d      	b.n	8004a82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049e6:	4b06      	ldr	r3, [pc, #24]	@ (8004a00 <HAL_RCC_OscConfig+0x4ac>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1f0      	bne.n	80049d4 <HAL_RCC_OscConfig+0x480>
 80049f2:	e045      	b.n	8004a80 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d107      	bne.n	8004a0c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e040      	b.n	8004a82 <HAL_RCC_OscConfig+0x52e>
 8004a00:	40023800 	.word	0x40023800
 8004a04:	40007000 	.word	0x40007000
 8004a08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8004a8c <HAL_RCC_OscConfig+0x538>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d030      	beq.n	8004a7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d129      	bne.n	8004a7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d122      	bne.n	8004a7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d119      	bne.n	8004a7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a52:	085b      	lsrs	r3, r3, #1
 8004a54:	3b01      	subs	r3, #1
 8004a56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d10f      	bne.n	8004a7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d107      	bne.n	8004a7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a76:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d001      	beq.n	8004a80 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e000      	b.n	8004a82 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3718      	adds	r7, #24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40023800 	.word	0x40023800

08004a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e041      	b.n	8004b26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d106      	bne.n	8004abc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fd fa2c 	bl	8001f14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	3304      	adds	r3, #4
 8004acc:	4619      	mov	r1, r3
 8004ace:	4610      	mov	r0, r2
 8004ad0:	f000 fa88 	bl	8004fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
	...

08004b30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d001      	beq.n	8004b48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e04e      	b.n	8004be6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68da      	ldr	r2, [r3, #12]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0201 	orr.w	r2, r2, #1
 8004b5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a23      	ldr	r2, [pc, #140]	@ (8004bf4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d022      	beq.n	8004bb0 <HAL_TIM_Base_Start_IT+0x80>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b72:	d01d      	beq.n	8004bb0 <HAL_TIM_Base_Start_IT+0x80>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a1f      	ldr	r2, [pc, #124]	@ (8004bf8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d018      	beq.n	8004bb0 <HAL_TIM_Base_Start_IT+0x80>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a1e      	ldr	r2, [pc, #120]	@ (8004bfc <HAL_TIM_Base_Start_IT+0xcc>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d013      	beq.n	8004bb0 <HAL_TIM_Base_Start_IT+0x80>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a1c      	ldr	r2, [pc, #112]	@ (8004c00 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d00e      	beq.n	8004bb0 <HAL_TIM_Base_Start_IT+0x80>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a1b      	ldr	r2, [pc, #108]	@ (8004c04 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d009      	beq.n	8004bb0 <HAL_TIM_Base_Start_IT+0x80>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a19      	ldr	r2, [pc, #100]	@ (8004c08 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d004      	beq.n	8004bb0 <HAL_TIM_Base_Start_IT+0x80>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a18      	ldr	r2, [pc, #96]	@ (8004c0c <HAL_TIM_Base_Start_IT+0xdc>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d111      	bne.n	8004bd4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2b06      	cmp	r3, #6
 8004bc0:	d010      	beq.n	8004be4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f042 0201 	orr.w	r2, r2, #1
 8004bd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd2:	e007      	b.n	8004be4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0201 	orr.w	r2, r2, #1
 8004be2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	40010000 	.word	0x40010000
 8004bf8:	40000400 	.word	0x40000400
 8004bfc:	40000800 	.word	0x40000800
 8004c00:	40000c00 	.word	0x40000c00
 8004c04:	40010400 	.word	0x40010400
 8004c08:	40014000 	.word	0x40014000
 8004c0c:	40001800 	.word	0x40001800

08004c10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d020      	beq.n	8004c74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d01b      	beq.n	8004c74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f06f 0202 	mvn.w	r2, #2
 8004c44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	f003 0303 	and.w	r3, r3, #3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f9a3 	bl	8004fa6 <HAL_TIM_IC_CaptureCallback>
 8004c60:	e005      	b.n	8004c6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f995 	bl	8004f92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f9a6 	bl	8004fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f003 0304 	and.w	r3, r3, #4
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d020      	beq.n	8004cc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01b      	beq.n	8004cc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0204 	mvn.w	r2, #4
 8004c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2202      	movs	r2, #2
 8004c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f97d 	bl	8004fa6 <HAL_TIM_IC_CaptureCallback>
 8004cac:	e005      	b.n	8004cba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f96f 	bl	8004f92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f980 	bl	8004fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f003 0308 	and.w	r3, r3, #8
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d020      	beq.n	8004d0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01b      	beq.n	8004d0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0208 	mvn.w	r2, #8
 8004cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2204      	movs	r2, #4
 8004ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f957 	bl	8004fa6 <HAL_TIM_IC_CaptureCallback>
 8004cf8:	e005      	b.n	8004d06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f949 	bl	8004f92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f95a 	bl	8004fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f003 0310 	and.w	r3, r3, #16
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d020      	beq.n	8004d58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f003 0310 	and.w	r3, r3, #16
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d01b      	beq.n	8004d58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f06f 0210 	mvn.w	r2, #16
 8004d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2208      	movs	r2, #8
 8004d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f931 	bl	8004fa6 <HAL_TIM_IC_CaptureCallback>
 8004d44:	e005      	b.n	8004d52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f923 	bl	8004f92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f934 	bl	8004fba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00c      	beq.n	8004d7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d007      	beq.n	8004d7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f06f 0201 	mvn.w	r2, #1
 8004d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f901 	bl	8004f7e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00c      	beq.n	8004da0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d007      	beq.n	8004da0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 faee 	bl	800537c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00c      	beq.n	8004dc4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d007      	beq.n	8004dc4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f905 	bl	8004fce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f003 0320 	and.w	r3, r3, #32
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00c      	beq.n	8004de8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f003 0320 	and.w	r3, r3, #32
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d007      	beq.n	8004de8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f06f 0220 	mvn.w	r2, #32
 8004de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 fac0 	bl	8005368 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004de8:	bf00      	nop
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d101      	bne.n	8004e0c <HAL_TIM_ConfigClockSource+0x1c>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	e0b4      	b.n	8004f76 <HAL_TIM_ConfigClockSource+0x186>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004e2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e44:	d03e      	beq.n	8004ec4 <HAL_TIM_ConfigClockSource+0xd4>
 8004e46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e4a:	f200 8087 	bhi.w	8004f5c <HAL_TIM_ConfigClockSource+0x16c>
 8004e4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e52:	f000 8086 	beq.w	8004f62 <HAL_TIM_ConfigClockSource+0x172>
 8004e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e5a:	d87f      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x16c>
 8004e5c:	2b70      	cmp	r3, #112	@ 0x70
 8004e5e:	d01a      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0xa6>
 8004e60:	2b70      	cmp	r3, #112	@ 0x70
 8004e62:	d87b      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x16c>
 8004e64:	2b60      	cmp	r3, #96	@ 0x60
 8004e66:	d050      	beq.n	8004f0a <HAL_TIM_ConfigClockSource+0x11a>
 8004e68:	2b60      	cmp	r3, #96	@ 0x60
 8004e6a:	d877      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x16c>
 8004e6c:	2b50      	cmp	r3, #80	@ 0x50
 8004e6e:	d03c      	beq.n	8004eea <HAL_TIM_ConfigClockSource+0xfa>
 8004e70:	2b50      	cmp	r3, #80	@ 0x50
 8004e72:	d873      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x16c>
 8004e74:	2b40      	cmp	r3, #64	@ 0x40
 8004e76:	d058      	beq.n	8004f2a <HAL_TIM_ConfigClockSource+0x13a>
 8004e78:	2b40      	cmp	r3, #64	@ 0x40
 8004e7a:	d86f      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x16c>
 8004e7c:	2b30      	cmp	r3, #48	@ 0x30
 8004e7e:	d064      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0x15a>
 8004e80:	2b30      	cmp	r3, #48	@ 0x30
 8004e82:	d86b      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x16c>
 8004e84:	2b20      	cmp	r3, #32
 8004e86:	d060      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0x15a>
 8004e88:	2b20      	cmp	r3, #32
 8004e8a:	d867      	bhi.n	8004f5c <HAL_TIM_ConfigClockSource+0x16c>
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d05c      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0x15a>
 8004e90:	2b10      	cmp	r3, #16
 8004e92:	d05a      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0x15a>
 8004e94:	e062      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ea6:	f000 f9c3 	bl	8005230 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004eb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	609a      	str	r2, [r3, #8]
      break;
 8004ec2:	e04f      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ed4:	f000 f9ac 	bl	8005230 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689a      	ldr	r2, [r3, #8]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ee6:	609a      	str	r2, [r3, #8]
      break;
 8004ee8:	e03c      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f000 f920 	bl	800513c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2150      	movs	r1, #80	@ 0x50
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 f979 	bl	80051fa <TIM_ITRx_SetConfig>
      break;
 8004f08:	e02c      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f16:	461a      	mov	r2, r3
 8004f18:	f000 f93f 	bl	800519a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2160      	movs	r1, #96	@ 0x60
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 f969 	bl	80051fa <TIM_ITRx_SetConfig>
      break;
 8004f28:	e01c      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f36:	461a      	mov	r2, r3
 8004f38:	f000 f900 	bl	800513c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2140      	movs	r1, #64	@ 0x40
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 f959 	bl	80051fa <TIM_ITRx_SetConfig>
      break;
 8004f48:	e00c      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4619      	mov	r1, r3
 8004f54:	4610      	mov	r0, r2
 8004f56:	f000 f950 	bl	80051fa <TIM_ITRx_SetConfig>
      break;
 8004f5a:	e003      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f60:	e000      	b.n	8004f64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b083      	sub	sp, #12
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b083      	sub	sp, #12
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fc2:	bf00      	nop
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
	...

08004fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a46      	ldr	r2, [pc, #280]	@ (8005110 <TIM_Base_SetConfig+0x12c>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d013      	beq.n	8005024 <TIM_Base_SetConfig+0x40>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005002:	d00f      	beq.n	8005024 <TIM_Base_SetConfig+0x40>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a43      	ldr	r2, [pc, #268]	@ (8005114 <TIM_Base_SetConfig+0x130>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00b      	beq.n	8005024 <TIM_Base_SetConfig+0x40>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a42      	ldr	r2, [pc, #264]	@ (8005118 <TIM_Base_SetConfig+0x134>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d007      	beq.n	8005024 <TIM_Base_SetConfig+0x40>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a41      	ldr	r2, [pc, #260]	@ (800511c <TIM_Base_SetConfig+0x138>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d003      	beq.n	8005024 <TIM_Base_SetConfig+0x40>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a40      	ldr	r2, [pc, #256]	@ (8005120 <TIM_Base_SetConfig+0x13c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d108      	bne.n	8005036 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800502a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a35      	ldr	r2, [pc, #212]	@ (8005110 <TIM_Base_SetConfig+0x12c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d02b      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005044:	d027      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a32      	ldr	r2, [pc, #200]	@ (8005114 <TIM_Base_SetConfig+0x130>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d023      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a31      	ldr	r2, [pc, #196]	@ (8005118 <TIM_Base_SetConfig+0x134>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d01f      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a30      	ldr	r2, [pc, #192]	@ (800511c <TIM_Base_SetConfig+0x138>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d01b      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a2f      	ldr	r2, [pc, #188]	@ (8005120 <TIM_Base_SetConfig+0x13c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d017      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a2e      	ldr	r2, [pc, #184]	@ (8005124 <TIM_Base_SetConfig+0x140>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d013      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a2d      	ldr	r2, [pc, #180]	@ (8005128 <TIM_Base_SetConfig+0x144>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d00f      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a2c      	ldr	r2, [pc, #176]	@ (800512c <TIM_Base_SetConfig+0x148>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00b      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a2b      	ldr	r2, [pc, #172]	@ (8005130 <TIM_Base_SetConfig+0x14c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d007      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a2a      	ldr	r2, [pc, #168]	@ (8005134 <TIM_Base_SetConfig+0x150>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d003      	beq.n	8005096 <TIM_Base_SetConfig+0xb2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a29      	ldr	r2, [pc, #164]	@ (8005138 <TIM_Base_SetConfig+0x154>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d108      	bne.n	80050a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800509c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a10      	ldr	r2, [pc, #64]	@ (8005110 <TIM_Base_SetConfig+0x12c>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d003      	beq.n	80050dc <TIM_Base_SetConfig+0xf8>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a12      	ldr	r2, [pc, #72]	@ (8005120 <TIM_Base_SetConfig+0x13c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d103      	bne.n	80050e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	691a      	ldr	r2, [r3, #16]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d105      	bne.n	8005102 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f023 0201 	bic.w	r2, r3, #1
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	611a      	str	r2, [r3, #16]
  }
}
 8005102:	bf00      	nop
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	40010000 	.word	0x40010000
 8005114:	40000400 	.word	0x40000400
 8005118:	40000800 	.word	0x40000800
 800511c:	40000c00 	.word	0x40000c00
 8005120:	40010400 	.word	0x40010400
 8005124:	40014000 	.word	0x40014000
 8005128:	40014400 	.word	0x40014400
 800512c:	40014800 	.word	0x40014800
 8005130:	40001800 	.word	0x40001800
 8005134:	40001c00 	.word	0x40001c00
 8005138:	40002000 	.word	0x40002000

0800513c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	f023 0201 	bic.w	r2, r3, #1
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005166:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	4313      	orrs	r3, r2
 8005170:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f023 030a 	bic.w	r3, r3, #10
 8005178:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	621a      	str	r2, [r3, #32]
}
 800518e:	bf00      	nop
 8005190:	371c      	adds	r7, #28
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800519a:	b480      	push	{r7}
 800519c:	b087      	sub	sp, #28
 800519e:	af00      	add	r7, sp, #0
 80051a0:	60f8      	str	r0, [r7, #12]
 80051a2:	60b9      	str	r1, [r7, #8]
 80051a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	f023 0210 	bic.w	r2, r3, #16
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	031b      	lsls	r3, r3, #12
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80051d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	4313      	orrs	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	621a      	str	r2, [r3, #32]
}
 80051ee:	bf00      	nop
 80051f0:	371c      	adds	r7, #28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b085      	sub	sp, #20
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005210:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4313      	orrs	r3, r2
 8005218:	f043 0307 	orr.w	r3, r3, #7
 800521c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	609a      	str	r2, [r3, #8]
}
 8005224:	bf00      	nop
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005230:	b480      	push	{r7}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
 800523c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800524a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	021a      	lsls	r2, r3, #8
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	431a      	orrs	r2, r3
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	4313      	orrs	r3, r2
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	4313      	orrs	r3, r2
 800525c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	609a      	str	r2, [r3, #8]
}
 8005264:	bf00      	nop
 8005266:	371c      	adds	r7, #28
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005280:	2b01      	cmp	r3, #1
 8005282:	d101      	bne.n	8005288 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005284:	2302      	movs	r3, #2
 8005286:	e05a      	b.n	800533e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2202      	movs	r2, #2
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a21      	ldr	r2, [pc, #132]	@ (800534c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d022      	beq.n	8005312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052d4:	d01d      	beq.n	8005312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a1d      	ldr	r2, [pc, #116]	@ (8005350 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d018      	beq.n	8005312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a1b      	ldr	r2, [pc, #108]	@ (8005354 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d013      	beq.n	8005312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a1a      	ldr	r2, [pc, #104]	@ (8005358 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d00e      	beq.n	8005312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a18      	ldr	r2, [pc, #96]	@ (800535c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d009      	beq.n	8005312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a17      	ldr	r2, [pc, #92]	@ (8005360 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d004      	beq.n	8005312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a15      	ldr	r2, [pc, #84]	@ (8005364 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d10c      	bne.n	800532c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005318:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	4313      	orrs	r3, r2
 8005322:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	40010000 	.word	0x40010000
 8005350:	40000400 	.word	0x40000400
 8005354:	40000800 	.word	0x40000800
 8005358:	40000c00 	.word	0x40000c00
 800535c:	40010400 	.word	0x40010400
 8005360:	40014000 	.word	0x40014000
 8005364:	40001800 	.word	0x40001800

08005368 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <LL_GPIO_SetPinMode>:
{
 8005390:	b480      	push	{r7}
 8005392:	b08b      	sub	sp, #44	@ 0x2c
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	fa93 f3a3 	rbit	r3, r3
 80053aa:	613b      	str	r3, [r7, #16]
  return result;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80053b6:	2320      	movs	r3, #32
 80053b8:	e003      	b.n	80053c2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	fab3 f383 	clz	r3, r3
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	2103      	movs	r1, #3
 80053c6:	fa01 f303 	lsl.w	r3, r1, r3
 80053ca:	43db      	mvns	r3, r3
 80053cc:	401a      	ands	r2, r3
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	fa93 f3a3 	rbit	r3, r3
 80053d8:	61fb      	str	r3, [r7, #28]
  return result;
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80053e4:	2320      	movs	r3, #32
 80053e6:	e003      	b.n	80053f0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80053e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ea:	fab3 f383 	clz	r3, r3
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	6879      	ldr	r1, [r7, #4]
 80053f4:	fa01 f303 	lsl.w	r3, r1, r3
 80053f8:	431a      	orrs	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	601a      	str	r2, [r3, #0]
}
 80053fe:	bf00      	nop
 8005400:	372c      	adds	r7, #44	@ 0x2c
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <LL_GPIO_SetPinOutputType>:
{
 800540a:	b480      	push	{r7}
 800540c:	b085      	sub	sp, #20
 800540e:	af00      	add	r7, sp, #0
 8005410:	60f8      	str	r0, [r7, #12]
 8005412:	60b9      	str	r1, [r7, #8]
 8005414:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	43db      	mvns	r3, r3
 800541e:	401a      	ands	r2, r3
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	6879      	ldr	r1, [r7, #4]
 8005424:	fb01 f303 	mul.w	r3, r1, r3
 8005428:	431a      	orrs	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	605a      	str	r2, [r3, #4]
}
 800542e:	bf00      	nop
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <LL_GPIO_SetPinSpeed>:
{
 800543a:	b480      	push	{r7}
 800543c:	b08b      	sub	sp, #44	@ 0x2c
 800543e:	af00      	add	r7, sp, #0
 8005440:	60f8      	str	r0, [r7, #12]
 8005442:	60b9      	str	r1, [r7, #8]
 8005444:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	689a      	ldr	r2, [r3, #8]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	fa93 f3a3 	rbit	r3, r3
 8005454:	613b      	str	r3, [r7, #16]
  return result;
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005460:	2320      	movs	r3, #32
 8005462:	e003      	b.n	800546c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	fab3 f383 	clz	r3, r3
 800546a:	b2db      	uxtb	r3, r3
 800546c:	005b      	lsls	r3, r3, #1
 800546e:	2103      	movs	r1, #3
 8005470:	fa01 f303 	lsl.w	r3, r1, r3
 8005474:	43db      	mvns	r3, r3
 8005476:	401a      	ands	r2, r3
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	fa93 f3a3 	rbit	r3, r3
 8005482:	61fb      	str	r3, [r7, #28]
  return result;
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800548e:	2320      	movs	r3, #32
 8005490:	e003      	b.n	800549a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005494:	fab3 f383 	clz	r3, r3
 8005498:	b2db      	uxtb	r3, r3
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	6879      	ldr	r1, [r7, #4]
 800549e:	fa01 f303 	lsl.w	r3, r1, r3
 80054a2:	431a      	orrs	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	609a      	str	r2, [r3, #8]
}
 80054a8:	bf00      	nop
 80054aa:	372c      	adds	r7, #44	@ 0x2c
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <LL_GPIO_SetPinPull>:
{
 80054b4:	b480      	push	{r7}
 80054b6:	b08b      	sub	sp, #44	@ 0x2c
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	68da      	ldr	r2, [r3, #12]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	fa93 f3a3 	rbit	r3, r3
 80054ce:	613b      	str	r3, [r7, #16]
  return result;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80054da:	2320      	movs	r3, #32
 80054dc:	e003      	b.n	80054e6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	fab3 f383 	clz	r3, r3
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	005b      	lsls	r3, r3, #1
 80054e8:	2103      	movs	r1, #3
 80054ea:	fa01 f303 	lsl.w	r3, r1, r3
 80054ee:	43db      	mvns	r3, r3
 80054f0:	401a      	ands	r2, r3
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	fa93 f3a3 	rbit	r3, r3
 80054fc:	61fb      	str	r3, [r7, #28]
  return result;
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005504:	2b00      	cmp	r3, #0
 8005506:	d101      	bne.n	800550c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005508:	2320      	movs	r3, #32
 800550a:	e003      	b.n	8005514 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800550c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550e:	fab3 f383 	clz	r3, r3
 8005512:	b2db      	uxtb	r3, r3
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	6879      	ldr	r1, [r7, #4]
 8005518:	fa01 f303 	lsl.w	r3, r1, r3
 800551c:	431a      	orrs	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	60da      	str	r2, [r3, #12]
}
 8005522:	bf00      	nop
 8005524:	372c      	adds	r7, #44	@ 0x2c
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <LL_GPIO_SetAFPin_0_7>:
{
 800552e:	b480      	push	{r7}
 8005530:	b08b      	sub	sp, #44	@ 0x2c
 8005532:	af00      	add	r7, sp, #0
 8005534:	60f8      	str	r0, [r7, #12]
 8005536:	60b9      	str	r1, [r7, #8]
 8005538:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6a1a      	ldr	r2, [r3, #32]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	fa93 f3a3 	rbit	r3, r3
 8005548:	613b      	str	r3, [r7, #16]
  return result;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005554:	2320      	movs	r3, #32
 8005556:	e003      	b.n	8005560 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	fab3 f383 	clz	r3, r3
 800555e:	b2db      	uxtb	r3, r3
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	210f      	movs	r1, #15
 8005564:	fa01 f303 	lsl.w	r3, r1, r3
 8005568:	43db      	mvns	r3, r3
 800556a:	401a      	ands	r2, r3
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	fa93 f3a3 	rbit	r3, r3
 8005576:	61fb      	str	r3, [r7, #28]
  return result;
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800557c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005582:	2320      	movs	r3, #32
 8005584:	e003      	b.n	800558e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005588:	fab3 f383 	clz	r3, r3
 800558c:	b2db      	uxtb	r3, r3
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	fa01 f303 	lsl.w	r3, r1, r3
 8005596:	431a      	orrs	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	621a      	str	r2, [r3, #32]
}
 800559c:	bf00      	nop
 800559e:	372c      	adds	r7, #44	@ 0x2c
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <LL_GPIO_SetAFPin_8_15>:
{
 80055a8:	b480      	push	{r7}
 80055aa:	b08b      	sub	sp, #44	@ 0x2c
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	0a1b      	lsrs	r3, r3, #8
 80055bc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	fa93 f3a3 	rbit	r3, r3
 80055c4:	613b      	str	r3, [r7, #16]
  return result;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80055d0:	2320      	movs	r3, #32
 80055d2:	e003      	b.n	80055dc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	fab3 f383 	clz	r3, r3
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	210f      	movs	r1, #15
 80055e0:	fa01 f303 	lsl.w	r3, r1, r3
 80055e4:	43db      	mvns	r3, r3
 80055e6:	401a      	ands	r2, r3
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	0a1b      	lsrs	r3, r3, #8
 80055ec:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	fa93 f3a3 	rbit	r3, r3
 80055f4:	61fb      	str	r3, [r7, #28]
  return result;
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80055fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005600:	2320      	movs	r3, #32
 8005602:	e003      	b.n	800560c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005606:	fab3 f383 	clz	r3, r3
 800560a:	b2db      	uxtb	r3, r3
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	6879      	ldr	r1, [r7, #4]
 8005610:	fa01 f303 	lsl.w	r3, r1, r3
 8005614:	431a      	orrs	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800561a:	bf00      	nop
 800561c:	372c      	adds	r7, #44	@ 0x2c
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b08a      	sub	sp, #40	@ 0x28
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
 800562e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8005630:	2300      	movs	r3, #0
 8005632:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8005634:	2300      	movs	r3, #0
 8005636:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	fa93 f3a3 	rbit	r3, r3
 8005644:	617b      	str	r3, [r7, #20]
  return result;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <LL_GPIO_Init+0x2e>
    return 32U;
 8005650:	2320      	movs	r3, #32
 8005652:	e003      	b.n	800565c <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	fab3 f383 	clz	r3, r3
 800565a:	b2db      	uxtb	r3, r3
 800565c:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800565e:	e057      	b.n	8005710 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	2101      	movs	r1, #1
 8005666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005668:	fa01 f303 	lsl.w	r3, r1, r3
 800566c:	4013      	ands	r3, r2
 800566e:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d049      	beq.n	800570a <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d003      	beq.n	8005686 <LL_GPIO_Init+0x60>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2b02      	cmp	r3, #2
 8005684:	d10d      	bne.n	80056a2 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	461a      	mov	r2, r3
 800568c:	6a39      	ldr	r1, [r7, #32]
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7ff fed3 	bl	800543a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	461a      	mov	r2, r3
 800569a:	6a39      	ldr	r1, [r7, #32]
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7ff feb4 	bl	800540a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	461a      	mov	r2, r3
 80056a8:	6a39      	ldr	r1, [r7, #32]
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7ff ff02 	bl	80054b4 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d121      	bne.n	80056fc <LL_GPIO_Init+0xd6>
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	fa93 f3a3 	rbit	r3, r3
 80056c2:	60bb      	str	r3, [r7, #8]
  return result;
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <LL_GPIO_Init+0xac>
    return 32U;
 80056ce:	2320      	movs	r3, #32
 80056d0:	e003      	b.n	80056da <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	fab3 f383 	clz	r3, r3
 80056d8:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80056da:	2b07      	cmp	r3, #7
 80056dc:	d807      	bhi.n	80056ee <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	461a      	mov	r2, r3
 80056e4:	6a39      	ldr	r1, [r7, #32]
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7ff ff21 	bl	800552e <LL_GPIO_SetAFPin_0_7>
 80056ec:	e006      	b.n	80056fc <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	461a      	mov	r2, r3
 80056f4:	6a39      	ldr	r1, [r7, #32]
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7ff ff56 	bl	80055a8 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	461a      	mov	r2, r3
 8005702:	6a39      	ldr	r1, [r7, #32]
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff fe43 	bl	8005390 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800570a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570c:	3301      	adds	r3, #1
 800570e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005716:	fa22 f303 	lsr.w	r3, r2, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1a0      	bne.n	8005660 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3728      	adds	r7, #40	@ 0x28
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8005728:	b480      	push	{r7}
 800572a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800572c:	4b04      	ldr	r3, [pc, #16]	@ (8005740 <LL_RCC_GetSysClkSource+0x18>)
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f003 030c 	and.w	r3, r3, #12
}
 8005734:	4618      	mov	r0, r3
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	40023800 	.word	0x40023800

08005744 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005748:	4b04      	ldr	r3, [pc, #16]	@ (800575c <LL_RCC_GetAHBPrescaler+0x18>)
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005750:	4618      	mov	r0, r3
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	40023800 	.word	0x40023800

08005760 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005760:	b480      	push	{r7}
 8005762:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005764:	4b04      	ldr	r3, [pc, #16]	@ (8005778 <LL_RCC_GetAPB1Prescaler+0x18>)
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 800576c:	4618      	mov	r0, r3
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	40023800 	.word	0x40023800

0800577c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005780:	4b04      	ldr	r3, [pc, #16]	@ (8005794 <LL_RCC_GetAPB2Prescaler+0x18>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8005788:	4618      	mov	r0, r3
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	40023800 	.word	0x40023800

08005798 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005798:	b480      	push	{r7}
 800579a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800579c:	4b04      	ldr	r3, [pc, #16]	@ (80057b0 <LL_RCC_PLL_GetMainSource+0x18>)
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	40023800 	.word	0x40023800

080057b4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80057b4:	b480      	push	{r7}
 80057b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80057b8:	4b04      	ldr	r3, [pc, #16]	@ (80057cc <LL_RCC_PLL_GetN+0x18>)
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	099b      	lsrs	r3, r3, #6
 80057be:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	40023800 	.word	0x40023800

080057d0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80057d0:	b480      	push	{r7}
 80057d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80057d4:	4b04      	ldr	r3, [pc, #16]	@ (80057e8 <LL_RCC_PLL_GetP+0x18>)
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80057dc:	4618      	mov	r0, r3
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	40023800 	.word	0x40023800

080057ec <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80057f0:	4b04      	ldr	r3, [pc, #16]	@ (8005804 <LL_RCC_PLL_GetR+0x18>)
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	40023800 	.word	0x40023800

08005808 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005808:	b480      	push	{r7}
 800580a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800580c:	4b04      	ldr	r3, [pc, #16]	@ (8005820 <LL_RCC_PLL_GetDivider+0x18>)
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8005814:	4618      	mov	r0, r3
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	40023800 	.word	0x40023800

08005824 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800582c:	f000 f820 	bl	8005870 <RCC_GetSystemClockFreq>
 8005830:	4602      	mov	r2, r0
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4618      	mov	r0, r3
 800583c:	f000 f85a 	bl	80058f4 <RCC_GetHCLKClockFreq>
 8005840:	4602      	mov	r2, r0
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	4618      	mov	r0, r3
 800584c:	f000 f868 	bl	8005920 <RCC_GetPCLK1ClockFreq>
 8005850:	4602      	mov	r2, r0
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	4618      	mov	r0, r3
 800585c:	f000 f874 	bl	8005948 <RCC_GetPCLK2ClockFreq>
 8005860:	4602      	mov	r2, r0
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	60da      	str	r2, [r3, #12]
}
 8005866:	bf00      	nop
 8005868:	3708      	adds	r7, #8
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
	...

08005870 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8005876:	2300      	movs	r3, #0
 8005878:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800587a:	f7ff ff55 	bl	8005728 <LL_RCC_GetSysClkSource>
 800587e:	4603      	mov	r3, r0
 8005880:	2b0c      	cmp	r3, #12
 8005882:	d82d      	bhi.n	80058e0 <RCC_GetSystemClockFreq+0x70>
 8005884:	a201      	add	r2, pc, #4	@ (adr r2, 800588c <RCC_GetSystemClockFreq+0x1c>)
 8005886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588a:	bf00      	nop
 800588c:	080058c1 	.word	0x080058c1
 8005890:	080058e1 	.word	0x080058e1
 8005894:	080058e1 	.word	0x080058e1
 8005898:	080058e1 	.word	0x080058e1
 800589c:	080058c7 	.word	0x080058c7
 80058a0:	080058e1 	.word	0x080058e1
 80058a4:	080058e1 	.word	0x080058e1
 80058a8:	080058e1 	.word	0x080058e1
 80058ac:	080058cd 	.word	0x080058cd
 80058b0:	080058e1 	.word	0x080058e1
 80058b4:	080058e1 	.word	0x080058e1
 80058b8:	080058e1 	.word	0x080058e1
 80058bc:	080058d7 	.word	0x080058d7
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80058c0:	4b0b      	ldr	r3, [pc, #44]	@ (80058f0 <RCC_GetSystemClockFreq+0x80>)
 80058c2:	607b      	str	r3, [r7, #4]
      break;
 80058c4:	e00f      	b.n	80058e6 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80058c6:	4b0a      	ldr	r3, [pc, #40]	@ (80058f0 <RCC_GetSystemClockFreq+0x80>)
 80058c8:	607b      	str	r3, [r7, #4]
      break;
 80058ca:	e00c      	b.n	80058e6 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80058cc:	2008      	movs	r0, #8
 80058ce:	f000 f84f 	bl	8005970 <RCC_PLL_GetFreqDomain_SYS>
 80058d2:	6078      	str	r0, [r7, #4]
      break;
 80058d4:	e007      	b.n	80058e6 <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 80058d6:	200c      	movs	r0, #12
 80058d8:	f000 f84a 	bl	8005970 <RCC_PLL_GetFreqDomain_SYS>
 80058dc:	6078      	str	r0, [r7, #4]
      break;
 80058de:	e002      	b.n	80058e6 <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80058e0:	4b03      	ldr	r3, [pc, #12]	@ (80058f0 <RCC_GetSystemClockFreq+0x80>)
 80058e2:	607b      	str	r3, [r7, #4]
      break;
 80058e4:	bf00      	nop
  }

  return frequency;
 80058e6:	687b      	ldr	r3, [r7, #4]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3708      	adds	r7, #8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	00f42400 	.word	0x00f42400

080058f4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80058fc:	f7ff ff22 	bl	8005744 <LL_RCC_GetAHBPrescaler>
 8005900:	4603      	mov	r3, r0
 8005902:	091b      	lsrs	r3, r3, #4
 8005904:	f003 030f 	and.w	r3, r3, #15
 8005908:	4a04      	ldr	r2, [pc, #16]	@ (800591c <RCC_GetHCLKClockFreq+0x28>)
 800590a:	5cd3      	ldrb	r3, [r2, r3]
 800590c:	461a      	mov	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	40d3      	lsrs	r3, r2
}
 8005912:	4618      	mov	r0, r3
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	0800627c 	.word	0x0800627c

08005920 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005928:	f7ff ff1a 	bl	8005760 <LL_RCC_GetAPB1Prescaler>
 800592c:	4603      	mov	r3, r0
 800592e:	0a9b      	lsrs	r3, r3, #10
 8005930:	4a04      	ldr	r2, [pc, #16]	@ (8005944 <RCC_GetPCLK1ClockFreq+0x24>)
 8005932:	5cd3      	ldrb	r3, [r2, r3]
 8005934:	461a      	mov	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	40d3      	lsrs	r3, r2
}
 800593a:	4618      	mov	r0, r3
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	0800628c 	.word	0x0800628c

08005948 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005950:	f7ff ff14 	bl	800577c <LL_RCC_GetAPB2Prescaler>
 8005954:	4603      	mov	r3, r0
 8005956:	0b5b      	lsrs	r3, r3, #13
 8005958:	4a04      	ldr	r2, [pc, #16]	@ (800596c <RCC_GetPCLK2ClockFreq+0x24>)
 800595a:	5cd3      	ldrb	r3, [r2, r3]
 800595c:	461a      	mov	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	40d3      	lsrs	r3, r2
}
 8005962:	4618      	mov	r0, r3
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	0800628c 	.word	0x0800628c

08005970 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8005970:	b590      	push	{r4, r7, lr}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005984:	f7ff ff08 	bl	8005798 <LL_RCC_PLL_GetMainSource>
 8005988:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d004      	beq.n	800599a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005996:	d003      	beq.n	80059a0 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8005998:	e005      	b.n	80059a6 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800599a:	4b1c      	ldr	r3, [pc, #112]	@ (8005a0c <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 800599c:	617b      	str	r3, [r7, #20]
      break;
 800599e:	e005      	b.n	80059ac <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80059a0:	4b1a      	ldr	r3, [pc, #104]	@ (8005a0c <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 80059a2:	617b      	str	r3, [r7, #20]
      break;
 80059a4:	e002      	b.n	80059ac <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80059a6:	4b19      	ldr	r3, [pc, #100]	@ (8005a0c <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 80059a8:	617b      	str	r3, [r7, #20]
      break;
 80059aa:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b08      	cmp	r3, #8
 80059b0:	d114      	bne.n	80059dc <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80059b2:	f7ff ff29 	bl	8005808 <LL_RCC_PLL_GetDivider>
 80059b6:	4602      	mov	r2, r0
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	fbb3 f4f2 	udiv	r4, r3, r2
 80059be:	f7ff fef9 	bl	80057b4 <LL_RCC_PLL_GetN>
 80059c2:	4603      	mov	r3, r0
 80059c4:	fb03 f404 	mul.w	r4, r3, r4
 80059c8:	f7ff ff02 	bl	80057d0 <LL_RCC_PLL_GetP>
 80059cc:	4603      	mov	r3, r0
 80059ce:	0c1b      	lsrs	r3, r3, #16
 80059d0:	3301      	adds	r3, #1
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	fbb4 f3f3 	udiv	r3, r4, r3
 80059d8:	613b      	str	r3, [r7, #16]
 80059da:	e011      	b.n	8005a00 <RCC_PLL_GetFreqDomain_SYS+0x90>
                                              LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80059dc:	f7ff ff14 	bl	8005808 <LL_RCC_PLL_GetDivider>
 80059e0:	4602      	mov	r2, r0
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	fbb3 f4f2 	udiv	r4, r3, r2
 80059e8:	f7ff fee4 	bl	80057b4 <LL_RCC_PLL_GetN>
 80059ec:	4603      	mov	r3, r0
 80059ee:	fb03 f404 	mul.w	r4, r3, r4
 80059f2:	f7ff fefb 	bl	80057ec <LL_RCC_PLL_GetR>
 80059f6:	4603      	mov	r3, r0
 80059f8:	0f1b      	lsrs	r3, r3, #28
 80059fa:	fbb4 f3f3 	udiv	r3, r4, r3
 80059fe:	613b      	str	r3, [r7, #16]
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8005a00:	693b      	ldr	r3, [r7, #16]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	371c      	adds	r7, #28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd90      	pop	{r4, r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	00f42400 	.word	0x00f42400

08005a10 <LL_USART_IsEnabled>:
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a24:	bf0c      	ite	eq
 8005a26:	2301      	moveq	r3, #1
 8005a28:	2300      	movne	r3, #0
 8005a2a:	b2db      	uxtb	r3, r3
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <LL_USART_SetStopBitsLength>:
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	611a      	str	r2, [r3, #16]
}
 8005a52:	bf00      	nop
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <LL_USART_SetHWFlowCtrl>:
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
 8005a66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	431a      	orrs	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	615a      	str	r2, [r3, #20]
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <LL_USART_SetBaudRate>:
{
 8005a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a88:	b0c0      	sub	sp, #256	@ 0x100
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a90:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8005a94:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8005a98:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005aa4:	f040 810c 	bne.w	8005cc0 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005aa8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005aac:	2200      	movs	r2, #0
 8005aae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ab2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005ab6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005aba:	4622      	mov	r2, r4
 8005abc:	462b      	mov	r3, r5
 8005abe:	1891      	adds	r1, r2, r2
 8005ac0:	6639      	str	r1, [r7, #96]	@ 0x60
 8005ac2:	415b      	adcs	r3, r3
 8005ac4:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ac6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8005aca:	4621      	mov	r1, r4
 8005acc:	eb12 0801 	adds.w	r8, r2, r1
 8005ad0:	4629      	mov	r1, r5
 8005ad2:	eb43 0901 	adc.w	r9, r3, r1
 8005ad6:	f04f 0200 	mov.w	r2, #0
 8005ada:	f04f 0300 	mov.w	r3, #0
 8005ade:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ae2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ae6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005aea:	4690      	mov	r8, r2
 8005aec:	4699      	mov	r9, r3
 8005aee:	4623      	mov	r3, r4
 8005af0:	eb18 0303 	adds.w	r3, r8, r3
 8005af4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005af8:	462b      	mov	r3, r5
 8005afa:	eb49 0303 	adc.w	r3, r9, r3
 8005afe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005b06:	2200      	movs	r2, #0
 8005b08:	469a      	mov	sl, r3
 8005b0a:	4693      	mov	fp, r2
 8005b0c:	eb1a 030a 	adds.w	r3, sl, sl
 8005b10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b12:	eb4b 030b 	adc.w	r3, fp, fp
 8005b16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b18:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005b1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005b20:	f7fa fea8 	bl	8000874 <__aeabi_uldivmod>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	4b64      	ldr	r3, [pc, #400]	@ (8005cbc <LL_USART_SetBaudRate+0x238>)
 8005b2a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b2e:	095b      	lsrs	r3, r3, #5
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	011b      	lsls	r3, r3, #4
 8005b34:	b29c      	uxth	r4, r3
 8005b36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b40:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005b44:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8005b48:	4642      	mov	r2, r8
 8005b4a:	464b      	mov	r3, r9
 8005b4c:	1891      	adds	r1, r2, r2
 8005b4e:	6539      	str	r1, [r7, #80]	@ 0x50
 8005b50:	415b      	adcs	r3, r3
 8005b52:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005b58:	4641      	mov	r1, r8
 8005b5a:	1851      	adds	r1, r2, r1
 8005b5c:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b5e:	4649      	mov	r1, r9
 8005b60:	414b      	adcs	r3, r1
 8005b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b64:	f04f 0200 	mov.w	r2, #0
 8005b68:	f04f 0300 	mov.w	r3, #0
 8005b6c:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8005b70:	4659      	mov	r1, fp
 8005b72:	00cb      	lsls	r3, r1, #3
 8005b74:	4651      	mov	r1, sl
 8005b76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b7a:	4651      	mov	r1, sl
 8005b7c:	00ca      	lsls	r2, r1, #3
 8005b7e:	4610      	mov	r0, r2
 8005b80:	4619      	mov	r1, r3
 8005b82:	4603      	mov	r3, r0
 8005b84:	4642      	mov	r2, r8
 8005b86:	189b      	adds	r3, r3, r2
 8005b88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b8c:	464b      	mov	r3, r9
 8005b8e:	460a      	mov	r2, r1
 8005b90:	eb42 0303 	adc.w	r3, r2, r3
 8005b94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005b98:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ba2:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8005ba6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005baa:	460b      	mov	r3, r1
 8005bac:	18db      	adds	r3, r3, r3
 8005bae:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	eb42 0303 	adc.w	r3, r2, r3
 8005bb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bb8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005bbc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8005bc0:	f7fa fe58 	bl	8000874 <__aeabi_uldivmod>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	4611      	mov	r1, r2
 8005bca:	4b3c      	ldr	r3, [pc, #240]	@ (8005cbc <LL_USART_SetBaudRate+0x238>)
 8005bcc:	fba3 2301 	umull	r2, r3, r3, r1
 8005bd0:	095b      	lsrs	r3, r3, #5
 8005bd2:	2264      	movs	r2, #100	@ 0x64
 8005bd4:	fb02 f303 	mul.w	r3, r2, r3
 8005bd8:	1acb      	subs	r3, r1, r3
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005be0:	4b36      	ldr	r3, [pc, #216]	@ (8005cbc <LL_USART_SetBaudRate+0x238>)
 8005be2:	fba3 2302 	umull	r2, r3, r3, r2
 8005be6:	095b      	lsrs	r3, r3, #5
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	4423      	add	r3, r4
 8005bf6:	b29c      	uxth	r4, r3
 8005bf8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c02:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005c06:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8005c0a:	4642      	mov	r2, r8
 8005c0c:	464b      	mov	r3, r9
 8005c0e:	1891      	adds	r1, r2, r2
 8005c10:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005c12:	415b      	adcs	r3, r3
 8005c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c16:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005c1a:	4641      	mov	r1, r8
 8005c1c:	1851      	adds	r1, r2, r1
 8005c1e:	6339      	str	r1, [r7, #48]	@ 0x30
 8005c20:	4649      	mov	r1, r9
 8005c22:	414b      	adcs	r3, r1
 8005c24:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c26:	f04f 0200 	mov.w	r2, #0
 8005c2a:	f04f 0300 	mov.w	r3, #0
 8005c2e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005c32:	4659      	mov	r1, fp
 8005c34:	00cb      	lsls	r3, r1, #3
 8005c36:	4651      	mov	r1, sl
 8005c38:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c3c:	4651      	mov	r1, sl
 8005c3e:	00ca      	lsls	r2, r1, #3
 8005c40:	4610      	mov	r0, r2
 8005c42:	4619      	mov	r1, r3
 8005c44:	4603      	mov	r3, r0
 8005c46:	4642      	mov	r2, r8
 8005c48:	189b      	adds	r3, r3, r2
 8005c4a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c4e:	464b      	mov	r3, r9
 8005c50:	460a      	mov	r2, r1
 8005c52:	eb42 0303 	adc.w	r3, r2, r3
 8005c56:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005c5a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c64:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8005c68:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	18db      	adds	r3, r3, r3
 8005c70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c72:	4613      	mov	r3, r2
 8005c74:	eb42 0303 	adc.w	r3, r2, r3
 8005c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c7e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8005c82:	f7fa fdf7 	bl	8000874 <__aeabi_uldivmod>
 8005c86:	4602      	mov	r2, r0
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8005cbc <LL_USART_SetBaudRate+0x238>)
 8005c8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c90:	095b      	lsrs	r3, r3, #5
 8005c92:	2164      	movs	r1, #100	@ 0x64
 8005c94:	fb01 f303 	mul.w	r3, r1, r3
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	00db      	lsls	r3, r3, #3
 8005c9c:	3332      	adds	r3, #50	@ 0x32
 8005c9e:	4a07      	ldr	r2, [pc, #28]	@ (8005cbc <LL_USART_SetBaudRate+0x238>)
 8005ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca4:	095b      	lsrs	r3, r3, #5
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	4423      	add	r3, r4
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cb8:	609a      	str	r2, [r3, #8]
}
 8005cba:	e108      	b.n	8005ece <LL_USART_SetBaudRate+0x44a>
 8005cbc:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005cc0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005cca:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005cce:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8005cd2:	4642      	mov	r2, r8
 8005cd4:	464b      	mov	r3, r9
 8005cd6:	1891      	adds	r1, r2, r2
 8005cd8:	6239      	str	r1, [r7, #32]
 8005cda:	415b      	adcs	r3, r3
 8005cdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ce2:	4641      	mov	r1, r8
 8005ce4:	1854      	adds	r4, r2, r1
 8005ce6:	4649      	mov	r1, r9
 8005ce8:	eb43 0501 	adc.w	r5, r3, r1
 8005cec:	f04f 0200 	mov.w	r2, #0
 8005cf0:	f04f 0300 	mov.w	r3, #0
 8005cf4:	00eb      	lsls	r3, r5, #3
 8005cf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cfa:	00e2      	lsls	r2, r4, #3
 8005cfc:	4614      	mov	r4, r2
 8005cfe:	461d      	mov	r5, r3
 8005d00:	4643      	mov	r3, r8
 8005d02:	18e3      	adds	r3, r4, r3
 8005d04:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d08:	464b      	mov	r3, r9
 8005d0a:	eb45 0303 	adc.w	r3, r5, r3
 8005d0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005d12:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d16:	2200      	movs	r2, #0
 8005d18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d1c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005d20:	f04f 0200 	mov.w	r2, #0
 8005d24:	f04f 0300 	mov.w	r3, #0
 8005d28:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8005d2c:	4629      	mov	r1, r5
 8005d2e:	008b      	lsls	r3, r1, #2
 8005d30:	4621      	mov	r1, r4
 8005d32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d36:	4621      	mov	r1, r4
 8005d38:	008a      	lsls	r2, r1, #2
 8005d3a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8005d3e:	f7fa fd99 	bl	8000874 <__aeabi_uldivmod>
 8005d42:	4602      	mov	r2, r0
 8005d44:	460b      	mov	r3, r1
 8005d46:	4b65      	ldr	r3, [pc, #404]	@ (8005edc <LL_USART_SetBaudRate+0x458>)
 8005d48:	fba3 2302 	umull	r2, r3, r3, r2
 8005d4c:	095b      	lsrs	r3, r3, #5
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	b29c      	uxth	r4, r3
 8005d54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d62:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8005d66:	4642      	mov	r2, r8
 8005d68:	464b      	mov	r3, r9
 8005d6a:	1891      	adds	r1, r2, r2
 8005d6c:	61b9      	str	r1, [r7, #24]
 8005d6e:	415b      	adcs	r3, r3
 8005d70:	61fb      	str	r3, [r7, #28]
 8005d72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d76:	4641      	mov	r1, r8
 8005d78:	1851      	adds	r1, r2, r1
 8005d7a:	6139      	str	r1, [r7, #16]
 8005d7c:	4649      	mov	r1, r9
 8005d7e:	414b      	adcs	r3, r1
 8005d80:	617b      	str	r3, [r7, #20]
 8005d82:	f04f 0200 	mov.w	r2, #0
 8005d86:	f04f 0300 	mov.w	r3, #0
 8005d8a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d8e:	4659      	mov	r1, fp
 8005d90:	00cb      	lsls	r3, r1, #3
 8005d92:	4651      	mov	r1, sl
 8005d94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d98:	4651      	mov	r1, sl
 8005d9a:	00ca      	lsls	r2, r1, #3
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	4619      	mov	r1, r3
 8005da0:	4603      	mov	r3, r0
 8005da2:	4642      	mov	r2, r8
 8005da4:	189b      	adds	r3, r3, r2
 8005da6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005daa:	464b      	mov	r3, r9
 8005dac:	460a      	mov	r2, r1
 8005dae:	eb42 0303 	adc.w	r3, r2, r3
 8005db2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005db6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005dc0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005dc4:	f04f 0200 	mov.w	r2, #0
 8005dc8:	f04f 0300 	mov.w	r3, #0
 8005dcc:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8005dd0:	4649      	mov	r1, r9
 8005dd2:	008b      	lsls	r3, r1, #2
 8005dd4:	4641      	mov	r1, r8
 8005dd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dda:	4641      	mov	r1, r8
 8005ddc:	008a      	lsls	r2, r1, #2
 8005dde:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8005de2:	f7fa fd47 	bl	8000874 <__aeabi_uldivmod>
 8005de6:	4602      	mov	r2, r0
 8005de8:	460b      	mov	r3, r1
 8005dea:	4611      	mov	r1, r2
 8005dec:	4b3b      	ldr	r3, [pc, #236]	@ (8005edc <LL_USART_SetBaudRate+0x458>)
 8005dee:	fba3 2301 	umull	r2, r3, r3, r1
 8005df2:	095b      	lsrs	r3, r3, #5
 8005df4:	2264      	movs	r2, #100	@ 0x64
 8005df6:	fb02 f303 	mul.w	r3, r2, r3
 8005dfa:	1acb      	subs	r3, r1, r3
 8005dfc:	011b      	lsls	r3, r3, #4
 8005dfe:	3332      	adds	r3, #50	@ 0x32
 8005e00:	4a36      	ldr	r2, [pc, #216]	@ (8005edc <LL_USART_SetBaudRate+0x458>)
 8005e02:	fba2 2303 	umull	r2, r3, r2, r3
 8005e06:	095b      	lsrs	r3, r3, #5
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	4423      	add	r3, r4
 8005e12:	b29c      	uxth	r4, r3
 8005e14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e18:	2200      	movs	r2, #0
 8005e1a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e1c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005e1e:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005e22:	4642      	mov	r2, r8
 8005e24:	464b      	mov	r3, r9
 8005e26:	1891      	adds	r1, r2, r2
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	415b      	adcs	r3, r3
 8005e2c:	60fb      	str	r3, [r7, #12]
 8005e2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e32:	4641      	mov	r1, r8
 8005e34:	1851      	adds	r1, r2, r1
 8005e36:	6039      	str	r1, [r7, #0]
 8005e38:	4649      	mov	r1, r9
 8005e3a:	414b      	adcs	r3, r1
 8005e3c:	607b      	str	r3, [r7, #4]
 8005e3e:	f04f 0200 	mov.w	r2, #0
 8005e42:	f04f 0300 	mov.w	r3, #0
 8005e46:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e4a:	4659      	mov	r1, fp
 8005e4c:	00cb      	lsls	r3, r1, #3
 8005e4e:	4651      	mov	r1, sl
 8005e50:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e54:	4651      	mov	r1, sl
 8005e56:	00ca      	lsls	r2, r1, #3
 8005e58:	4610      	mov	r0, r2
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	4642      	mov	r2, r8
 8005e60:	189b      	adds	r3, r3, r2
 8005e62:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e64:	464b      	mov	r3, r9
 8005e66:	460a      	mov	r2, r1
 8005e68:	eb42 0303 	adc.w	r3, r2, r3
 8005e6c:	677b      	str	r3, [r7, #116]	@ 0x74
 8005e6e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005e72:	2200      	movs	r2, #0
 8005e74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005e78:	f04f 0200 	mov.w	r2, #0
 8005e7c:	f04f 0300 	mov.w	r3, #0
 8005e80:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8005e84:	4649      	mov	r1, r9
 8005e86:	008b      	lsls	r3, r1, #2
 8005e88:	4641      	mov	r1, r8
 8005e8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e8e:	4641      	mov	r1, r8
 8005e90:	008a      	lsls	r2, r1, #2
 8005e92:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8005e96:	f7fa fced 	bl	8000874 <__aeabi_uldivmod>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8005edc <LL_USART_SetBaudRate+0x458>)
 8005ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ea4:	095b      	lsrs	r3, r3, #5
 8005ea6:	2164      	movs	r1, #100	@ 0x64
 8005ea8:	fb01 f303 	mul.w	r3, r1, r3
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	011b      	lsls	r3, r3, #4
 8005eb0:	3332      	adds	r3, #50	@ 0x32
 8005eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8005edc <LL_USART_SetBaudRate+0x458>)
 8005eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb8:	095b      	lsrs	r3, r3, #5
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	f003 030f 	and.w	r3, r3, #15
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	4423      	add	r3, r4
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ecc:	609a      	str	r2, [r3, #8]
}
 8005ece:	bf00      	nop
 8005ed0:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005eda:	bf00      	nop
 8005edc:	51eb851f 	.word	0x51eb851f

08005ee0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b088      	sub	sp, #32
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7ff fd8c 	bl	8005a10 <LL_USART_IsEnabled>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d15e      	bne.n	8005fbc <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8005f06:	f023 030c 	bic.w	r3, r3, #12
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	6851      	ldr	r1, [r2, #4]
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	68d2      	ldr	r2, [r2, #12]
 8005f12:	4311      	orrs	r1, r2
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	6912      	ldr	r2, [r2, #16]
 8005f18:	4311      	orrs	r1, r2
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	6992      	ldr	r2, [r2, #24]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	431a      	orrs	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7ff fd83 	bl	8005a38 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	4619      	mov	r1, r3
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7ff fd90 	bl	8005a5e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005f3e:	f107 0308 	add.w	r3, r7, #8
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7ff fc6e 	bl	8005824 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a1f      	ldr	r2, [pc, #124]	@ (8005fc8 <LL_USART_Init+0xe8>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d102      	bne.n	8005f56 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	61bb      	str	r3, [r7, #24]
 8005f54:	e021      	b.n	8005f9a <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a1c      	ldr	r2, [pc, #112]	@ (8005fcc <LL_USART_Init+0xec>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d102      	bne.n	8005f64 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	61bb      	str	r3, [r7, #24]
 8005f62:	e01a      	b.n	8005f9a <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a1a      	ldr	r2, [pc, #104]	@ (8005fd0 <LL_USART_Init+0xf0>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d102      	bne.n	8005f72 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	61bb      	str	r3, [r7, #24]
 8005f70:	e013      	b.n	8005f9a <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a17      	ldr	r2, [pc, #92]	@ (8005fd4 <LL_USART_Init+0xf4>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d102      	bne.n	8005f80 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	61bb      	str	r3, [r7, #24]
 8005f7e:	e00c      	b.n	8005f9a <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a15      	ldr	r2, [pc, #84]	@ (8005fd8 <LL_USART_Init+0xf8>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d102      	bne.n	8005f8e <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	61bb      	str	r3, [r7, #24]
 8005f8c:	e005      	b.n	8005f9a <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a12      	ldr	r2, [pc, #72]	@ (8005fdc <LL_USART_Init+0xfc>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d101      	bne.n	8005f9a <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00d      	beq.n	8005fbc <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d009      	beq.n	8005fbc <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8005fb4:	69b9      	ldr	r1, [r7, #24]
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7ff fd64 	bl	8005a84 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005fbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3720      	adds	r7, #32
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	40011000 	.word	0x40011000
 8005fcc:	40004400 	.word	0x40004400
 8005fd0:	40004800 	.word	0x40004800
 8005fd4:	40011400 	.word	0x40011400
 8005fd8:	40004c00 	.word	0x40004c00
 8005fdc:	40005000 	.word	0x40005000

08005fe0 <memset>:
 8005fe0:	4402      	add	r2, r0
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d100      	bne.n	8005fea <memset+0xa>
 8005fe8:	4770      	bx	lr
 8005fea:	f803 1b01 	strb.w	r1, [r3], #1
 8005fee:	e7f9      	b.n	8005fe4 <memset+0x4>

08005ff0 <__libc_init_array>:
 8005ff0:	b570      	push	{r4, r5, r6, lr}
 8005ff2:	4d0d      	ldr	r5, [pc, #52]	@ (8006028 <__libc_init_array+0x38>)
 8005ff4:	4c0d      	ldr	r4, [pc, #52]	@ (800602c <__libc_init_array+0x3c>)
 8005ff6:	1b64      	subs	r4, r4, r5
 8005ff8:	10a4      	asrs	r4, r4, #2
 8005ffa:	2600      	movs	r6, #0
 8005ffc:	42a6      	cmp	r6, r4
 8005ffe:	d109      	bne.n	8006014 <__libc_init_array+0x24>
 8006000:	4d0b      	ldr	r5, [pc, #44]	@ (8006030 <__libc_init_array+0x40>)
 8006002:	4c0c      	ldr	r4, [pc, #48]	@ (8006034 <__libc_init_array+0x44>)
 8006004:	f000 f826 	bl	8006054 <_init>
 8006008:	1b64      	subs	r4, r4, r5
 800600a:	10a4      	asrs	r4, r4, #2
 800600c:	2600      	movs	r6, #0
 800600e:	42a6      	cmp	r6, r4
 8006010:	d105      	bne.n	800601e <__libc_init_array+0x2e>
 8006012:	bd70      	pop	{r4, r5, r6, pc}
 8006014:	f855 3b04 	ldr.w	r3, [r5], #4
 8006018:	4798      	blx	r3
 800601a:	3601      	adds	r6, #1
 800601c:	e7ee      	b.n	8005ffc <__libc_init_array+0xc>
 800601e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006022:	4798      	blx	r3
 8006024:	3601      	adds	r6, #1
 8006026:	e7f2      	b.n	800600e <__libc_init_array+0x1e>
 8006028:	080062ac 	.word	0x080062ac
 800602c:	080062ac 	.word	0x080062ac
 8006030:	080062ac 	.word	0x080062ac
 8006034:	080062b0 	.word	0x080062b0

08006038 <memcpy>:
 8006038:	440a      	add	r2, r1
 800603a:	4291      	cmp	r1, r2
 800603c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006040:	d100      	bne.n	8006044 <memcpy+0xc>
 8006042:	4770      	bx	lr
 8006044:	b510      	push	{r4, lr}
 8006046:	f811 4b01 	ldrb.w	r4, [r1], #1
 800604a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800604e:	4291      	cmp	r1, r2
 8006050:	d1f9      	bne.n	8006046 <memcpy+0xe>
 8006052:	bd10      	pop	{r4, pc}

08006054 <_init>:
 8006054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006056:	bf00      	nop
 8006058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800605a:	bc08      	pop	{r3}
 800605c:	469e      	mov	lr, r3
 800605e:	4770      	bx	lr

08006060 <_fini>:
 8006060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006062:	bf00      	nop
 8006064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006066:	bc08      	pop	{r3}
 8006068:	469e      	mov	lr, r3
 800606a:	4770      	bx	lr
