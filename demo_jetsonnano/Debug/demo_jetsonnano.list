
demo_jetsonnano.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e4c  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08006014  08006014  00007014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800624c  0800624c  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  0800624c  0800624c  0000724c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006254  08006254  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006254  08006254  00007254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006258  08006258  00007258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800625c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  2000000c  08006268  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08006268  00008298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116ec  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003191  00000000  00000000  00019728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  0001c8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d69  00000000  00000000  0001da58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026332  00000000  00000000  0001e7c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015460  00000000  00000000  00044af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e90fe  00000000  00000000  00059f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00143051  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049dc  00000000  00000000  00143094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00147a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005ffc 	.word	0x08005ffc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08005ffc 	.word	0x08005ffc

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	@ 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__aeabi_d2iz>:
 80007d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007dc:	d215      	bcs.n	800080a <__aeabi_d2iz+0x36>
 80007de:	d511      	bpl.n	8000804 <__aeabi_d2iz+0x30>
 80007e0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007e8:	d912      	bls.n	8000810 <__aeabi_d2iz+0x3c>
 80007ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007f6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007fa:	fa23 f002 	lsr.w	r0, r3, r2
 80007fe:	bf18      	it	ne
 8000800:	4240      	negne	r0, r0
 8000802:	4770      	bx	lr
 8000804:	f04f 0000 	mov.w	r0, #0
 8000808:	4770      	bx	lr
 800080a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800080e:	d105      	bne.n	800081c <__aeabi_d2iz+0x48>
 8000810:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000814:	bf08      	it	eq
 8000816:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800081a:	4770      	bx	lr
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop

08000824 <__aeabi_uldivmod>:
 8000824:	b953      	cbnz	r3, 800083c <__aeabi_uldivmod+0x18>
 8000826:	b94a      	cbnz	r2, 800083c <__aeabi_uldivmod+0x18>
 8000828:	2900      	cmp	r1, #0
 800082a:	bf08      	it	eq
 800082c:	2800      	cmpeq	r0, #0
 800082e:	bf1c      	itt	ne
 8000830:	f04f 31ff 	movne.w	r1, #4294967295
 8000834:	f04f 30ff 	movne.w	r0, #4294967295
 8000838:	f000 b96a 	b.w	8000b10 <__aeabi_idiv0>
 800083c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000840:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000844:	f000 f806 	bl	8000854 <__udivmoddi4>
 8000848:	f8dd e004 	ldr.w	lr, [sp, #4]
 800084c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000850:	b004      	add	sp, #16
 8000852:	4770      	bx	lr

08000854 <__udivmoddi4>:
 8000854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000858:	9d08      	ldr	r5, [sp, #32]
 800085a:	460c      	mov	r4, r1
 800085c:	2b00      	cmp	r3, #0
 800085e:	d14e      	bne.n	80008fe <__udivmoddi4+0xaa>
 8000860:	4694      	mov	ip, r2
 8000862:	458c      	cmp	ip, r1
 8000864:	4686      	mov	lr, r0
 8000866:	fab2 f282 	clz	r2, r2
 800086a:	d962      	bls.n	8000932 <__udivmoddi4+0xde>
 800086c:	b14a      	cbz	r2, 8000882 <__udivmoddi4+0x2e>
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	4091      	lsls	r1, r2
 8000874:	fa20 f303 	lsr.w	r3, r0, r3
 8000878:	fa0c fc02 	lsl.w	ip, ip, r2
 800087c:	4319      	orrs	r1, r3
 800087e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000882:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000886:	fa1f f68c 	uxth.w	r6, ip
 800088a:	fbb1 f4f7 	udiv	r4, r1, r7
 800088e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000892:	fb07 1114 	mls	r1, r7, r4, r1
 8000896:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800089a:	fb04 f106 	mul.w	r1, r4, r6
 800089e:	4299      	cmp	r1, r3
 80008a0:	d90a      	bls.n	80008b8 <__udivmoddi4+0x64>
 80008a2:	eb1c 0303 	adds.w	r3, ip, r3
 80008a6:	f104 30ff 	add.w	r0, r4, #4294967295
 80008aa:	f080 8112 	bcs.w	8000ad2 <__udivmoddi4+0x27e>
 80008ae:	4299      	cmp	r1, r3
 80008b0:	f240 810f 	bls.w	8000ad2 <__udivmoddi4+0x27e>
 80008b4:	3c02      	subs	r4, #2
 80008b6:	4463      	add	r3, ip
 80008b8:	1a59      	subs	r1, r3, r1
 80008ba:	fa1f f38e 	uxth.w	r3, lr
 80008be:	fbb1 f0f7 	udiv	r0, r1, r7
 80008c2:	fb07 1110 	mls	r1, r7, r0, r1
 80008c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ca:	fb00 f606 	mul.w	r6, r0, r6
 80008ce:	429e      	cmp	r6, r3
 80008d0:	d90a      	bls.n	80008e8 <__udivmoddi4+0x94>
 80008d2:	eb1c 0303 	adds.w	r3, ip, r3
 80008d6:	f100 31ff 	add.w	r1, r0, #4294967295
 80008da:	f080 80fc 	bcs.w	8000ad6 <__udivmoddi4+0x282>
 80008de:	429e      	cmp	r6, r3
 80008e0:	f240 80f9 	bls.w	8000ad6 <__udivmoddi4+0x282>
 80008e4:	4463      	add	r3, ip
 80008e6:	3802      	subs	r0, #2
 80008e8:	1b9b      	subs	r3, r3, r6
 80008ea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008ee:	2100      	movs	r1, #0
 80008f0:	b11d      	cbz	r5, 80008fa <__udivmoddi4+0xa6>
 80008f2:	40d3      	lsrs	r3, r2
 80008f4:	2200      	movs	r2, #0
 80008f6:	e9c5 3200 	strd	r3, r2, [r5]
 80008fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008fe:	428b      	cmp	r3, r1
 8000900:	d905      	bls.n	800090e <__udivmoddi4+0xba>
 8000902:	b10d      	cbz	r5, 8000908 <__udivmoddi4+0xb4>
 8000904:	e9c5 0100 	strd	r0, r1, [r5]
 8000908:	2100      	movs	r1, #0
 800090a:	4608      	mov	r0, r1
 800090c:	e7f5      	b.n	80008fa <__udivmoddi4+0xa6>
 800090e:	fab3 f183 	clz	r1, r3
 8000912:	2900      	cmp	r1, #0
 8000914:	d146      	bne.n	80009a4 <__udivmoddi4+0x150>
 8000916:	42a3      	cmp	r3, r4
 8000918:	d302      	bcc.n	8000920 <__udivmoddi4+0xcc>
 800091a:	4290      	cmp	r0, r2
 800091c:	f0c0 80f0 	bcc.w	8000b00 <__udivmoddi4+0x2ac>
 8000920:	1a86      	subs	r6, r0, r2
 8000922:	eb64 0303 	sbc.w	r3, r4, r3
 8000926:	2001      	movs	r0, #1
 8000928:	2d00      	cmp	r5, #0
 800092a:	d0e6      	beq.n	80008fa <__udivmoddi4+0xa6>
 800092c:	e9c5 6300 	strd	r6, r3, [r5]
 8000930:	e7e3      	b.n	80008fa <__udivmoddi4+0xa6>
 8000932:	2a00      	cmp	r2, #0
 8000934:	f040 8090 	bne.w	8000a58 <__udivmoddi4+0x204>
 8000938:	eba1 040c 	sub.w	r4, r1, ip
 800093c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000940:	fa1f f78c 	uxth.w	r7, ip
 8000944:	2101      	movs	r1, #1
 8000946:	fbb4 f6f8 	udiv	r6, r4, r8
 800094a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800094e:	fb08 4416 	mls	r4, r8, r6, r4
 8000952:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000956:	fb07 f006 	mul.w	r0, r7, r6
 800095a:	4298      	cmp	r0, r3
 800095c:	d908      	bls.n	8000970 <__udivmoddi4+0x11c>
 800095e:	eb1c 0303 	adds.w	r3, ip, r3
 8000962:	f106 34ff 	add.w	r4, r6, #4294967295
 8000966:	d202      	bcs.n	800096e <__udivmoddi4+0x11a>
 8000968:	4298      	cmp	r0, r3
 800096a:	f200 80cd 	bhi.w	8000b08 <__udivmoddi4+0x2b4>
 800096e:	4626      	mov	r6, r4
 8000970:	1a1c      	subs	r4, r3, r0
 8000972:	fa1f f38e 	uxth.w	r3, lr
 8000976:	fbb4 f0f8 	udiv	r0, r4, r8
 800097a:	fb08 4410 	mls	r4, r8, r0, r4
 800097e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000982:	fb00 f707 	mul.w	r7, r0, r7
 8000986:	429f      	cmp	r7, r3
 8000988:	d908      	bls.n	800099c <__udivmoddi4+0x148>
 800098a:	eb1c 0303 	adds.w	r3, ip, r3
 800098e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000992:	d202      	bcs.n	800099a <__udivmoddi4+0x146>
 8000994:	429f      	cmp	r7, r3
 8000996:	f200 80b0 	bhi.w	8000afa <__udivmoddi4+0x2a6>
 800099a:	4620      	mov	r0, r4
 800099c:	1bdb      	subs	r3, r3, r7
 800099e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009a2:	e7a5      	b.n	80008f0 <__udivmoddi4+0x9c>
 80009a4:	f1c1 0620 	rsb	r6, r1, #32
 80009a8:	408b      	lsls	r3, r1
 80009aa:	fa22 f706 	lsr.w	r7, r2, r6
 80009ae:	431f      	orrs	r7, r3
 80009b0:	fa20 fc06 	lsr.w	ip, r0, r6
 80009b4:	fa04 f301 	lsl.w	r3, r4, r1
 80009b8:	ea43 030c 	orr.w	r3, r3, ip
 80009bc:	40f4      	lsrs	r4, r6
 80009be:	fa00 f801 	lsl.w	r8, r0, r1
 80009c2:	0c38      	lsrs	r0, r7, #16
 80009c4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009c8:	fbb4 fef0 	udiv	lr, r4, r0
 80009cc:	fa1f fc87 	uxth.w	ip, r7
 80009d0:	fb00 441e 	mls	r4, r0, lr, r4
 80009d4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009d8:	fb0e f90c 	mul.w	r9, lr, ip
 80009dc:	45a1      	cmp	r9, r4
 80009de:	fa02 f201 	lsl.w	r2, r2, r1
 80009e2:	d90a      	bls.n	80009fa <__udivmoddi4+0x1a6>
 80009e4:	193c      	adds	r4, r7, r4
 80009e6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009ea:	f080 8084 	bcs.w	8000af6 <__udivmoddi4+0x2a2>
 80009ee:	45a1      	cmp	r9, r4
 80009f0:	f240 8081 	bls.w	8000af6 <__udivmoddi4+0x2a2>
 80009f4:	f1ae 0e02 	sub.w	lr, lr, #2
 80009f8:	443c      	add	r4, r7
 80009fa:	eba4 0409 	sub.w	r4, r4, r9
 80009fe:	fa1f f983 	uxth.w	r9, r3
 8000a02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a06:	fb00 4413 	mls	r4, r0, r3, r4
 8000a0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a12:	45a4      	cmp	ip, r4
 8000a14:	d907      	bls.n	8000a26 <__udivmoddi4+0x1d2>
 8000a16:	193c      	adds	r4, r7, r4
 8000a18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a1c:	d267      	bcs.n	8000aee <__udivmoddi4+0x29a>
 8000a1e:	45a4      	cmp	ip, r4
 8000a20:	d965      	bls.n	8000aee <__udivmoddi4+0x29a>
 8000a22:	3b02      	subs	r3, #2
 8000a24:	443c      	add	r4, r7
 8000a26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000a2e:	eba4 040c 	sub.w	r4, r4, ip
 8000a32:	429c      	cmp	r4, r3
 8000a34:	46ce      	mov	lr, r9
 8000a36:	469c      	mov	ip, r3
 8000a38:	d351      	bcc.n	8000ade <__udivmoddi4+0x28a>
 8000a3a:	d04e      	beq.n	8000ada <__udivmoddi4+0x286>
 8000a3c:	b155      	cbz	r5, 8000a54 <__udivmoddi4+0x200>
 8000a3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000a42:	eb64 040c 	sbc.w	r4, r4, ip
 8000a46:	fa04 f606 	lsl.w	r6, r4, r6
 8000a4a:	40cb      	lsrs	r3, r1
 8000a4c:	431e      	orrs	r6, r3
 8000a4e:	40cc      	lsrs	r4, r1
 8000a50:	e9c5 6400 	strd	r6, r4, [r5]
 8000a54:	2100      	movs	r1, #0
 8000a56:	e750      	b.n	80008fa <__udivmoddi4+0xa6>
 8000a58:	f1c2 0320 	rsb	r3, r2, #32
 8000a5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000a60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a64:	fa24 f303 	lsr.w	r3, r4, r3
 8000a68:	4094      	lsls	r4, r2
 8000a6a:	430c      	orrs	r4, r1
 8000a6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a74:	fa1f f78c 	uxth.w	r7, ip
 8000a78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000a80:	0c23      	lsrs	r3, r4, #16
 8000a82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a86:	fb00 f107 	mul.w	r1, r0, r7
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	d908      	bls.n	8000aa0 <__udivmoddi4+0x24c>
 8000a8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a92:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a96:	d22c      	bcs.n	8000af2 <__udivmoddi4+0x29e>
 8000a98:	4299      	cmp	r1, r3
 8000a9a:	d92a      	bls.n	8000af2 <__udivmoddi4+0x29e>
 8000a9c:	3802      	subs	r0, #2
 8000a9e:	4463      	add	r3, ip
 8000aa0:	1a5b      	subs	r3, r3, r1
 8000aa2:	b2a4      	uxth	r4, r4
 8000aa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000aa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000aac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab0:	fb01 f307 	mul.w	r3, r1, r7
 8000ab4:	42a3      	cmp	r3, r4
 8000ab6:	d908      	bls.n	8000aca <__udivmoddi4+0x276>
 8000ab8:	eb1c 0404 	adds.w	r4, ip, r4
 8000abc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ac0:	d213      	bcs.n	8000aea <__udivmoddi4+0x296>
 8000ac2:	42a3      	cmp	r3, r4
 8000ac4:	d911      	bls.n	8000aea <__udivmoddi4+0x296>
 8000ac6:	3902      	subs	r1, #2
 8000ac8:	4464      	add	r4, ip
 8000aca:	1ae4      	subs	r4, r4, r3
 8000acc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ad0:	e739      	b.n	8000946 <__udivmoddi4+0xf2>
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	e6f0      	b.n	80008b8 <__udivmoddi4+0x64>
 8000ad6:	4608      	mov	r0, r1
 8000ad8:	e706      	b.n	80008e8 <__udivmoddi4+0x94>
 8000ada:	45c8      	cmp	r8, r9
 8000adc:	d2ae      	bcs.n	8000a3c <__udivmoddi4+0x1e8>
 8000ade:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ae2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ae6:	3801      	subs	r0, #1
 8000ae8:	e7a8      	b.n	8000a3c <__udivmoddi4+0x1e8>
 8000aea:	4631      	mov	r1, r6
 8000aec:	e7ed      	b.n	8000aca <__udivmoddi4+0x276>
 8000aee:	4603      	mov	r3, r0
 8000af0:	e799      	b.n	8000a26 <__udivmoddi4+0x1d2>
 8000af2:	4630      	mov	r0, r6
 8000af4:	e7d4      	b.n	8000aa0 <__udivmoddi4+0x24c>
 8000af6:	46d6      	mov	lr, sl
 8000af8:	e77f      	b.n	80009fa <__udivmoddi4+0x1a6>
 8000afa:	4463      	add	r3, ip
 8000afc:	3802      	subs	r0, #2
 8000afe:	e74d      	b.n	800099c <__udivmoddi4+0x148>
 8000b00:	4606      	mov	r6, r0
 8000b02:	4623      	mov	r3, r4
 8000b04:	4608      	mov	r0, r1
 8000b06:	e70f      	b.n	8000928 <__udivmoddi4+0xd4>
 8000b08:	3e02      	subs	r6, #2
 8000b0a:	4463      	add	r3, ip
 8000b0c:	e730      	b.n	8000970 <__udivmoddi4+0x11c>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_idiv0>:
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b26:	4b30      	ldr	r3, [pc, #192]	@ (8000be8 <MX_ADC1_Init+0xd4>)
 8000b28:	4a30      	ldr	r2, [pc, #192]	@ (8000bec <MX_ADC1_Init+0xd8>)
 8000b2a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b2c:	4b2e      	ldr	r3, [pc, #184]	@ (8000be8 <MX_ADC1_Init+0xd4>)
 8000b2e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b32:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b34:	4b2c      	ldr	r3, [pc, #176]	@ (8000be8 <MX_ADC1_Init+0xd4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000b3a:	4b2b      	ldr	r3, [pc, #172]	@ (8000be8 <MX_ADC1_Init+0xd4>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b40:	4b29      	ldr	r3, [pc, #164]	@ (8000be8 <MX_ADC1_Init+0xd4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b46:	4b28      	ldr	r3, [pc, #160]	@ (8000be8 <MX_ADC1_Init+0xd4>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b4e:	4b26      	ldr	r3, [pc, #152]	@ (8000be8 <MX_ADC1_Init+0xd4>)
 8000b50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b54:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000b56:	4b24      	ldr	r3, [pc, #144]	@ (8000be8 <MX_ADC1_Init+0xd4>)
 8000b58:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000b5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b5e:	4b22      	ldr	r3, [pc, #136]	@ (8000be8 <MX_ADC1_Init+0xd4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000b64:	4b20      	ldr	r3, [pc, #128]	@ (8000be8 <MX_ADC1_Init+0xd4>)
 8000b66:	2203      	movs	r2, #3
 8000b68:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000be8 <MX_ADC1_Init+0xd4>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b72:	4b1d      	ldr	r3, [pc, #116]	@ (8000be8 <MX_ADC1_Init+0xd4>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b78:	481b      	ldr	r0, [pc, #108]	@ (8000be8 <MX_ADC1_Init+0xd4>)
 8000b7a:	f001 fdef 	bl	800275c <HAL_ADC_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000b84:	f000 ff64 	bl	8001a50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000b90:	2301      	movs	r3, #1
 8000b92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b94:	463b      	mov	r3, r7
 8000b96:	4619      	mov	r1, r3
 8000b98:	4813      	ldr	r0, [pc, #76]	@ (8000be8 <MX_ADC1_Init+0xd4>)
 8000b9a:	f002 f861 	bl	8002c60 <HAL_ADC_ConfigChannel>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000ba4:	f000 ff54 	bl	8001a50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000bac:	2302      	movs	r3, #2
 8000bae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	480c      	ldr	r0, [pc, #48]	@ (8000be8 <MX_ADC1_Init+0xd4>)
 8000bb6:	f002 f853 	bl	8002c60 <HAL_ADC_ConfigChannel>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000bc0:	f000 ff46 	bl	8001a50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bcc:	463b      	mov	r3, r7
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <MX_ADC1_Init+0xd4>)
 8000bd2:	f002 f845 	bl	8002c60 <HAL_ADC_ConfigChannel>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000bdc:	f000 ff38 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000028 	.word	0x20000028
 8000bec:	40012000 	.word	0x40012000

08000bf0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	@ 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a33      	ldr	r2, [pc, #204]	@ (8000cdc <HAL_ADC_MspInit+0xec>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d15f      	bne.n	8000cd2 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b32      	ldr	r3, [pc, #200]	@ (8000ce0 <HAL_ADC_MspInit+0xf0>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1a:	4a31      	ldr	r2, [pc, #196]	@ (8000ce0 <HAL_ADC_MspInit+0xf0>)
 8000c1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c22:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce0 <HAL_ADC_MspInit+0xf0>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce0 <HAL_ADC_MspInit+0xf0>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	4a2a      	ldr	r2, [pc, #168]	@ (8000ce0 <HAL_ADC_MspInit+0xf0>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3e:	4b28      	ldr	r3, [pc, #160]	@ (8000ce0 <HAL_ADC_MspInit+0xf0>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000c4a:	2307      	movs	r3, #7
 8000c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4821      	ldr	r0, [pc, #132]	@ (8000ce4 <HAL_ADC_MspInit+0xf4>)
 8000c5e:	f002 ff3b 	bl	8003ad8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c62:	4b21      	ldr	r3, [pc, #132]	@ (8000ce8 <HAL_ADC_MspInit+0xf8>)
 8000c64:	4a21      	ldr	r2, [pc, #132]	@ (8000cec <HAL_ADC_MspInit+0xfc>)
 8000c66:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce8 <HAL_ADC_MspInit+0xf8>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce8 <HAL_ADC_MspInit+0xf8>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c74:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce8 <HAL_ADC_MspInit+0xf8>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce8 <HAL_ADC_MspInit+0xf8>)
 8000c7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c80:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c82:	4b19      	ldr	r3, [pc, #100]	@ (8000ce8 <HAL_ADC_MspInit+0xf8>)
 8000c84:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c88:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c8a:	4b17      	ldr	r3, [pc, #92]	@ (8000ce8 <HAL_ADC_MspInit+0xf8>)
 8000c8c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c92:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <HAL_ADC_MspInit+0xf8>)
 8000c94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c98:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ce8 <HAL_ADC_MspInit+0xf8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <HAL_ADC_MspInit+0xf8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ca6:	4810      	ldr	r0, [pc, #64]	@ (8000ce8 <HAL_ADC_MspInit+0xf8>)
 8000ca8:	f002 fba6 	bl	80033f8 <HAL_DMA_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000cb2:	f000 fecd 	bl	8001a50 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ce8 <HAL_ADC_MspInit+0xf8>)
 8000cba:	639a      	str	r2, [r3, #56]	@ 0x38
 8000cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce8 <HAL_ADC_MspInit+0xf8>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2012      	movs	r0, #18
 8000cc8:	f002 fb5f 	bl	800338a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000ccc:	2012      	movs	r0, #18
 8000cce:	f002 fb78 	bl	80033c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	3728      	adds	r7, #40	@ 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40012000 	.word	0x40012000
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020000 	.word	0x40020000
 8000ce8:	20000070 	.word	0x20000070
 8000cec:	40026410 	.word	0x40026410

08000cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf4:	4b04      	ldr	r3, [pc, #16]	@ (8000d08 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	0a1b      	lsrs	r3, r3, #8
 8000cfa:	f003 0307 	and.w	r3, r3, #7
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	db0b      	blt.n	8000d36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	f003 021f 	and.w	r2, r3, #31
 8000d24:	4907      	ldr	r1, [pc, #28]	@ (8000d44 <__NVIC_EnableIRQ+0x38>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	095b      	lsrs	r3, r3, #5
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000e100 	.word	0xe000e100

08000d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	db0a      	blt.n	8000d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	490c      	ldr	r1, [pc, #48]	@ (8000d94 <__NVIC_SetPriority+0x4c>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	0112      	lsls	r2, r2, #4
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d70:	e00a      	b.n	8000d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4908      	ldr	r1, [pc, #32]	@ (8000d98 <__NVIC_SetPriority+0x50>)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	3b04      	subs	r3, #4
 8000d80:	0112      	lsls	r2, r2, #4
 8000d82:	b2d2      	uxtb	r2, r2
 8000d84:	440b      	add	r3, r1
 8000d86:	761a      	strb	r2, [r3, #24]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000e100 	.word	0xe000e100
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b089      	sub	sp, #36	@ 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f1c3 0307 	rsb	r3, r3, #7
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	bf28      	it	cs
 8000dba:	2304      	movcs	r3, #4
 8000dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	2b06      	cmp	r3, #6
 8000dc4:	d902      	bls.n	8000dcc <NVIC_EncodePriority+0x30>
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3b03      	subs	r3, #3
 8000dca:	e000      	b.n	8000dce <NVIC_EncodePriority+0x32>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43da      	mvns	r2, r3
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	401a      	ands	r2, r3
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de4:	f04f 31ff 	mov.w	r1, #4294967295
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	43d9      	mvns	r1, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	4313      	orrs	r3, r2
         );
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3724      	adds	r7, #36	@ 0x24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
	...

08000e04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000ebc <MX_DMA_Init+0xb8>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	4a2a      	ldr	r2, [pc, #168]	@ (8000ebc <MX_DMA_Init+0xb8>)
 8000e14:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1a:	4b28      	ldr	r3, [pc, #160]	@ (8000ebc <MX_DMA_Init+0xb8>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	4b24      	ldr	r3, [pc, #144]	@ (8000ebc <MX_DMA_Init+0xb8>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	4a23      	ldr	r2, [pc, #140]	@ (8000ebc <MX_DMA_Init+0xb8>)
 8000e30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e36:	4b21      	ldr	r3, [pc, #132]	@ (8000ebc <MX_DMA_Init+0xb8>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000e42:	f7ff ff55 	bl	8000cf0 <__NVIC_GetPriorityGrouping>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ffa5 	bl	8000d9c <NVIC_EncodePriority>
 8000e52:	4603      	mov	r3, r0
 8000e54:	4619      	mov	r1, r3
 8000e56:	200e      	movs	r0, #14
 8000e58:	f7ff ff76 	bl	8000d48 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000e5c:	200e      	movs	r0, #14
 8000e5e:	f7ff ff55 	bl	8000d0c <__NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	2038      	movs	r0, #56	@ 0x38
 8000e68:	f002 fa8f 	bl	800338a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e6c:	2038      	movs	r0, #56	@ 0x38
 8000e6e:	f002 faa8 	bl	80033c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000e72:	f7ff ff3d 	bl	8000cf0 <__NVIC_GetPriorityGrouping>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff8d 	bl	8000d9c <NVIC_EncodePriority>
 8000e82:	4603      	mov	r3, r0
 8000e84:	4619      	mov	r1, r3
 8000e86:	203a      	movs	r0, #58	@ 0x3a
 8000e88:	f7ff ff5e 	bl	8000d48 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e8c:	203a      	movs	r0, #58	@ 0x3a
 8000e8e:	f7ff ff3d 	bl	8000d0c <__NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000e92:	f7ff ff2d 	bl	8000cf0 <__NVIC_GetPriorityGrouping>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff7d 	bl	8000d9c <NVIC_EncodePriority>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	2046      	movs	r0, #70	@ 0x46
 8000ea8:	f7ff ff4e 	bl	8000d48 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000eac:	2046      	movs	r0, #70	@ 0x46
 8000eae:	f7ff ff2d 	bl	8000d0c <__NVIC_EnableIRQ>

}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800

08000ec0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	@ 0x28
 8000ec4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	4b2d      	ldr	r3, [pc, #180]	@ (8000f90 <MX_GPIO_Init+0xd0>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	4a2c      	ldr	r2, [pc, #176]	@ (8000f90 <MX_GPIO_Init+0xd0>)
 8000ee0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f90 <MX_GPIO_Init+0xd0>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b26      	ldr	r3, [pc, #152]	@ (8000f90 <MX_GPIO_Init+0xd0>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	4a25      	ldr	r2, [pc, #148]	@ (8000f90 <MX_GPIO_Init+0xd0>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f02:	4b23      	ldr	r3, [pc, #140]	@ (8000f90 <MX_GPIO_Init+0xd0>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	4b1f      	ldr	r3, [pc, #124]	@ (8000f90 <MX_GPIO_Init+0xd0>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	4a1e      	ldr	r2, [pc, #120]	@ (8000f90 <MX_GPIO_Init+0xd0>)
 8000f18:	f043 0304 	orr.w	r3, r3, #4
 8000f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f90 <MX_GPIO_Init+0xd0>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	f003 0304 	and.w	r3, r3, #4
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	4b18      	ldr	r3, [pc, #96]	@ (8000f90 <MX_GPIO_Init+0xd0>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	4a17      	ldr	r2, [pc, #92]	@ (8000f90 <MX_GPIO_Init+0xd0>)
 8000f34:	f043 0308 	orr.w	r3, r3, #8
 8000f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3a:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <MX_GPIO_Init+0xd0>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	f003 0308 	and.w	r3, r3, #8
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <MX_GPIO_Init+0xd0>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	4a10      	ldr	r2, [pc, #64]	@ (8000f90 <MX_GPIO_Init+0xd0>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f56:	4b0e      	ldr	r3, [pc, #56]	@ (8000f90 <MX_GPIO_Init+0xd0>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2104      	movs	r1, #4
 8000f66:	480b      	ldr	r0, [pc, #44]	@ (8000f94 <MX_GPIO_Init+0xd4>)
 8000f68:	f002 ff4a 	bl	8003e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4619      	mov	r1, r3
 8000f82:	4804      	ldr	r0, [pc, #16]	@ (8000f94 <MX_GPIO_Init+0xd4>)
 8000f84:	f002 fda8 	bl	8003ad8 <HAL_GPIO_Init>

}
 8000f88:	bf00      	nop
 8000f8a:	3728      	adds	r7, #40	@ 0x28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020c00 	.word	0x40020c00

08000f98 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fa8:	2b80      	cmp	r3, #128	@ 0x80
 8000faa:	bf0c      	ite	eq
 8000fac:	2301      	moveq	r3, #1
 8000fae:	2300      	movne	r3, #0
 8000fb0:	b2db      	uxtb	r3, r3
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b089      	sub	sp, #36	@ 0x24
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	330c      	adds	r3, #12
 8000fca:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	e853 3f00 	ldrex	r3, [r3]
 8000fd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	f043 0310 	orr.w	r3, r3, #16
 8000fda:	61fb      	str	r3, [r7, #28]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	330c      	adds	r3, #12
 8000fe0:	69fa      	ldr	r2, [r7, #28]
 8000fe2:	61ba      	str	r2, [r7, #24]
 8000fe4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000fe6:	6979      	ldr	r1, [r7, #20]
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	e841 2300 	strex	r3, r2, [r1]
 8000fee:	613b      	str	r3, [r7, #16]
   return(result);
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1e7      	bne.n	8000fc6 <LL_USART_EnableIT_IDLE+0x8>
}
 8000ff6:	bf00      	nop
 8000ff8:	bf00      	nop
 8000ffa:	3724      	adds	r7, #36	@ 0x24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	@ 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3314      	adds	r3, #20
 8001010:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	e853 3f00 	ldrex	r3, [r3]
 8001018:	60bb      	str	r3, [r7, #8]
   return(result);
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001020:	61fb      	str	r3, [r7, #28]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3314      	adds	r3, #20
 8001026:	69fa      	ldr	r2, [r7, #28]
 8001028:	61ba      	str	r2, [r7, #24]
 800102a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800102c:	6979      	ldr	r1, [r7, #20]
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	e841 2300 	strex	r3, r2, [r1]
 8001034:	613b      	str	r3, [r7, #16]
   return(result);
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1e7      	bne.n	800100c <LL_USART_EnableDMAReq_RX+0x8>
}
 800103c:	bf00      	nop
 800103e:	bf00      	nop
 8001040:	3724      	adds	r7, #36	@ 0x24
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	460b      	mov	r3, r1
 8001054:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001056:	78fa      	ldrb	r2, [r7, #3]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	605a      	str	r2, [r3, #4]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8001072:	4a0c      	ldr	r2, [pc, #48]	@ (80010a4 <LL_DMA_EnableStream+0x3c>)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	4413      	add	r3, r2
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4413      	add	r3, r2
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4908      	ldr	r1, [pc, #32]	@ (80010a4 <LL_DMA_EnableStream+0x3c>)
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	440a      	add	r2, r1
 8001088:	7812      	ldrb	r2, [r2, #0]
 800108a:	4611      	mov	r1, r2
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	440a      	add	r2, r1
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6013      	str	r3, [r2, #0]
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	08006214 	.word	0x08006214

080010a8 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 80010b4:	4a0d      	ldr	r2, [pc, #52]	@ (80010ec <LL_DMA_SetDataLength+0x44>)
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	4413      	add	r3, r2
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4413      	add	r3, r2
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	0c1b      	lsrs	r3, r3, #16
 80010c6:	041b      	lsls	r3, r3, #16
 80010c8:	4908      	ldr	r1, [pc, #32]	@ (80010ec <LL_DMA_SetDataLength+0x44>)
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	440a      	add	r2, r1
 80010ce:	7812      	ldrb	r2, [r2, #0]
 80010d0:	4611      	mov	r1, r2
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	440a      	add	r2, r1
 80010d6:	4611      	mov	r1, r2
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	4313      	orrs	r3, r2
 80010dc:	604b      	str	r3, [r1, #4]
}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	08006214 	.word	0x08006214

080010f0 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 80010fc:	4a07      	ldr	r2, [pc, #28]	@ (800111c <LL_DMA_SetMemoryAddress+0x2c>)
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	4413      	add	r3, r2
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4413      	add	r3, r2
 800110a:	461a      	mov	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	60d3      	str	r3, [r2, #12]
}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	08006214 	.word	0x08006214

08001120 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 800112c:	4a07      	ldr	r2, [pc, #28]	@ (800114c <LL_DMA_SetPeriphAddress+0x2c>)
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	4413      	add	r3, r2
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4413      	add	r3, r2
 800113a:	461a      	mov	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6093      	str	r3, [r2, #8]
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	08006214 	.word	0x08006214

08001150 <writePacket>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void writePacket(uint8_t packet[], int length) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < length; i++) {
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	e011      	b.n	8001184 <writePacket+0x34>
        while (!LL_USART_IsActiveFlag_TXE(USART1));
 8001160:	bf00      	nop
 8001162:	480d      	ldr	r0, [pc, #52]	@ (8001198 <writePacket+0x48>)
 8001164:	f7ff ff18 	bl	8000f98 <LL_USART_IsActiveFlag_TXE>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d0f9      	beq.n	8001162 <writePacket+0x12>
        LL_USART_TransmitData8(USART1, packet[i]);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	4413      	add	r3, r2
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	4619      	mov	r1, r3
 8001178:	4807      	ldr	r0, [pc, #28]	@ (8001198 <writePacket+0x48>)
 800117a:	f7ff ff66 	bl	800104a <LL_USART_TransmitData8>
    for (int i = 0; i < length; i++) {
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	3301      	adds	r3, #1
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	429a      	cmp	r2, r3
 800118a:	dbe9      	blt.n	8001160 <writePacket+0x10>
    }
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40011000 	.word	0x40011000

0800119c <writePacket3>:
void writePacket3(uint8_t packet[], int length) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < length; i++) {
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	e011      	b.n	80011d0 <writePacket3+0x34>
        while (!LL_USART_IsActiveFlag_TXE(USART3));
 80011ac:	bf00      	nop
 80011ae:	480d      	ldr	r0, [pc, #52]	@ (80011e4 <writePacket3+0x48>)
 80011b0:	f7ff fef2 	bl	8000f98 <LL_USART_IsActiveFlag_TXE>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0f9      	beq.n	80011ae <writePacket3+0x12>
        LL_USART_TransmitData8(USART3, packet[i]);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	4413      	add	r3, r2
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	4619      	mov	r1, r3
 80011c4:	4807      	ldr	r0, [pc, #28]	@ (80011e4 <writePacket3+0x48>)
 80011c6:	f7ff ff40 	bl	800104a <LL_USART_TransmitData8>
    for (int i = 0; i < length; i++) {
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	3301      	adds	r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	dbe9      	blt.n	80011ac <writePacket3+0x10>
    }
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40004800 	.word	0x40004800

080011e8 <sendPsd>:

void sendPsd() {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
    uint8_t packet[14]; // ?��?��(1) + ?��?��?��(12) + ?��?��(1)
    int index = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]

    packet[index++] = 0x08;
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	617a      	str	r2, [r7, #20]
 80011f8:	3318      	adds	r3, #24
 80011fa:	443b      	add	r3, r7
 80011fc:	2208      	movs	r2, #8
 80011fe:	f803 2c18 	strb.w	r2, [r3, #-24]

    for(int i=0; i<3; i++) {
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	e035      	b.n	8001274 <sendPsd+0x8c>
		packet[index++] = (filtered_buffer[i] >> 24) & 0xFF;
 8001208:	4a24      	ldr	r2, [pc, #144]	@ (800129c <sendPsd+0xb4>)
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001210:	0e19      	lsrs	r1, r3, #24
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	617a      	str	r2, [r7, #20]
 8001218:	b2ca      	uxtb	r2, r1
 800121a:	3318      	adds	r3, #24
 800121c:	443b      	add	r3, r7
 800121e:	f803 2c18 	strb.w	r2, [r3, #-24]
		packet[index++] = (filtered_buffer[i] >> 16) & 0xFF;
 8001222:	4a1e      	ldr	r2, [pc, #120]	@ (800129c <sendPsd+0xb4>)
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122a:	0c19      	lsrs	r1, r3, #16
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	1c5a      	adds	r2, r3, #1
 8001230:	617a      	str	r2, [r7, #20]
 8001232:	b2ca      	uxtb	r2, r1
 8001234:	3318      	adds	r3, #24
 8001236:	443b      	add	r3, r7
 8001238:	f803 2c18 	strb.w	r2, [r3, #-24]
		packet[index++] = (filtered_buffer[i] >> 8) & 0xFF;
 800123c:	4a17      	ldr	r2, [pc, #92]	@ (800129c <sendPsd+0xb4>)
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001244:	0a19      	lsrs	r1, r3, #8
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	1c5a      	adds	r2, r3, #1
 800124a:	617a      	str	r2, [r7, #20]
 800124c:	b2ca      	uxtb	r2, r1
 800124e:	3318      	adds	r3, #24
 8001250:	443b      	add	r3, r7
 8001252:	f803 2c18 	strb.w	r2, [r3, #-24]
		packet[index++] = filtered_buffer[i] & 0xFF;
 8001256:	4a11      	ldr	r2, [pc, #68]	@ (800129c <sendPsd+0xb4>)
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	617a      	str	r2, [r7, #20]
 8001264:	b2ca      	uxtb	r2, r1
 8001266:	3318      	adds	r3, #24
 8001268:	443b      	add	r3, r7
 800126a:	f803 2c18 	strb.w	r2, [r3, #-24]
    for(int i=0; i<3; i++) {
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	3301      	adds	r3, #1
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	2b02      	cmp	r3, #2
 8001278:	ddc6      	ble.n	8001208 <sendPsd+0x20>
    }
    packet[index++] = 0x20;
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	1c5a      	adds	r2, r3, #1
 800127e:	617a      	str	r2, [r7, #20]
 8001280:	3318      	adds	r3, #24
 8001282:	443b      	add	r3, r7
 8001284:	2220      	movs	r2, #32
 8001286:	f803 2c18 	strb.w	r2, [r3, #-24]

    writePacket(packet, index);
 800128a:	463b      	mov	r3, r7
 800128c:	6979      	ldr	r1, [r7, #20]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff5e 	bl	8001150 <writePacket>
}
 8001294:	bf00      	nop
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	2000012c 	.word	0x2000012c

080012a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a4:	f001 f9e8 	bl	8002678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a8:	f000 f872 	bl	8001390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ac:	f7ff fe08 	bl	8000ec0 <MX_GPIO_Init>
  MX_DMA_Init();
 80012b0:	f7ff fda8 	bl	8000e04 <MX_DMA_Init>
  MX_ADC1_Init();
 80012b4:	f7ff fc2e 	bl	8000b14 <MX_ADC1_Init>
  MX_TIM8_Init();
 80012b8:	f000 fdb0 	bl	8001e1c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80012bc:	f001 f85e 	bl	800237c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80012c0:	f001 f91c 	bl	80024fc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim8);
 80012c4:	4826      	ldr	r0, [pc, #152]	@ (8001360 <main+0xc0>)
 80012c6:	f003 fc07 	bl	8004ad8 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, adc1_buffer, 3);
 80012ca:	2203      	movs	r2, #3
 80012cc:	4925      	ldr	r1, [pc, #148]	@ (8001364 <main+0xc4>)
 80012ce:	4826      	ldr	r0, [pc, #152]	@ (8001368 <main+0xc8>)
 80012d0:	f001 fb98 	bl	8002a04 <HAL_ADC_Start_DMA>

  LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)PCrxBuffer);
 80012d4:	4b25      	ldr	r3, [pc, #148]	@ (800136c <main+0xcc>)
 80012d6:	461a      	mov	r2, r3
 80012d8:	2102      	movs	r1, #2
 80012da:	4825      	ldr	r0, [pc, #148]	@ (8001370 <main+0xd0>)
 80012dc:	f7ff ff08 	bl	80010f0 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)&USART1->DR);
 80012e0:	4a24      	ldr	r2, [pc, #144]	@ (8001374 <main+0xd4>)
 80012e2:	2102      	movs	r1, #2
 80012e4:	4822      	ldr	r0, [pc, #136]	@ (8001370 <main+0xd0>)
 80012e6:	f7ff ff1b 	bl	8001120 <LL_DMA_SetPeriphAddress>
  LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_2, RX_BUFFER_SIZE);
 80012ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012ee:	2102      	movs	r1, #2
 80012f0:	481f      	ldr	r0, [pc, #124]	@ (8001370 <main+0xd0>)
 80012f2:	f7ff fed9 	bl	80010a8 <LL_DMA_SetDataLength>
  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_2);
 80012f6:	2102      	movs	r1, #2
 80012f8:	481d      	ldr	r0, [pc, #116]	@ (8001370 <main+0xd0>)
 80012fa:	f7ff feb5 	bl	8001068 <LL_DMA_EnableStream>
  LL_USART_EnableDMAReq_RX(USART1);
 80012fe:	481e      	ldr	r0, [pc, #120]	@ (8001378 <main+0xd8>)
 8001300:	f7ff fe80 	bl	8001004 <LL_USART_EnableDMAReq_RX>
  LL_USART_EnableIT_IDLE(USART1);
 8001304:	481c      	ldr	r0, [pc, #112]	@ (8001378 <main+0xd8>)
 8001306:	f7ff fe5a 	bl	8000fbe <LL_USART_EnableIT_IDLE>

  operatingMode(0);
 800130a:	2000      	movs	r0, #0
 800130c:	f000 fa22 	bl	8001754 <operatingMode>
  enableTorque(0);
 8001310:	2000      	movs	r0, #0
 8001312:	f000 f997 	bl	8001644 <enableTorque>
  operatingMode(1);
 8001316:	2001      	movs	r0, #1
 8001318:	f000 fa1c 	bl	8001754 <operatingMode>
  enableTorque(1);
 800131c:	2001      	movs	r0, #1
 800131e:	f000 f991 	bl	8001644 <enableTorque>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(send_psd_flag) {
 8001322:	4b16      	ldr	r3, [pc, #88]	@ (800137c <main+0xdc>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d004      	beq.n	8001334 <main+0x94>
		  sendPsd();
 800132a:	f7ff ff5d 	bl	80011e8 <sendPsd>
		  send_psd_flag = 0;
 800132e:	4b13      	ldr	r3, [pc, #76]	@ (800137c <main+0xdc>)
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
	  }
	  convertlineangVelToSpeed(linear_vel, angular_vel);
 8001334:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <main+0xe0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a12      	ldr	r2, [pc, #72]	@ (8001384 <main+0xe4>)
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	4611      	mov	r1, r2
 800133e:	4618      	mov	r0, r3
 8001340:	f000 fb3a 	bl	80019b8 <convertlineangVelToSpeed>
	  sendGoalVelocity(0, -velocity_0);
 8001344:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <main+0xe8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	425b      	negs	r3, r3
 800134a:	4619      	mov	r1, r3
 800134c:	2000      	movs	r0, #0
 800134e:	f000 fa89 	bl	8001864 <sendGoalVelocity>
	  sendGoalVelocity(1, velocity_1);
 8001352:	4b0e      	ldr	r3, [pc, #56]	@ (800138c <main+0xec>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4619      	mov	r1, r3
 8001358:	2001      	movs	r0, #1
 800135a:	f000 fa83 	bl	8001864 <sendGoalVelocity>
	  if(send_psd_flag) {
 800135e:	e7e0      	b.n	8001322 <main+0x82>
 8001360:	2000024c 	.word	0x2000024c
 8001364:	200000d0 	.word	0x200000d0
 8001368:	20000028 	.word	0x20000028
 800136c:	2000013c 	.word	0x2000013c
 8001370:	40026400 	.word	0x40026400
 8001374:	40011004 	.word	0x40011004
 8001378:	40011000 	.word	0x40011000
 800137c:	20000138 	.word	0x20000138
 8001380:	20000244 	.word	0x20000244
 8001384:	20000248 	.word	0x20000248
 8001388:	2000023c 	.word	0x2000023c
 800138c:	20000240 	.word	0x20000240

08001390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b094      	sub	sp, #80	@ 0x50
 8001394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	2234      	movs	r2, #52	@ 0x34
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f004 fdf2 	bl	8005f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a4:	f107 0308 	add.w	r3, r7, #8
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b4:	2300      	movs	r3, #0
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	4b2c      	ldr	r3, [pc, #176]	@ (800146c <SystemClock_Config+0xdc>)
 80013ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013bc:	4a2b      	ldr	r2, [pc, #172]	@ (800146c <SystemClock_Config+0xdc>)
 80013be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80013c4:	4b29      	ldr	r3, [pc, #164]	@ (800146c <SystemClock_Config+0xdc>)
 80013c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013d0:	2300      	movs	r3, #0
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	4b26      	ldr	r3, [pc, #152]	@ (8001470 <SystemClock_Config+0xe0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a25      	ldr	r2, [pc, #148]	@ (8001470 <SystemClock_Config+0xe0>)
 80013da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	4b23      	ldr	r3, [pc, #140]	@ (8001470 <SystemClock_Config+0xe0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013e8:	603b      	str	r3, [r7, #0]
 80013ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ec:	2301      	movs	r3, #1
 80013ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f6:	2302      	movs	r3, #2
 80013f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001400:	2308      	movs	r3, #8
 8001402:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001404:	23b4      	movs	r3, #180	@ 0xb4
 8001406:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001408:	2302      	movs	r3, #2
 800140a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800140c:	2302      	movs	r3, #2
 800140e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001410:	2302      	movs	r3, #2
 8001412:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	4618      	mov	r0, r3
 800141a:	f003 f86f 	bl	80044fc <HAL_RCC_OscConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001424:	f000 fb14 	bl	8001a50 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001428:	f002 fd04 	bl	8003e34 <HAL_PWREx_EnableOverDrive>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001432:	f000 fb0d 	bl	8001a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001436:	230f      	movs	r3, #15
 8001438:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800143a:	2302      	movs	r3, #2
 800143c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001442:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001446:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001448:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800144c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	2105      	movs	r1, #5
 8001454:	4618      	mov	r0, r3
 8001456:	f002 fd3d 	bl	8003ed4 <HAL_RCC_ClockConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001460:	f000 faf6 	bl	8001a50 <Error_Handler>
  }
}
 8001464:	bf00      	nop
 8001466:	3750      	adds	r7, #80	@ 0x50
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40023800 	.word	0x40023800
 8001470:	40007000 	.word	0x40007000

08001474 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001474:	b490      	push	{r4, r7}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == hadc1.Instance) {
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b31      	ldr	r3, [pc, #196]	@ (8001548 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	429a      	cmp	r2, r3
 8001486:	d156      	bne.n	8001536 <HAL_ADC_ConvCpltCallback+0xc2>
		for(int i = 0; i < 3; i++) {
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	e012      	b.n	80014b4 <HAL_ADC_ConvCpltCallback+0x40>
			adc1_buffer_for6[i][adc_filter_index] = adc1_buffer[i];
 800148e:	4b2f      	ldr	r3, [pc, #188]	@ (800154c <HAL_ADC_ConvCpltCallback+0xd8>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	461c      	mov	r4, r3
 8001494:	4a2e      	ldr	r2, [pc, #184]	@ (8001550 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800149c:	482d      	ldr	r0, [pc, #180]	@ (8001554 <HAL_ADC_ConvCpltCallback+0xe0>)
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	4613      	mov	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4413      	add	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4423      	add	r3, r4
 80014aa:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		for(int i = 0; i < 3; i++) {
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	3301      	adds	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	dde9      	ble.n	800148e <HAL_ADC_ConvCpltCallback+0x1a>
		}
		adc_filter_index = (adc_filter_index + 1) % 6;
 80014ba:	4b24      	ldr	r3, [pc, #144]	@ (800154c <HAL_ADC_ConvCpltCallback+0xd8>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	1c5a      	adds	r2, r3, #1
 80014c0:	4b25      	ldr	r3, [pc, #148]	@ (8001558 <HAL_ADC_ConvCpltCallback+0xe4>)
 80014c2:	fb83 3102 	smull	r3, r1, r3, r2
 80014c6:	17d3      	asrs	r3, r2, #31
 80014c8:	1ac9      	subs	r1, r1, r3
 80014ca:	460b      	mov	r3, r1
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	440b      	add	r3, r1
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	1ad1      	subs	r1, r2, r3
 80014d4:	b2ca      	uxtb	r2, r1
 80014d6:	4b1d      	ldr	r3, [pc, #116]	@ (800154c <HAL_ADC_ConvCpltCallback+0xd8>)
 80014d8:	701a      	strb	r2, [r3, #0]

		for(int i=0; i<3; i++) {
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	e027      	b.n	8001530 <HAL_ADC_ConvCpltCallback+0xbc>
			adc_filter_sum = 0;
 80014e0:	4b1e      	ldr	r3, [pc, #120]	@ (800155c <HAL_ADC_ConvCpltCallback+0xe8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
			for(int j=0; j<6; j++) {
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	e011      	b.n	8001510 <HAL_ADC_ConvCpltCallback+0x9c>
				adc_filter_sum += adc1_buffer_for6[i][j];
 80014ec:	4919      	ldr	r1, [pc, #100]	@ (8001554 <HAL_ADC_ConvCpltCallback+0xe0>)
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4613      	mov	r3, r2
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	4413      	add	r3, r2
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	4413      	add	r3, r2
 80014fc:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8001500:	4b16      	ldr	r3, [pc, #88]	@ (800155c <HAL_ADC_ConvCpltCallback+0xe8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4413      	add	r3, r2
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <HAL_ADC_ConvCpltCallback+0xe8>)
 8001508:	6013      	str	r3, [r2, #0]
			for(int j=0; j<6; j++) {
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	3301      	adds	r3, #1
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b05      	cmp	r3, #5
 8001514:	ddea      	ble.n	80014ec <HAL_ADC_ConvCpltCallback+0x78>
			}
			filtered_buffer[i] = adc_filter_sum / 6;
 8001516:	4b11      	ldr	r3, [pc, #68]	@ (800155c <HAL_ADC_ConvCpltCallback+0xe8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a11      	ldr	r2, [pc, #68]	@ (8001560 <HAL_ADC_ConvCpltCallback+0xec>)
 800151c:	fba2 2303 	umull	r2, r3, r2, r3
 8001520:	089a      	lsrs	r2, r3, #2
 8001522:	4910      	ldr	r1, [pc, #64]	@ (8001564 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i=0; i<3; i++) {
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	3301      	adds	r3, #1
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	2b02      	cmp	r3, #2
 8001534:	ddd4      	ble.n	80014e0 <HAL_ADC_ConvCpltCallback+0x6c>
		}
	}
	send_psd_flag = 1;
 8001536:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <HAL_ADC_ConvCpltCallback+0xf4>)
 8001538:	2201      	movs	r2, #1
 800153a:	701a      	strb	r2, [r3, #0]
}
 800153c:	bf00      	nop
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bc90      	pop	{r4, r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	20000028 	.word	0x20000028
 800154c:	20000124 	.word	0x20000124
 8001550:	200000d0 	.word	0x200000d0
 8001554:	200000dc 	.word	0x200000dc
 8001558:	2aaaaaab 	.word	0x2aaaaaab
 800155c:	20000128 	.word	0x20000128
 8001560:	aaaaaaab 	.word	0xaaaaaaab
 8001564:	2000012c 	.word	0x2000012c
 8001568:	20000138 	.word	0x20000138

0800156c <update_crc>:
unsigned short update_crc(unsigned short crc_accum, unsigned char *data_blk_ptr, unsigned short data_blk_size)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8001572:	af00      	add	r7, sp, #0
 8001574:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001578:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800157c:	6019      	str	r1, [r3, #0]
 800157e:	4611      	mov	r1, r2
 8001580:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001584:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 8001588:	4602      	mov	r2, r0
 800158a:	801a      	strh	r2, [r3, #0]
 800158c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001590:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001594:	460a      	mov	r2, r1
 8001596:	801a      	strh	r2, [r3, #0]
  unsigned short i, j;
  unsigned short crc_table[256] = {
 8001598:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800159c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015a0:	4a27      	ldr	r2, [pc, #156]	@ (8001640 <update_crc+0xd4>)
 80015a2:	4618      	mov	r0, r3
 80015a4:	4611      	mov	r1, r2
 80015a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015aa:	461a      	mov	r2, r3
 80015ac:	f004 fd18 	bl	8005fe0 <memcpy>
      0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
      0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
      0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
  };

  for(j = 0; j < data_blk_size; j++)
 80015b0:	2300      	movs	r3, #0
 80015b2:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e
 80015b6:	e030      	b.n	800161a <update_crc+0xae>
  {
      i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 80015b8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80015bc:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	0a1b      	lsrs	r3, r3, #8
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	f8b7 220e 	ldrh.w	r2, [r7, #526]	@ 0x20e
 80015ca:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80015ce:	f5a1 7104 	sub.w	r1, r1, #528	@ 0x210
 80015d2:	6809      	ldr	r1, [r1, #0]
 80015d4:	440a      	add	r2, r1
 80015d6:	7812      	ldrb	r2, [r2, #0]
 80015d8:	4053      	eors	r3, r2
 80015da:	b29b      	uxth	r3, r3
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	f8a7 320c 	strh.w	r3, [r7, #524]	@ 0x20c
      crc_accum = (crc_accum << 8) ^ crc_table[i];
 80015e2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80015e6:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	f8b7 120c 	ldrh.w	r1, [r7, #524]	@ 0x20c
 80015f4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80015f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015fc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001600:	b21b      	sxth	r3, r3
 8001602:	4053      	eors	r3, r2
 8001604:	b21a      	sxth	r2, r3
 8001606:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800160a:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 800160e:	801a      	strh	r2, [r3, #0]
  for(j = 0; j < data_blk_size; j++)
 8001610:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8001614:	3301      	adds	r3, #1
 8001616:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e
 800161a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800161e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001622:	f8b7 220e 	ldrh.w	r2, [r7, #526]	@ 0x20e
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	d3c5      	bcc.n	80015b8 <update_crc+0x4c>
  }

  return crc_accum;
 800162c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001630:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 8001634:	881b      	ldrh	r3, [r3, #0]
}
 8001636:	4618      	mov	r0, r3
 8001638:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	08006014 	.word	0x08006014

08001644 <enableTorque>:
void enableTorque(uint8_t motor_id) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  uint8_t packet[14];
  size_t index = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]

  packet[index++] = 0xFF;
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	1c5a      	adds	r2, r3, #1
 8001656:	61fa      	str	r2, [r7, #28]
 8001658:	3320      	adds	r3, #32
 800165a:	443b      	add	r3, r7
 800165c:	22ff      	movs	r2, #255	@ 0xff
 800165e:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0xFF;
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	61fa      	str	r2, [r7, #28]
 8001668:	3320      	adds	r3, #32
 800166a:	443b      	add	r3, r7
 800166c:	22ff      	movs	r2, #255	@ 0xff
 800166e:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0xFD;
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	1c5a      	adds	r2, r3, #1
 8001676:	61fa      	str	r2, [r7, #28]
 8001678:	3320      	adds	r3, #32
 800167a:	443b      	add	r3, r7
 800167c:	22fd      	movs	r2, #253	@ 0xfd
 800167e:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0x00;
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	1c5a      	adds	r2, r3, #1
 8001686:	61fa      	str	r2, [r7, #28]
 8001688:	3320      	adds	r3, #32
 800168a:	443b      	add	r3, r7
 800168c:	2200      	movs	r2, #0
 800168e:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = motor_id; // ID
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	1c5a      	adds	r2, r3, #1
 8001696:	61fa      	str	r2, [r7, #28]
 8001698:	3320      	adds	r3, #32
 800169a:	443b      	add	r3, r7
 800169c:	79fa      	ldrb	r2, [r7, #7]
 800169e:	f803 2c14 	strb.w	r2, [r3, #-20]

  packet[index++] = 0x06;
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	61fa      	str	r2, [r7, #28]
 80016a8:	3320      	adds	r3, #32
 80016aa:	443b      	add	r3, r7
 80016ac:	2206      	movs	r2, #6
 80016ae:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0x00;
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	1c5a      	adds	r2, r3, #1
 80016b6:	61fa      	str	r2, [r7, #28]
 80016b8:	3320      	adds	r3, #32
 80016ba:	443b      	add	r3, r7
 80016bc:	2200      	movs	r2, #0
 80016be:	f803 2c14 	strb.w	r2, [r3, #-20]

  packet[index++] = 0x03; // Write
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	1c5a      	adds	r2, r3, #1
 80016c6:	61fa      	str	r2, [r7, #28]
 80016c8:	3320      	adds	r3, #32
 80016ca:	443b      	add	r3, r7
 80016cc:	2203      	movs	r2, #3
 80016ce:	f803 2c14 	strb.w	r2, [r3, #-20]

  packet[index++] = 0x40;
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	1c5a      	adds	r2, r3, #1
 80016d6:	61fa      	str	r2, [r7, #28]
 80016d8:	3320      	adds	r3, #32
 80016da:	443b      	add	r3, r7
 80016dc:	2240      	movs	r2, #64	@ 0x40
 80016de:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0x00;
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	1c5a      	adds	r2, r3, #1
 80016e6:	61fa      	str	r2, [r7, #28]
 80016e8:	3320      	adds	r3, #32
 80016ea:	443b      	add	r3, r7
 80016ec:	2200      	movs	r2, #0
 80016ee:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0x01; // Torque ?��?��?��
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	1c5a      	adds	r2, r3, #1
 80016f6:	61fa      	str	r2, [r7, #28]
 80016f8:	3320      	adds	r3, #32
 80016fa:	443b      	add	r3, r7
 80016fc:	2201      	movs	r2, #1
 80016fe:	f803 2c14 	strb.w	r2, [r3, #-20]

  unsigned short crc = update_crc(0, packet, index);
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	b29a      	uxth	r2, r3
 8001706:	f107 030c 	add.w	r3, r7, #12
 800170a:	4619      	mov	r1, r3
 800170c:	2000      	movs	r0, #0
 800170e:	f7ff ff2d 	bl	800156c <update_crc>
 8001712:	4603      	mov	r3, r0
 8001714:	837b      	strh	r3, [r7, #26]
  packet[index++] = crc & 0xFF;
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	1c5a      	adds	r2, r3, #1
 800171a:	61fa      	str	r2, [r7, #28]
 800171c:	8b7a      	ldrh	r2, [r7, #26]
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	3320      	adds	r3, #32
 8001722:	443b      	add	r3, r7
 8001724:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = (crc >> 8) & 0xFF;
 8001728:	8b7b      	ldrh	r3, [r7, #26]
 800172a:	0a1b      	lsrs	r3, r3, #8
 800172c:	b299      	uxth	r1, r3
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	1c5a      	adds	r2, r3, #1
 8001732:	61fa      	str	r2, [r7, #28]
 8001734:	b2ca      	uxtb	r2, r1
 8001736:	3320      	adds	r3, #32
 8001738:	443b      	add	r3, r7
 800173a:	f803 2c14 	strb.w	r2, [r3, #-20]

  writePacket3(packet, index);
 800173e:	69fa      	ldr	r2, [r7, #28]
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	4611      	mov	r1, r2
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fd28 	bl	800119c <writePacket3>
}
 800174c:	bf00      	nop
 800174e:	3720      	adds	r7, #32
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <operatingMode>:

void operatingMode(uint8_t motor_id) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
  uint8_t packet[14];
  size_t index = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]

  packet[index++] = 0xFF;
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	1c5a      	adds	r2, r3, #1
 8001766:	61fa      	str	r2, [r7, #28]
 8001768:	3320      	adds	r3, #32
 800176a:	443b      	add	r3, r7
 800176c:	22ff      	movs	r2, #255	@ 0xff
 800176e:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0xFF;
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	1c5a      	adds	r2, r3, #1
 8001776:	61fa      	str	r2, [r7, #28]
 8001778:	3320      	adds	r3, #32
 800177a:	443b      	add	r3, r7
 800177c:	22ff      	movs	r2, #255	@ 0xff
 800177e:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0xFD;
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	1c5a      	adds	r2, r3, #1
 8001786:	61fa      	str	r2, [r7, #28]
 8001788:	3320      	adds	r3, #32
 800178a:	443b      	add	r3, r7
 800178c:	22fd      	movs	r2, #253	@ 0xfd
 800178e:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0x00;
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	1c5a      	adds	r2, r3, #1
 8001796:	61fa      	str	r2, [r7, #28]
 8001798:	3320      	adds	r3, #32
 800179a:	443b      	add	r3, r7
 800179c:	2200      	movs	r2, #0
 800179e:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = motor_id; // ID
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	1c5a      	adds	r2, r3, #1
 80017a6:	61fa      	str	r2, [r7, #28]
 80017a8:	3320      	adds	r3, #32
 80017aa:	443b      	add	r3, r7
 80017ac:	79fa      	ldrb	r2, [r7, #7]
 80017ae:	f803 2c14 	strb.w	r2, [r3, #-20]

  packet[index++] = 0x06;
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	61fa      	str	r2, [r7, #28]
 80017b8:	3320      	adds	r3, #32
 80017ba:	443b      	add	r3, r7
 80017bc:	2206      	movs	r2, #6
 80017be:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0x00;
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	1c5a      	adds	r2, r3, #1
 80017c6:	61fa      	str	r2, [r7, #28]
 80017c8:	3320      	adds	r3, #32
 80017ca:	443b      	add	r3, r7
 80017cc:	2200      	movs	r2, #0
 80017ce:	f803 2c14 	strb.w	r2, [r3, #-20]

  packet[index++] = 0x03; // Write
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	1c5a      	adds	r2, r3, #1
 80017d6:	61fa      	str	r2, [r7, #28]
 80017d8:	3320      	adds	r3, #32
 80017da:	443b      	add	r3, r7
 80017dc:	2203      	movs	r2, #3
 80017de:	f803 2c14 	strb.w	r2, [r3, #-20]

  packet[index++] = 0x0B;
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	1c5a      	adds	r2, r3, #1
 80017e6:	61fa      	str	r2, [r7, #28]
 80017e8:	3320      	adds	r3, #32
 80017ea:	443b      	add	r3, r7
 80017ec:	220b      	movs	r2, #11
 80017ee:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0x00;
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	1c5a      	adds	r2, r3, #1
 80017f6:	61fa      	str	r2, [r7, #28]
 80017f8:	3320      	adds	r3, #32
 80017fa:	443b      	add	r3, r7
 80017fc:	2200      	movs	r2, #0
 80017fe:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0x01;
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	1c5a      	adds	r2, r3, #1
 8001806:	61fa      	str	r2, [r7, #28]
 8001808:	3320      	adds	r3, #32
 800180a:	443b      	add	r3, r7
 800180c:	2201      	movs	r2, #1
 800180e:	f803 2c14 	strb.w	r2, [r3, #-20]

  unsigned short crc = update_crc(0, packet, index);
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	b29a      	uxth	r2, r3
 8001816:	f107 030c 	add.w	r3, r7, #12
 800181a:	4619      	mov	r1, r3
 800181c:	2000      	movs	r0, #0
 800181e:	f7ff fea5 	bl	800156c <update_crc>
 8001822:	4603      	mov	r3, r0
 8001824:	837b      	strh	r3, [r7, #26]
  packet[index++] = crc & 0xFF;
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	61fa      	str	r2, [r7, #28]
 800182c:	8b7a      	ldrh	r2, [r7, #26]
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	3320      	adds	r3, #32
 8001832:	443b      	add	r3, r7
 8001834:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = (crc >> 8) & 0xFF;
 8001838:	8b7b      	ldrh	r3, [r7, #26]
 800183a:	0a1b      	lsrs	r3, r3, #8
 800183c:	b299      	uxth	r1, r3
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	61fa      	str	r2, [r7, #28]
 8001844:	b2ca      	uxtb	r2, r1
 8001846:	3320      	adds	r3, #32
 8001848:	443b      	add	r3, r7
 800184a:	f803 2c14 	strb.w	r2, [r3, #-20]

  writePacket3(packet, index);
 800184e:	69fa      	ldr	r2, [r7, #28]
 8001850:	f107 030c 	add.w	r3, r7, #12
 8001854:	4611      	mov	r1, r2
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fca0 	bl	800119c <writePacket3>
}
 800185c:	bf00      	nop
 800185e:	3720      	adds	r7, #32
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <sendGoalVelocity>:

void sendGoalVelocity(uint8_t motor_id, int32_t velocity) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	71fb      	strb	r3, [r7, #7]
  uint8_t packet[16];
  size_t index = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]

  packet[index++] = 0xFF;
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	61fa      	str	r2, [r7, #28]
 800187a:	3320      	adds	r3, #32
 800187c:	443b      	add	r3, r7
 800187e:	22ff      	movs	r2, #255	@ 0xff
 8001880:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = 0xFF;
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	61fa      	str	r2, [r7, #28]
 800188a:	3320      	adds	r3, #32
 800188c:	443b      	add	r3, r7
 800188e:	22ff      	movs	r2, #255	@ 0xff
 8001890:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = 0xFD;
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	61fa      	str	r2, [r7, #28]
 800189a:	3320      	adds	r3, #32
 800189c:	443b      	add	r3, r7
 800189e:	22fd      	movs	r2, #253	@ 0xfd
 80018a0:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = 0x00;
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	61fa      	str	r2, [r7, #28]
 80018aa:	3320      	adds	r3, #32
 80018ac:	443b      	add	r3, r7
 80018ae:	2200      	movs	r2, #0
 80018b0:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = motor_id; // ID
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	61fa      	str	r2, [r7, #28]
 80018ba:	3320      	adds	r3, #32
 80018bc:	443b      	add	r3, r7
 80018be:	79fa      	ldrb	r2, [r7, #7]
 80018c0:	f803 2c18 	strb.w	r2, [r3, #-24]

  packet[index++] = 0x09;
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	61fa      	str	r2, [r7, #28]
 80018ca:	3320      	adds	r3, #32
 80018cc:	443b      	add	r3, r7
 80018ce:	2209      	movs	r2, #9
 80018d0:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = 0x00;
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	61fa      	str	r2, [r7, #28]
 80018da:	3320      	adds	r3, #32
 80018dc:	443b      	add	r3, r7
 80018de:	2200      	movs	r2, #0
 80018e0:	f803 2c18 	strb.w	r2, [r3, #-24]

  packet[index++] = 0x03; // Write
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	61fa      	str	r2, [r7, #28]
 80018ea:	3320      	adds	r3, #32
 80018ec:	443b      	add	r3, r7
 80018ee:	2203      	movs	r2, #3
 80018f0:	f803 2c18 	strb.w	r2, [r3, #-24]

  packet[index++] = 0x68;
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	1c5a      	adds	r2, r3, #1
 80018f8:	61fa      	str	r2, [r7, #28]
 80018fa:	3320      	adds	r3, #32
 80018fc:	443b      	add	r3, r7
 80018fe:	2268      	movs	r2, #104	@ 0x68
 8001900:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = 0x00;
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	61fa      	str	r2, [r7, #28]
 800190a:	3320      	adds	r3, #32
 800190c:	443b      	add	r3, r7
 800190e:	2200      	movs	r2, #0
 8001910:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = (velocity & 0xFF);
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	1c5a      	adds	r2, r3, #1
 8001918:	61fa      	str	r2, [r7, #28]
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	3320      	adds	r3, #32
 8001920:	443b      	add	r3, r7
 8001922:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = (velocity >> 8) & 0xFF;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	1219      	asrs	r1, r3, #8
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	61fa      	str	r2, [r7, #28]
 8001930:	b2ca      	uxtb	r2, r1
 8001932:	3320      	adds	r3, #32
 8001934:	443b      	add	r3, r7
 8001936:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = (velocity >> 16) & 0xFF;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	1419      	asrs	r1, r3, #16
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	1c5a      	adds	r2, r3, #1
 8001942:	61fa      	str	r2, [r7, #28]
 8001944:	b2ca      	uxtb	r2, r1
 8001946:	3320      	adds	r3, #32
 8001948:	443b      	add	r3, r7
 800194a:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = (velocity >> 24) & 0xFF;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	0e19      	lsrs	r1, r3, #24
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	61fa      	str	r2, [r7, #28]
 8001958:	b2ca      	uxtb	r2, r1
 800195a:	3320      	adds	r3, #32
 800195c:	443b      	add	r3, r7
 800195e:	f803 2c18 	strb.w	r2, [r3, #-24]

  unsigned short crc = update_crc(0, packet, index);
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	b29a      	uxth	r2, r3
 8001966:	f107 0308 	add.w	r3, r7, #8
 800196a:	4619      	mov	r1, r3
 800196c:	2000      	movs	r0, #0
 800196e:	f7ff fdfd 	bl	800156c <update_crc>
 8001972:	4603      	mov	r3, r0
 8001974:	837b      	strh	r3, [r7, #26]
  packet[index++] = crc & 0xFF;
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	61fa      	str	r2, [r7, #28]
 800197c:	8b7a      	ldrh	r2, [r7, #26]
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	3320      	adds	r3, #32
 8001982:	443b      	add	r3, r7
 8001984:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = (crc >> 8) & 0xFF;
 8001988:	8b7b      	ldrh	r3, [r7, #26]
 800198a:	0a1b      	lsrs	r3, r3, #8
 800198c:	b299      	uxth	r1, r3
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	61fa      	str	r2, [r7, #28]
 8001994:	b2ca      	uxtb	r2, r1
 8001996:	3320      	adds	r3, #32
 8001998:	443b      	add	r3, r7
 800199a:	f803 2c18 	strb.w	r2, [r3, #-24]

  writePacket3(packet, index);
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	f107 0308 	add.w	r3, r7, #8
 80019a4:	4611      	mov	r1, r2
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fbf8 	bl	800119c <writePacket3>
}
 80019ac:	bf00      	nop
 80019ae:	3720      	adds	r7, #32
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	0000      	movs	r0, r0
	...

080019b8 <convertlineangVelToSpeed>:

void convertlineangVelToSpeed(int32_t linear_vel, int32_t angular_vel) {
 80019b8:	b5b0      	push	{r4, r5, r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
	velocity_0 = linear_vel + (angular_vel * 0.9);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7fe fe9c 	bl	8000700 <__aeabi_i2d>
 80019c8:	4604      	mov	r4, r0
 80019ca:	460d      	mov	r5, r1
 80019cc:	6838      	ldr	r0, [r7, #0]
 80019ce:	f7fe fe97 	bl	8000700 <__aeabi_i2d>
 80019d2:	a31b      	add	r3, pc, #108	@ (adr r3, 8001a40 <convertlineangVelToSpeed+0x88>)
 80019d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d8:	f7fe fc16 	bl	8000208 <__aeabi_dmul>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4620      	mov	r0, r4
 80019e2:	4629      	mov	r1, r5
 80019e4:	f7fe fd40 	bl	8000468 <__adddf3>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4610      	mov	r0, r2
 80019ee:	4619      	mov	r1, r3
 80019f0:	f7fe fef0 	bl	80007d4 <__aeabi_d2iz>
 80019f4:	4603      	mov	r3, r0
 80019f6:	4a14      	ldr	r2, [pc, #80]	@ (8001a48 <convertlineangVelToSpeed+0x90>)
 80019f8:	6013      	str	r3, [r2, #0]
	velocity_1 = linear_vel - (angular_vel * 0.9);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7fe fe80 	bl	8000700 <__aeabi_i2d>
 8001a00:	4604      	mov	r4, r0
 8001a02:	460d      	mov	r5, r1
 8001a04:	6838      	ldr	r0, [r7, #0]
 8001a06:	f7fe fe7b 	bl	8000700 <__aeabi_i2d>
 8001a0a:	a30d      	add	r3, pc, #52	@ (adr r3, 8001a40 <convertlineangVelToSpeed+0x88>)
 8001a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a10:	f7fe fbfa 	bl	8000208 <__aeabi_dmul>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4620      	mov	r0, r4
 8001a1a:	4629      	mov	r1, r5
 8001a1c:	f7fe fd22 	bl	8000464 <__aeabi_dsub>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	f7fe fed4 	bl	80007d4 <__aeabi_d2iz>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4a07      	ldr	r2, [pc, #28]	@ (8001a4c <convertlineangVelToSpeed+0x94>)
 8001a30:	6013      	str	r3, [r2, #0]
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bdb0      	pop	{r4, r5, r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	f3af 8000 	nop.w
 8001a40:	cccccccd 	.word	0xcccccccd
 8001a44:	3feccccc 	.word	0x3feccccc
 8001a48:	2000023c 	.word	0x2000023c
 8001a4c:	20000240 	.word	0x20000240

08001a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a54:	b672      	cpsid	i
}
 8001a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <Error_Handler+0x8>

08001a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <HAL_MspInit+0x4c>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6a:	4a0f      	ldr	r2, [pc, #60]	@ (8001aa8 <HAL_MspInit+0x4c>)
 8001a6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a72:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa8 <HAL_MspInit+0x4c>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a7a:	607b      	str	r3, [r7, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	603b      	str	r3, [r7, #0]
 8001a82:	4b09      	ldr	r3, [pc, #36]	@ (8001aa8 <HAL_MspInit+0x4c>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	4a08      	ldr	r2, [pc, #32]	@ (8001aa8 <HAL_MspInit+0x4c>)
 8001a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a8e:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <HAL_MspInit+0x4c>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800

08001aac <LL_USART_IsActiveFlag_ORE>:
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	bf0c      	ite	eq
 8001ac0:	2301      	moveq	r3, #1
 8001ac2:	2300      	movne	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <LL_USART_IsActiveFlag_IDLE>:
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	2b10      	cmp	r3, #16
 8001ae4:	bf0c      	ite	eq
 8001ae6:	2301      	moveq	r3, #1
 8001ae8:	2300      	movne	r3, #0
 8001aea:	b2db      	uxtb	r3, r3
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LL_USART_ClearFlag_ORE>:
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001b06:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <LL_USART_ClearFlag_IDLE>:
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001b32:	68fb      	ldr	r3, [r7, #12]
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	619a      	str	r2, [r3, #24]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <LL_DMA_EnableStream>:
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8001b66:	4a0c      	ldr	r2, [pc, #48]	@ (8001b98 <LL_DMA_EnableStream+0x3c>)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4413      	add	r3, r2
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4908      	ldr	r1, [pc, #32]	@ (8001b98 <LL_DMA_EnableStream+0x3c>)
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	440a      	add	r2, r1
 8001b7c:	7812      	ldrb	r2, [r2, #0]
 8001b7e:	4611      	mov	r1, r2
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	440a      	add	r2, r1
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6013      	str	r3, [r2, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	0800621c 	.word	0x0800621c

08001b9c <LL_DMA_DisableStream>:
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8001ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8001bd8 <LL_DMA_DisableStream+0x3c>)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4908      	ldr	r1, [pc, #32]	@ (8001bd8 <LL_DMA_DisableStream+0x3c>)
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	440a      	add	r2, r1
 8001bbc:	7812      	ldrb	r2, [r2, #0]
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	440a      	add	r2, r1
 8001bc4:	f023 0301 	bic.w	r3, r3, #1
 8001bc8:	6013      	str	r3, [r2, #0]
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	0800621c 	.word	0x0800621c

08001bdc <LL_DMA_SetDataLength>:
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8001be8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c20 <LL_DMA_SetDataLength+0x44>)
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	4413      	add	r3, r2
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	0c1b      	lsrs	r3, r3, #16
 8001bfa:	041b      	lsls	r3, r3, #16
 8001bfc:	4908      	ldr	r1, [pc, #32]	@ (8001c20 <LL_DMA_SetDataLength+0x44>)
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	440a      	add	r2, r1
 8001c02:	7812      	ldrb	r2, [r2, #0]
 8001c04:	4611      	mov	r1, r2
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	440a      	add	r2, r1
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	604b      	str	r3, [r1, #4]
}
 8001c12:	bf00      	nop
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	0800621c 	.word	0x0800621c

08001c24 <LL_DMA_GetDataLength>:
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT));
 8001c2e:	4a07      	ldr	r2, [pc, #28]	@ (8001c4c <LL_DMA_GetDataLength+0x28>)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	461a      	mov	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	b29b      	uxth	r3, r3
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	0800621c 	.word	0x0800621c

08001c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c54:	bf00      	nop
 8001c56:	e7fd      	b.n	8001c54 <NMI_Handler+0x4>

08001c58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <HardFault_Handler+0x4>

08001c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c64:	bf00      	nop
 8001c66:	e7fd      	b.n	8001c64 <MemManage_Handler+0x4>

08001c68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c6c:	bf00      	nop
 8001c6e:	e7fd      	b.n	8001c6c <BusFault_Handler+0x4>

08001c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c74:	bf00      	nop
 8001c76:	e7fd      	b.n	8001c74 <UsageFault_Handler+0x4>

08001c78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ca6:	f000 fd39 	bl	800271c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}

08001cae <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001cc0:	4802      	ldr	r0, [pc, #8]	@ (8001ccc <ADC_IRQHandler+0x10>)
 8001cc2:	f000 fd8e 	bl	80027e2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000028 	.word	0x20000028

08001cd0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(LL_USART_IsActiveFlag_IDLE(USART1)) {
 8001cd6:	482d      	ldr	r0, [pc, #180]	@ (8001d8c <USART1_IRQHandler+0xbc>)
 8001cd8:	f7ff fefb 	bl	8001ad2 <LL_USART_IsActiveFlag_IDLE>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d047      	beq.n	8001d72 <USART1_IRQHandler+0xa2>
		int len = RX_BUFFER_SIZE - LL_DMA_GetDataLength(DMA2, LL_DMA_STREAM_2);
 8001ce2:	2102      	movs	r1, #2
 8001ce4:	482a      	ldr	r0, [pc, #168]	@ (8001d90 <USART1_IRQHandler+0xc0>)
 8001ce6:	f7ff ff9d 	bl	8001c24 <LL_DMA_GetDataLength>
 8001cea:	4603      	mov	r3, r0
 8001cec:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8001cf0:	607b      	str	r3, [r7, #4]

		LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_2);
 8001cf2:	2104      	movs	r1, #4
 8001cf4:	4827      	ldr	r0, [pc, #156]	@ (8001d94 <USART1_IRQHandler+0xc4>)
 8001cf6:	f7ff ff23 	bl	8001b40 <LL_GPIO_SetOutputPin>

		if(len >= 10) {
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b09      	cmp	r3, #9
 8001cfe:	dd27      	ble.n	8001d50 <USART1_IRQHandler+0x80>
			if(PCrxBuffer[0] == 0x19 && PCrxBuffer[9] == 0x03) {
 8001d00:	4b25      	ldr	r3, [pc, #148]	@ (8001d98 <USART1_IRQHandler+0xc8>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b19      	cmp	r3, #25
 8001d06:	d123      	bne.n	8001d50 <USART1_IRQHandler+0x80>
 8001d08:	4b23      	ldr	r3, [pc, #140]	@ (8001d98 <USART1_IRQHandler+0xc8>)
 8001d0a:	7a5b      	ldrb	r3, [r3, #9]
 8001d0c:	2b03      	cmp	r3, #3
 8001d0e:	d11f      	bne.n	8001d50 <USART1_IRQHandler+0x80>
				linear_vel = (PCrxBuffer[1] << 24) | (PCrxBuffer[2] << 16) | (PCrxBuffer[3] << 8) | PCrxBuffer[4];
 8001d10:	4b21      	ldr	r3, [pc, #132]	@ (8001d98 <USART1_IRQHandler+0xc8>)
 8001d12:	785b      	ldrb	r3, [r3, #1]
 8001d14:	061a      	lsls	r2, r3, #24
 8001d16:	4b20      	ldr	r3, [pc, #128]	@ (8001d98 <USART1_IRQHandler+0xc8>)
 8001d18:	789b      	ldrb	r3, [r3, #2]
 8001d1a:	041b      	lsls	r3, r3, #16
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d98 <USART1_IRQHandler+0xc8>)
 8001d20:	78db      	ldrb	r3, [r3, #3]
 8001d22:	021b      	lsls	r3, r3, #8
 8001d24:	4313      	orrs	r3, r2
 8001d26:	4a1c      	ldr	r2, [pc, #112]	@ (8001d98 <USART1_IRQHandler+0xc8>)
 8001d28:	7912      	ldrb	r2, [r2, #4]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001d9c <USART1_IRQHandler+0xcc>)
 8001d2e:	6013      	str	r3, [r2, #0]
				angular_vel = (PCrxBuffer[5] << 24) | (PCrxBuffer[6] << 16) | (PCrxBuffer[7] << 8) | PCrxBuffer[8];
 8001d30:	4b19      	ldr	r3, [pc, #100]	@ (8001d98 <USART1_IRQHandler+0xc8>)
 8001d32:	795b      	ldrb	r3, [r3, #5]
 8001d34:	061a      	lsls	r2, r3, #24
 8001d36:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <USART1_IRQHandler+0xc8>)
 8001d38:	799b      	ldrb	r3, [r3, #6]
 8001d3a:	041b      	lsls	r3, r3, #16
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	4b16      	ldr	r3, [pc, #88]	@ (8001d98 <USART1_IRQHandler+0xc8>)
 8001d40:	79db      	ldrb	r3, [r3, #7]
 8001d42:	021b      	lsls	r3, r3, #8
 8001d44:	4313      	orrs	r3, r2
 8001d46:	4a14      	ldr	r2, [pc, #80]	@ (8001d98 <USART1_IRQHandler+0xc8>)
 8001d48:	7a12      	ldrb	r2, [r2, #8]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	4a14      	ldr	r2, [pc, #80]	@ (8001da0 <USART1_IRQHandler+0xd0>)
 8001d4e:	6013      	str	r3, [r2, #0]
			}
		}
		LL_USART_ClearFlag_IDLE(USART1);
 8001d50:	480e      	ldr	r0, [pc, #56]	@ (8001d8c <USART1_IRQHandler+0xbc>)
 8001d52:	f7ff fee3 	bl	8001b1c <LL_USART_ClearFlag_IDLE>
		LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_2);
 8001d56:	2102      	movs	r1, #2
 8001d58:	480d      	ldr	r0, [pc, #52]	@ (8001d90 <USART1_IRQHandler+0xc0>)
 8001d5a:	f7ff ff1f 	bl	8001b9c <LL_DMA_DisableStream>
		LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_2, RX_BUFFER_SIZE);
 8001d5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d62:	2102      	movs	r1, #2
 8001d64:	480a      	ldr	r0, [pc, #40]	@ (8001d90 <USART1_IRQHandler+0xc0>)
 8001d66:	f7ff ff39 	bl	8001bdc <LL_DMA_SetDataLength>
		LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_2);
 8001d6a:	2102      	movs	r1, #2
 8001d6c:	4808      	ldr	r0, [pc, #32]	@ (8001d90 <USART1_IRQHandler+0xc0>)
 8001d6e:	f7ff fef5 	bl	8001b5c <LL_DMA_EnableStream>
	}

	if(LL_USART_IsActiveFlag_ORE(USART1))
 8001d72:	4806      	ldr	r0, [pc, #24]	@ (8001d8c <USART1_IRQHandler+0xbc>)
 8001d74:	f7ff fe9a 	bl	8001aac <LL_USART_IsActiveFlag_ORE>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d002      	beq.n	8001d84 <USART1_IRQHandler+0xb4>
		LL_USART_ClearFlag_ORE(USART1);
 8001d7e:	4803      	ldr	r0, [pc, #12]	@ (8001d8c <USART1_IRQHandler+0xbc>)
 8001d80:	f7ff feba 	bl	8001af8 <LL_USART_ClearFlag_ORE>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40011000 	.word	0x40011000
 8001d90:	40026400 	.word	0x40026400
 8001d94:	40020c00 	.word	0x40020c00
 8001d98:	2000013c 	.word	0x2000013c
 8001d9c:	20000244 	.word	0x20000244
 8001da0:	20000248 	.word	0x20000248

08001da4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001db8:	4802      	ldr	r0, [pc, #8]	@ (8001dc4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001dba:	f002 fefd 	bl	8004bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	2000024c 	.word	0x2000024c

08001dc8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001dcc:	4802      	ldr	r0, [pc, #8]	@ (8001dd8 <DMA2_Stream0_IRQHandler+0x10>)
 8001dce:	f001 fc19 	bl	8003604 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000070 	.word	0x20000070

08001ddc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Stream2_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Stream7_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dfc:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <SystemInit+0x20>)
 8001dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e02:	4a05      	ldr	r2, [pc, #20]	@ (8001e18 <SystemInit+0x20>)
 8001e04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e22:	f107 0308 	add.w	r3, r7, #8
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e30:	463b      	mov	r3, r7
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001e38:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb4 <MX_TIM8_Init+0x98>)
 8001e3a:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb8 <MX_TIM8_Init+0x9c>)
 8001e3c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb4 <MX_TIM8_Init+0x98>)
 8001e40:	22b3      	movs	r2, #179	@ 0xb3
 8001e42:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e44:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb4 <MX_TIM8_Init+0x98>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 10000-1;
 8001e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb4 <MX_TIM8_Init+0x98>)
 8001e4c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001e50:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e52:	4b18      	ldr	r3, [pc, #96]	@ (8001eb4 <MX_TIM8_Init+0x98>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001e58:	4b16      	ldr	r3, [pc, #88]	@ (8001eb4 <MX_TIM8_Init+0x98>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e5e:	4b15      	ldr	r3, [pc, #84]	@ (8001eb4 <MX_TIM8_Init+0x98>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001e64:	4813      	ldr	r0, [pc, #76]	@ (8001eb4 <MX_TIM8_Init+0x98>)
 8001e66:	f002 fde7 	bl	8004a38 <HAL_TIM_Base_Init>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001e70:	f7ff fdee 	bl	8001a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001e7a:	f107 0308 	add.w	r3, r7, #8
 8001e7e:	4619      	mov	r1, r3
 8001e80:	480c      	ldr	r0, [pc, #48]	@ (8001eb4 <MX_TIM8_Init+0x98>)
 8001e82:	f002 ff89 	bl	8004d98 <HAL_TIM_ConfigClockSource>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001e8c:	f7ff fde0 	bl	8001a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e90:	2320      	movs	r3, #32
 8001e92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e98:	463b      	mov	r3, r7
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4805      	ldr	r0, [pc, #20]	@ (8001eb4 <MX_TIM8_Init+0x98>)
 8001e9e:	f003 f9bb 	bl	8005218 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001ea8:	f7ff fdd2 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001eac:	bf00      	nop
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	2000024c 	.word	0x2000024c
 8001eb8:	40010400 	.word	0x40010400

08001ebc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a0e      	ldr	r2, [pc, #56]	@ (8001f04 <HAL_TIM_Base_MspInit+0x48>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d115      	bne.n	8001efa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f08 <HAL_TIM_Base_MspInit+0x4c>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed6:	4a0c      	ldr	r2, [pc, #48]	@ (8001f08 <HAL_TIM_Base_MspInit+0x4c>)
 8001ed8:	f043 0302 	orr.w	r3, r3, #2
 8001edc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ede:	4b0a      	ldr	r3, [pc, #40]	@ (8001f08 <HAL_TIM_Base_MspInit+0x4c>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001eea:	2200      	movs	r2, #0
 8001eec:	2100      	movs	r1, #0
 8001eee:	202c      	movs	r0, #44	@ 0x2c
 8001ef0:	f001 fa4b 	bl	800338a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001ef4:	202c      	movs	r0, #44	@ 0x2c
 8001ef6:	f001 fa64 	bl	80033c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40010400 	.word	0x40010400
 8001f08:	40023800 	.word	0x40023800

08001f0c <__NVIC_GetPriorityGrouping>:
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f10:	4b04      	ldr	r3, [pc, #16]	@ (8001f24 <__NVIC_GetPriorityGrouping+0x18>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	0a1b      	lsrs	r3, r3, #8
 8001f16:	f003 0307 	and.w	r3, r3, #7
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <__NVIC_EnableIRQ>:
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	db0b      	blt.n	8001f52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	f003 021f 	and.w	r2, r3, #31
 8001f40:	4907      	ldr	r1, [pc, #28]	@ (8001f60 <__NVIC_EnableIRQ+0x38>)
 8001f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f46:	095b      	lsrs	r3, r3, #5
 8001f48:	2001      	movs	r0, #1
 8001f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000e100 	.word	0xe000e100

08001f64 <__NVIC_SetPriority>:
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	6039      	str	r1, [r7, #0]
 8001f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	db0a      	blt.n	8001f8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	490c      	ldr	r1, [pc, #48]	@ (8001fb0 <__NVIC_SetPriority+0x4c>)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	0112      	lsls	r2, r2, #4
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	440b      	add	r3, r1
 8001f88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001f8c:	e00a      	b.n	8001fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	4908      	ldr	r1, [pc, #32]	@ (8001fb4 <__NVIC_SetPriority+0x50>)
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	3b04      	subs	r3, #4
 8001f9c:	0112      	lsls	r2, r2, #4
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	761a      	strb	r2, [r3, #24]
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000e100 	.word	0xe000e100
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <NVIC_EncodePriority>:
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b089      	sub	sp, #36	@ 0x24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f1c3 0307 	rsb	r3, r3, #7
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	bf28      	it	cs
 8001fd6:	2304      	movcs	r3, #4
 8001fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	2b06      	cmp	r3, #6
 8001fe0:	d902      	bls.n	8001fe8 <NVIC_EncodePriority+0x30>
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3b03      	subs	r3, #3
 8001fe6:	e000      	b.n	8001fea <NVIC_EncodePriority+0x32>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43da      	mvns	r2, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002000:	f04f 31ff 	mov.w	r1, #4294967295
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	fa01 f303 	lsl.w	r3, r1, r3
 800200a:	43d9      	mvns	r1, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002010:	4313      	orrs	r3, r2
}
 8002012:	4618      	mov	r0, r3
 8002014:	3724      	adds	r7, #36	@ 0x24
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <LL_USART_Enable>:
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	60da      	str	r2, [r3, #12]
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <LL_USART_ConfigAsyncMode>:
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	615a      	str	r2, [r3, #20]
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002074:	4b08      	ldr	r3, [pc, #32]	@ (8002098 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002076:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002078:	4907      	ldr	r1, [pc, #28]	@ (8002098 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4313      	orrs	r3, r2
 800207e:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002080:	4b05      	ldr	r3, [pc, #20]	@ (8002098 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002082:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4013      	ands	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800208a:	68fb      	ldr	r3, [r7, #12]
}
 800208c:	bf00      	nop
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	40023800 	.word	0x40023800

0800209c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80020a4:	4b08      	ldr	r3, [pc, #32]	@ (80020c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80020a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020a8:	4907      	ldr	r1, [pc, #28]	@ (80020c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80020b0:	4b05      	ldr	r3, [pc, #20]	@ (80020c8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80020b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4013      	ands	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020ba:	68fb      	ldr	r3, [r7, #12]
}
 80020bc:	bf00      	nop
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	40023800 	.word	0x40023800

080020cc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80020d4:	4b08      	ldr	r3, [pc, #32]	@ (80020f8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80020d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80020d8:	4907      	ldr	r1, [pc, #28]	@ (80020f8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4313      	orrs	r3, r2
 80020de:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80020e0:	4b05      	ldr	r3, [pc, #20]	@ (80020f8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80020e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4013      	ands	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020ea:	68fb      	ldr	r3, [r7, #12]
}
 80020ec:	bf00      	nop
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	40023800 	.word	0x40023800

080020fc <LL_DMA_SetDataTransferDirection>:
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8002108:	4a0d      	ldr	r2, [pc, #52]	@ (8002140 <LL_DMA_SetDataTransferDirection+0x44>)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	4413      	add	r3, r2
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4413      	add	r3, r2
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800211c:	4908      	ldr	r1, [pc, #32]	@ (8002140 <LL_DMA_SetDataTransferDirection+0x44>)
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	440b      	add	r3, r1
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	4619      	mov	r1, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	440b      	add	r3, r1
 800212a:	4619      	mov	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4313      	orrs	r3, r2
 8002130:	600b      	str	r3, [r1, #0]
}
 8002132:	bf00      	nop
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	0800623c 	.word	0x0800623c

08002144 <LL_DMA_SetMode>:
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8002150:	4a0d      	ldr	r2, [pc, #52]	@ (8002188 <LL_DMA_SetMode+0x44>)
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	4413      	add	r3, r2
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	461a      	mov	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	4413      	add	r3, r2
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8002164:	4908      	ldr	r1, [pc, #32]	@ (8002188 <LL_DMA_SetMode+0x44>)
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	440b      	add	r3, r1
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	4619      	mov	r1, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	440b      	add	r3, r1
 8002172:	4619      	mov	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]
}
 800217a:	bf00      	nop
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	0800623c 	.word	0x0800623c

0800218c <LL_DMA_SetPeriphIncMode>:
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8002198:	4a0d      	ldr	r2, [pc, #52]	@ (80021d0 <LL_DMA_SetPeriphIncMode+0x44>)
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	4413      	add	r3, r2
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	4413      	add	r3, r2
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80021ac:	4908      	ldr	r1, [pc, #32]	@ (80021d0 <LL_DMA_SetPeriphIncMode+0x44>)
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	440b      	add	r3, r1
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	4619      	mov	r1, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	440b      	add	r3, r1
 80021ba:	4619      	mov	r1, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4313      	orrs	r3, r2
 80021c0:	600b      	str	r3, [r1, #0]
}
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	0800623c 	.word	0x0800623c

080021d4 <LL_DMA_SetMemoryIncMode>:
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80021e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002218 <LL_DMA_SetMemoryIncMode+0x44>)
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	4413      	add	r3, r2
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4413      	add	r3, r2
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80021f4:	4908      	ldr	r1, [pc, #32]	@ (8002218 <LL_DMA_SetMemoryIncMode+0x44>)
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	440b      	add	r3, r1
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	4619      	mov	r1, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	440b      	add	r3, r1
 8002202:	4619      	mov	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4313      	orrs	r3, r2
 8002208:	600b      	str	r3, [r1, #0]
}
 800220a:	bf00      	nop
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	0800623c 	.word	0x0800623c

0800221c <LL_DMA_SetPeriphSize>:
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8002228:	4a0d      	ldr	r2, [pc, #52]	@ (8002260 <LL_DMA_SetPeriphSize+0x44>)
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	4413      	add	r3, r2
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4413      	add	r3, r2
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800223c:	4908      	ldr	r1, [pc, #32]	@ (8002260 <LL_DMA_SetPeriphSize+0x44>)
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	440b      	add	r3, r1
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	4619      	mov	r1, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	440b      	add	r3, r1
 800224a:	4619      	mov	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	0800623c 	.word	0x0800623c

08002264 <LL_DMA_SetMemorySize>:
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8002270:	4a0d      	ldr	r2, [pc, #52]	@ (80022a8 <LL_DMA_SetMemorySize+0x44>)
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	4413      	add	r3, r2
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4413      	add	r3, r2
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8002284:	4908      	ldr	r1, [pc, #32]	@ (80022a8 <LL_DMA_SetMemorySize+0x44>)
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	440b      	add	r3, r1
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	4619      	mov	r1, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	440b      	add	r3, r1
 8002292:	4619      	mov	r1, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4313      	orrs	r3, r2
 8002298:	600b      	str	r3, [r1, #0]
}
 800229a:	bf00      	nop
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	0800623c 	.word	0x0800623c

080022ac <LL_DMA_SetStreamPriorityLevel>:
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 80022b8:	4a0d      	ldr	r2, [pc, #52]	@ (80022f0 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	4413      	add	r3, r2
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	461a      	mov	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	4413      	add	r3, r2
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022cc:	4908      	ldr	r1, [pc, #32]	@ (80022f0 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	440b      	add	r3, r1
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	4619      	mov	r1, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	440b      	add	r3, r1
 80022da:	4619      	mov	r1, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]
}
 80022e2:	bf00      	nop
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	0800623c 	.word	0x0800623c

080022f4 <LL_DMA_SetChannelSelection>:
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8002300:	4a0d      	ldr	r2, [pc, #52]	@ (8002338 <LL_DMA_SetChannelSelection+0x44>)
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	4413      	add	r3, r2
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4413      	add	r3, r2
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8002314:	4908      	ldr	r1, [pc, #32]	@ (8002338 <LL_DMA_SetChannelSelection+0x44>)
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	440b      	add	r3, r1
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	4619      	mov	r1, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	440b      	add	r3, r1
 8002322:	4619      	mov	r1, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4313      	orrs	r3, r2
 8002328:	600b      	str	r3, [r1, #0]
}
 800232a:	bf00      	nop
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	0800623c 	.word	0x0800623c

0800233c <LL_DMA_DisableFifoMode>:
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8002346:	4a0c      	ldr	r2, [pc, #48]	@ (8002378 <LL_DMA_DisableFifoMode+0x3c>)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	4413      	add	r3, r2
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4413      	add	r3, r2
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	4908      	ldr	r1, [pc, #32]	@ (8002378 <LL_DMA_DisableFifoMode+0x3c>)
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	440a      	add	r2, r1
 800235c:	7812      	ldrb	r2, [r2, #0]
 800235e:	4611      	mov	r1, r2
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	440a      	add	r2, r1
 8002364:	f023 0304 	bic.w	r3, r3, #4
 8002368:	6153      	str	r3, [r2, #20]
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	0800623c 	.word	0x0800623c

0800237c <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08e      	sub	sp, #56	@ 0x38
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002382:	f107 031c 	add.w	r3, r7, #28
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	60da      	str	r2, [r3, #12]
 8002390:	611a      	str	r2, [r3, #16]
 8002392:	615a      	str	r2, [r3, #20]
 8002394:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002396:	1d3b      	adds	r3, r7, #4
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	611a      	str	r2, [r3, #16]
 80023a4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80023a6:	2010      	movs	r0, #16
 80023a8:	f7ff fe90 	bl	80020cc <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80023ac:	2002      	movs	r0, #2
 80023ae:	f7ff fe5d 	bl	800206c <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80023b2:	23c0      	movs	r3, #192	@ 0xc0
 80023b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80023b6:	2302      	movs	r3, #2
 80023b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80023ba:	2303      	movs	r3, #3
 80023bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80023c6:	2307      	movs	r3, #7
 80023c8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ca:	1d3b      	adds	r3, r7, #4
 80023cc:	4619      	mov	r1, r3
 80023ce:	4848      	ldr	r0, [pc, #288]	@ (80024f0 <MX_USART1_UART_Init+0x174>)
 80023d0:	f003 f8fd 	bl	80055ce <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_RX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_2, LL_DMA_CHANNEL_4);
 80023d4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80023d8:	2102      	movs	r1, #2
 80023da:	4846      	ldr	r0, [pc, #280]	@ (80024f4 <MX_USART1_UART_Init+0x178>)
 80023dc:	f7ff ff8a 	bl	80022f4 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80023e0:	2200      	movs	r2, #0
 80023e2:	2102      	movs	r1, #2
 80023e4:	4843      	ldr	r0, [pc, #268]	@ (80024f4 <MX_USART1_UART_Init+0x178>)
 80023e6:	f7ff fe89 	bl	80020fc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_2, LL_DMA_PRIORITY_LOW);
 80023ea:	2200      	movs	r2, #0
 80023ec:	2102      	movs	r1, #2
 80023ee:	4841      	ldr	r0, [pc, #260]	@ (80024f4 <MX_USART1_UART_Init+0x178>)
 80023f0:	f7ff ff5c 	bl	80022ac <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MODE_CIRCULAR);
 80023f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023f8:	2102      	movs	r1, #2
 80023fa:	483e      	ldr	r0, [pc, #248]	@ (80024f4 <MX_USART1_UART_Init+0x178>)
 80023fc:	f7ff fea2 	bl	8002144 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_PERIPH_NOINCREMENT);
 8002400:	2200      	movs	r2, #0
 8002402:	2102      	movs	r1, #2
 8002404:	483b      	ldr	r0, [pc, #236]	@ (80024f4 <MX_USART1_UART_Init+0x178>)
 8002406:	f7ff fec1 	bl	800218c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MEMORY_INCREMENT);
 800240a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800240e:	2102      	movs	r1, #2
 8002410:	4838      	ldr	r0, [pc, #224]	@ (80024f4 <MX_USART1_UART_Init+0x178>)
 8002412:	f7ff fedf 	bl	80021d4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_2, LL_DMA_PDATAALIGN_BYTE);
 8002416:	2200      	movs	r2, #0
 8002418:	2102      	movs	r1, #2
 800241a:	4836      	ldr	r0, [pc, #216]	@ (80024f4 <MX_USART1_UART_Init+0x178>)
 800241c:	f7ff fefe 	bl	800221c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_2, LL_DMA_MDATAALIGN_BYTE);
 8002420:	2200      	movs	r2, #0
 8002422:	2102      	movs	r1, #2
 8002424:	4833      	ldr	r0, [pc, #204]	@ (80024f4 <MX_USART1_UART_Init+0x178>)
 8002426:	f7ff ff1d 	bl	8002264 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_2);
 800242a:	2102      	movs	r1, #2
 800242c:	4831      	ldr	r0, [pc, #196]	@ (80024f4 <MX_USART1_UART_Init+0x178>)
 800242e:	f7ff ff85 	bl	800233c <LL_DMA_DisableFifoMode>

  /* USART1_TX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_7, LL_DMA_CHANNEL_4);
 8002432:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002436:	2107      	movs	r1, #7
 8002438:	482e      	ldr	r0, [pc, #184]	@ (80024f4 <MX_USART1_UART_Init+0x178>)
 800243a:	f7ff ff5b 	bl	80022f4 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800243e:	2240      	movs	r2, #64	@ 0x40
 8002440:	2107      	movs	r1, #7
 8002442:	482c      	ldr	r0, [pc, #176]	@ (80024f4 <MX_USART1_UART_Init+0x178>)
 8002444:	f7ff fe5a 	bl	80020fc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_7, LL_DMA_PRIORITY_LOW);
 8002448:	2200      	movs	r2, #0
 800244a:	2107      	movs	r1, #7
 800244c:	4829      	ldr	r0, [pc, #164]	@ (80024f4 <MX_USART1_UART_Init+0x178>)
 800244e:	f7ff ff2d 	bl	80022ac <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_7, LL_DMA_MODE_CIRCULAR);
 8002452:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002456:	2107      	movs	r1, #7
 8002458:	4826      	ldr	r0, [pc, #152]	@ (80024f4 <MX_USART1_UART_Init+0x178>)
 800245a:	f7ff fe73 	bl	8002144 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_7, LL_DMA_PERIPH_NOINCREMENT);
 800245e:	2200      	movs	r2, #0
 8002460:	2107      	movs	r1, #7
 8002462:	4824      	ldr	r0, [pc, #144]	@ (80024f4 <MX_USART1_UART_Init+0x178>)
 8002464:	f7ff fe92 	bl	800218c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_7, LL_DMA_MEMORY_INCREMENT);
 8002468:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800246c:	2107      	movs	r1, #7
 800246e:	4821      	ldr	r0, [pc, #132]	@ (80024f4 <MX_USART1_UART_Init+0x178>)
 8002470:	f7ff feb0 	bl	80021d4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_7, LL_DMA_PDATAALIGN_BYTE);
 8002474:	2200      	movs	r2, #0
 8002476:	2107      	movs	r1, #7
 8002478:	481e      	ldr	r0, [pc, #120]	@ (80024f4 <MX_USART1_UART_Init+0x178>)
 800247a:	f7ff fecf 	bl	800221c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_7, LL_DMA_MDATAALIGN_BYTE);
 800247e:	2200      	movs	r2, #0
 8002480:	2107      	movs	r1, #7
 8002482:	481c      	ldr	r0, [pc, #112]	@ (80024f4 <MX_USART1_UART_Init+0x178>)
 8002484:	f7ff feee 	bl	8002264 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_7);
 8002488:	2107      	movs	r1, #7
 800248a:	481a      	ldr	r0, [pc, #104]	@ (80024f4 <MX_USART1_UART_Init+0x178>)
 800248c:	f7ff ff56 	bl	800233c <LL_DMA_DisableFifoMode>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002490:	f7ff fd3c 	bl	8001f0c <__NVIC_GetPriorityGrouping>
 8002494:	4603      	mov	r3, r0
 8002496:	2200      	movs	r2, #0
 8002498:	2100      	movs	r1, #0
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fd8c 	bl	8001fb8 <NVIC_EncodePriority>
 80024a0:	4603      	mov	r3, r0
 80024a2:	4619      	mov	r1, r3
 80024a4:	2025      	movs	r0, #37	@ 0x25
 80024a6:	f7ff fd5d 	bl	8001f64 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80024aa:	2025      	movs	r0, #37	@ 0x25
 80024ac:	f7ff fd3c 	bl	8001f28 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80024b0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80024b4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80024b6:	2300      	movs	r3, #0
 80024b8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80024ba:	2300      	movs	r3, #0
 80024bc:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80024be:	2300      	movs	r3, #0
 80024c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80024c2:	230c      	movs	r3, #12
 80024c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80024c6:	2300      	movs	r3, #0
 80024c8:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80024ca:	2300      	movs	r3, #0
 80024cc:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 80024ce:	f107 031c 	add.w	r3, r7, #28
 80024d2:	4619      	mov	r1, r3
 80024d4:	4808      	ldr	r0, [pc, #32]	@ (80024f8 <MX_USART1_UART_Init+0x17c>)
 80024d6:	f003 fcd7 	bl	8005e88 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80024da:	4807      	ldr	r0, [pc, #28]	@ (80024f8 <MX_USART1_UART_Init+0x17c>)
 80024dc:	f7ff fdaf 	bl	800203e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80024e0:	4805      	ldr	r0, [pc, #20]	@ (80024f8 <MX_USART1_UART_Init+0x17c>)
 80024e2:	f7ff fd9c 	bl	800201e <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024e6:	bf00      	nop
 80024e8:	3738      	adds	r7, #56	@ 0x38
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40020400 	.word	0x40020400
 80024f4:	40026400 	.word	0x40026400
 80024f8:	40011000 	.word	0x40011000

080024fc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08e      	sub	sp, #56	@ 0x38
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002502:	f107 031c 	add.w	r3, r7, #28
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	605a      	str	r2, [r3, #4]
 800250c:	609a      	str	r2, [r3, #8]
 800250e:	60da      	str	r2, [r3, #12]
 8002510:	611a      	str	r2, [r3, #16]
 8002512:	615a      	str	r2, [r3, #20]
 8002514:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002516:	1d3b      	adds	r3, r7, #4
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	611a      	str	r2, [r3, #16]
 8002524:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8002526:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800252a:	f7ff fdb7 	bl	800209c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800252e:	2004      	movs	r0, #4
 8002530:	f7ff fd9c 	bl	800206c <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PC5   ------> USART3_RX
  PC10   ------> USART3_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_10;
 8002534:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8002538:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800253a:	2302      	movs	r3, #2
 800253c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800253e:	2303      	movs	r3, #3
 8002540:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800254a:	2307      	movs	r3, #7
 800254c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	4619      	mov	r1, r3
 8002552:	4830      	ldr	r0, [pc, #192]	@ (8002614 <MX_USART3_UART_Init+0x118>)
 8002554:	f003 f83b 	bl	80055ce <LL_GPIO_Init>

  /* USART3 DMA Init */

  /* USART3_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_3, LL_DMA_CHANNEL_4);
 8002558:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800255c:	2103      	movs	r1, #3
 800255e:	482e      	ldr	r0, [pc, #184]	@ (8002618 <MX_USART3_UART_Init+0x11c>)
 8002560:	f7ff fec8 	bl	80022f4 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002564:	2240      	movs	r2, #64	@ 0x40
 8002566:	2103      	movs	r1, #3
 8002568:	482b      	ldr	r0, [pc, #172]	@ (8002618 <MX_USART3_UART_Init+0x11c>)
 800256a:	f7ff fdc7 	bl	80020fc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_3, LL_DMA_PRIORITY_LOW);
 800256e:	2200      	movs	r2, #0
 8002570:	2103      	movs	r1, #3
 8002572:	4829      	ldr	r0, [pc, #164]	@ (8002618 <MX_USART3_UART_Init+0x11c>)
 8002574:	f7ff fe9a 	bl	80022ac <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_3, LL_DMA_MODE_CIRCULAR);
 8002578:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800257c:	2103      	movs	r1, #3
 800257e:	4826      	ldr	r0, [pc, #152]	@ (8002618 <MX_USART3_UART_Init+0x11c>)
 8002580:	f7ff fde0 	bl	8002144 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_3, LL_DMA_PERIPH_NOINCREMENT);
 8002584:	2200      	movs	r2, #0
 8002586:	2103      	movs	r1, #3
 8002588:	4823      	ldr	r0, [pc, #140]	@ (8002618 <MX_USART3_UART_Init+0x11c>)
 800258a:	f7ff fdff 	bl	800218c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_3, LL_DMA_MEMORY_INCREMENT);
 800258e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002592:	2103      	movs	r1, #3
 8002594:	4820      	ldr	r0, [pc, #128]	@ (8002618 <MX_USART3_UART_Init+0x11c>)
 8002596:	f7ff fe1d 	bl	80021d4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_3, LL_DMA_PDATAALIGN_BYTE);
 800259a:	2200      	movs	r2, #0
 800259c:	2103      	movs	r1, #3
 800259e:	481e      	ldr	r0, [pc, #120]	@ (8002618 <MX_USART3_UART_Init+0x11c>)
 80025a0:	f7ff fe3c 	bl	800221c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_3, LL_DMA_MDATAALIGN_BYTE);
 80025a4:	2200      	movs	r2, #0
 80025a6:	2103      	movs	r1, #3
 80025a8:	481b      	ldr	r0, [pc, #108]	@ (8002618 <MX_USART3_UART_Init+0x11c>)
 80025aa:	f7ff fe5b 	bl	8002264 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_3);
 80025ae:	2103      	movs	r1, #3
 80025b0:	4819      	ldr	r0, [pc, #100]	@ (8002618 <MX_USART3_UART_Init+0x11c>)
 80025b2:	f7ff fec3 	bl	800233c <LL_DMA_DisableFifoMode>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80025b6:	f7ff fca9 	bl	8001f0c <__NVIC_GetPriorityGrouping>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2200      	movs	r2, #0
 80025be:	2100      	movs	r1, #0
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fcf9 	bl	8001fb8 <NVIC_EncodePriority>
 80025c6:	4603      	mov	r3, r0
 80025c8:	4619      	mov	r1, r3
 80025ca:	2027      	movs	r0, #39	@ 0x27
 80025cc:	f7ff fcca 	bl	8001f64 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 80025d0:	2027      	movs	r0, #39	@ 0x27
 80025d2:	f7ff fca9 	bl	8001f28 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 1000000;
 80025d6:	4b11      	ldr	r3, [pc, #68]	@ (800261c <MX_USART3_UART_Init+0x120>)
 80025d8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80025da:	2300      	movs	r3, #0
 80025dc:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80025de:	2300      	movs	r3, #0
 80025e0:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80025e2:	2300      	movs	r3, #0
 80025e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80025e6:	230c      	movs	r3, #12
 80025e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80025ea:	2300      	movs	r3, #0
 80025ec:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80025ee:	2300      	movs	r3, #0
 80025f0:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 80025f2:	f107 031c 	add.w	r3, r7, #28
 80025f6:	4619      	mov	r1, r3
 80025f8:	4809      	ldr	r0, [pc, #36]	@ (8002620 <MX_USART3_UART_Init+0x124>)
 80025fa:	f003 fc45 	bl	8005e88 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 80025fe:	4808      	ldr	r0, [pc, #32]	@ (8002620 <MX_USART3_UART_Init+0x124>)
 8002600:	f7ff fd1d 	bl	800203e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8002604:	4806      	ldr	r0, [pc, #24]	@ (8002620 <MX_USART3_UART_Init+0x124>)
 8002606:	f7ff fd0a 	bl	800201e <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800260a:	bf00      	nop
 800260c:	3738      	adds	r7, #56	@ 0x38
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40020800 	.word	0x40020800
 8002618:	40026000 	.word	0x40026000
 800261c:	000f4240 	.word	0x000f4240
 8002620:	40004800 	.word	0x40004800

08002624 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002624:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800265c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002628:	f7ff fbe6 	bl	8001df8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800262c:	480c      	ldr	r0, [pc, #48]	@ (8002660 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800262e:	490d      	ldr	r1, [pc, #52]	@ (8002664 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002630:	4a0d      	ldr	r2, [pc, #52]	@ (8002668 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002634:	e002      	b.n	800263c <LoopCopyDataInit>

08002636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800263a:	3304      	adds	r3, #4

0800263c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800263c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800263e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002640:	d3f9      	bcc.n	8002636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002642:	4a0a      	ldr	r2, [pc, #40]	@ (800266c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002644:	4c0a      	ldr	r4, [pc, #40]	@ (8002670 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002648:	e001      	b.n	800264e <LoopFillZerobss>

0800264a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800264a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800264c:	3204      	adds	r2, #4

0800264e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800264e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002650:	d3fb      	bcc.n	800264a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002652:	f003 fca1 	bl	8005f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002656:	f7fe fe23 	bl	80012a0 <main>
  bx  lr    
 800265a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800265c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002664:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002668:	0800625c 	.word	0x0800625c
  ldr r2, =_sbss
 800266c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002670:	20000298 	.word	0x20000298

08002674 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002674:	e7fe      	b.n	8002674 <CAN1_RX0_IRQHandler>
	...

08002678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800267c:	4b0e      	ldr	r3, [pc, #56]	@ (80026b8 <HAL_Init+0x40>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a0d      	ldr	r2, [pc, #52]	@ (80026b8 <HAL_Init+0x40>)
 8002682:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002686:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002688:	4b0b      	ldr	r3, [pc, #44]	@ (80026b8 <HAL_Init+0x40>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a0a      	ldr	r2, [pc, #40]	@ (80026b8 <HAL_Init+0x40>)
 800268e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002692:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002694:	4b08      	ldr	r3, [pc, #32]	@ (80026b8 <HAL_Init+0x40>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a07      	ldr	r2, [pc, #28]	@ (80026b8 <HAL_Init+0x40>)
 800269a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800269e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026a0:	2003      	movs	r0, #3
 80026a2:	f000 fe67 	bl	8003374 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026a6:	200f      	movs	r0, #15
 80026a8:	f000 f808 	bl	80026bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026ac:	f7ff f9d6 	bl	8001a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40023c00 	.word	0x40023c00

080026bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026c4:	4b12      	ldr	r3, [pc, #72]	@ (8002710 <HAL_InitTick+0x54>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4b12      	ldr	r3, [pc, #72]	@ (8002714 <HAL_InitTick+0x58>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	4619      	mov	r1, r3
 80026ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fe7f 	bl	80033de <HAL_SYSTICK_Config>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e00e      	b.n	8002708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b0f      	cmp	r3, #15
 80026ee:	d80a      	bhi.n	8002706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026f0:	2200      	movs	r2, #0
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295
 80026f8:	f000 fe47 	bl	800338a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026fc:	4a06      	ldr	r2, [pc, #24]	@ (8002718 <HAL_InitTick+0x5c>)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	e000      	b.n	8002708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20000000 	.word	0x20000000
 8002714:	20000008 	.word	0x20000008
 8002718:	20000004 	.word	0x20000004

0800271c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002720:	4b06      	ldr	r3, [pc, #24]	@ (800273c <HAL_IncTick+0x20>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	461a      	mov	r2, r3
 8002726:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <HAL_IncTick+0x24>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4413      	add	r3, r2
 800272c:	4a04      	ldr	r2, [pc, #16]	@ (8002740 <HAL_IncTick+0x24>)
 800272e:	6013      	str	r3, [r2, #0]
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	20000008 	.word	0x20000008
 8002740:	20000294 	.word	0x20000294

08002744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return uwTick;
 8002748:	4b03      	ldr	r3, [pc, #12]	@ (8002758 <HAL_GetTick+0x14>)
 800274a:	681b      	ldr	r3, [r3, #0]
}
 800274c:	4618      	mov	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	20000294 	.word	0x20000294

0800275c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e033      	b.n	80027da <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	2b00      	cmp	r3, #0
 8002778:	d109      	bne.n	800278e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7fe fa38 	bl	8000bf0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	f003 0310 	and.w	r3, r3, #16
 8002796:	2b00      	cmp	r3, #0
 8002798:	d118      	bne.n	80027cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80027a2:	f023 0302 	bic.w	r3, r3, #2
 80027a6:	f043 0202 	orr.w	r2, r3, #2
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 fb88 	bl	8002ec4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027be:	f023 0303 	bic.w	r3, r3, #3
 80027c2:	f043 0201 	orr.w	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80027ca:	e001      	b.n	80027d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b086      	sub	sp, #24
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	2300      	movs	r3, #0
 80027f0:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d049      	beq.n	80028ac <HAL_ADC_IRQHandler+0xca>
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d046      	beq.n	80028ac <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	2b00      	cmp	r3, #0
 8002828:	d105      	bne.n	8002836 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d12b      	bne.n	800289c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002848:	2b00      	cmp	r3, #0
 800284a:	d127      	bne.n	800289c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002852:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002856:	2b00      	cmp	r3, #0
 8002858:	d006      	beq.n	8002868 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002864:	2b00      	cmp	r3, #0
 8002866:	d119      	bne.n	800289c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0220 	bic.w	r2, r2, #32
 8002876:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002888:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d105      	bne.n	800289c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002894:	f043 0201 	orr.w	r2, r3, #1
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7fe fde9 	bl	8001474 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f06f 0212 	mvn.w	r2, #18
 80028aa:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ba:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d057      	beq.n	8002972 <HAL_ADC_IRQHandler+0x190>
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d054      	beq.n	8002972 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d105      	bne.n	80028e0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d139      	bne.n	8002962 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d006      	beq.n	800290a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002906:	2b00      	cmp	r3, #0
 8002908:	d12b      	bne.n	8002962 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002914:	2b00      	cmp	r3, #0
 8002916:	d124      	bne.n	8002962 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002922:	2b00      	cmp	r3, #0
 8002924:	d11d      	bne.n	8002962 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800292a:	2b00      	cmp	r3, #0
 800292c:	d119      	bne.n	8002962 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800293c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002952:	2b00      	cmp	r3, #0
 8002954:	d105      	bne.n	8002962 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295a:	f043 0201 	orr.w	r2, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 fc2c 	bl	80031c0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f06f 020c 	mvn.w	r2, #12
 8002970:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002980:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d017      	beq.n	80029b8 <HAL_ADC_IRQHandler+0x1d6>
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d014      	beq.n	80029b8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b01      	cmp	r3, #1
 800299a:	d10d      	bne.n	80029b8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f945 	bl	8002c38 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f06f 0201 	mvn.w	r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 0320 	and.w	r3, r3, #32
 80029be:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029c6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d015      	beq.n	80029fa <HAL_ADC_IRQHandler+0x218>
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d012      	beq.n	80029fa <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d8:	f043 0202 	orr.w	r2, r3, #2
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f06f 0220 	mvn.w	r2, #32
 80029e8:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f92e 	bl	8002c4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f06f 0220 	mvn.w	r2, #32
 80029f8:	601a      	str	r2, [r3, #0]
  }
}
 80029fa:	bf00      	nop
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
	...

08002a04 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_ADC_Start_DMA+0x1e>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e0e9      	b.n	8002bf6 <HAL_ADC_Start_DMA+0x1f2>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d018      	beq.n	8002a6a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0201 	orr.w	r2, r2, #1
 8002a46:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a48:	4b6d      	ldr	r3, [pc, #436]	@ (8002c00 <HAL_ADC_Start_DMA+0x1fc>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a6d      	ldr	r2, [pc, #436]	@ (8002c04 <HAL_ADC_Start_DMA+0x200>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	0c9a      	lsrs	r2, r3, #18
 8002a54:	4613      	mov	r3, r2
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	4413      	add	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002a5c:	e002      	b.n	8002a64 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	3b01      	subs	r3, #1
 8002a62:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f9      	bne.n	8002a5e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a78:	d107      	bne.n	8002a8a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a88:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	f040 80a1 	bne.w	8002bdc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002aa2:	f023 0301 	bic.w	r3, r3, #1
 8002aa6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d007      	beq.n	8002acc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ac4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ad4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ad8:	d106      	bne.n	8002ae8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ade:	f023 0206 	bic.w	r2, r3, #6
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	645a      	str	r2, [r3, #68]	@ 0x44
 8002ae6:	e002      	b.n	8002aee <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002af6:	4b44      	ldr	r3, [pc, #272]	@ (8002c08 <HAL_ADC_Start_DMA+0x204>)
 8002af8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002afe:	4a43      	ldr	r2, [pc, #268]	@ (8002c0c <HAL_ADC_Start_DMA+0x208>)
 8002b00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b06:	4a42      	ldr	r2, [pc, #264]	@ (8002c10 <HAL_ADC_Start_DMA+0x20c>)
 8002b08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b0e:	4a41      	ldr	r2, [pc, #260]	@ (8002c14 <HAL_ADC_Start_DMA+0x210>)
 8002b10:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002b1a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002b2a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b3a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	334c      	adds	r3, #76	@ 0x4c
 8002b46:	4619      	mov	r1, r3
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f000 fd02 	bl	8003554 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 031f 	and.w	r3, r3, #31
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d12a      	bne.n	8002bb2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a2d      	ldr	r2, [pc, #180]	@ (8002c18 <HAL_ADC_Start_DMA+0x214>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d015      	beq.n	8002b92 <HAL_ADC_Start_DMA+0x18e>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a2c      	ldr	r2, [pc, #176]	@ (8002c1c <HAL_ADC_Start_DMA+0x218>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d105      	bne.n	8002b7c <HAL_ADC_Start_DMA+0x178>
 8002b70:	4b25      	ldr	r3, [pc, #148]	@ (8002c08 <HAL_ADC_Start_DMA+0x204>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 031f 	and.w	r3, r3, #31
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00a      	beq.n	8002b92 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a27      	ldr	r2, [pc, #156]	@ (8002c20 <HAL_ADC_Start_DMA+0x21c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d136      	bne.n	8002bf4 <HAL_ADC_Start_DMA+0x1f0>
 8002b86:	4b20      	ldr	r3, [pc, #128]	@ (8002c08 <HAL_ADC_Start_DMA+0x204>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f003 0310 	and.w	r3, r3, #16
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d130      	bne.n	8002bf4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d129      	bne.n	8002bf4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	e020      	b.n	8002bf4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a18      	ldr	r2, [pc, #96]	@ (8002c18 <HAL_ADC_Start_DMA+0x214>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d11b      	bne.n	8002bf4 <HAL_ADC_Start_DMA+0x1f0>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d114      	bne.n	8002bf4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002bd8:	609a      	str	r2, [r3, #8]
 8002bda:	e00b      	b.n	8002bf4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be0:	f043 0210 	orr.w	r2, r3, #16
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bec:	f043 0201 	orr.w	r2, r3, #1
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	20000000 	.word	0x20000000
 8002c04:	431bde83 	.word	0x431bde83
 8002c08:	40012300 	.word	0x40012300
 8002c0c:	080030bd 	.word	0x080030bd
 8002c10:	08003177 	.word	0x08003177
 8002c14:	08003193 	.word	0x08003193
 8002c18:	40012000 	.word	0x40012000
 8002c1c:	40012100 	.word	0x40012100
 8002c20:	40012200 	.word	0x40012200

08002c24 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x1c>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e113      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x244>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b09      	cmp	r3, #9
 8002c8a:	d925      	bls.n	8002cd8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68d9      	ldr	r1, [r3, #12]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3b1e      	subs	r3, #30
 8002ca2:	2207      	movs	r2, #7
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43da      	mvns	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	400a      	ands	r2, r1
 8002cb0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68d9      	ldr	r1, [r3, #12]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	4403      	add	r3, r0
 8002cca:	3b1e      	subs	r3, #30
 8002ccc:	409a      	lsls	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	60da      	str	r2, [r3, #12]
 8002cd6:	e022      	b.n	8002d1e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6919      	ldr	r1, [r3, #16]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	4413      	add	r3, r2
 8002cec:	2207      	movs	r2, #7
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43da      	mvns	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	400a      	ands	r2, r1
 8002cfa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6919      	ldr	r1, [r3, #16]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	4603      	mov	r3, r0
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	4403      	add	r3, r0
 8002d14:	409a      	lsls	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b06      	cmp	r3, #6
 8002d24:	d824      	bhi.n	8002d70 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	3b05      	subs	r3, #5
 8002d38:	221f      	movs	r2, #31
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43da      	mvns	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	400a      	ands	r2, r1
 8002d46:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	4618      	mov	r0, r3
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	3b05      	subs	r3, #5
 8002d62:	fa00 f203 	lsl.w	r2, r0, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d6e:	e04c      	b.n	8002e0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b0c      	cmp	r3, #12
 8002d76:	d824      	bhi.n	8002dc2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	3b23      	subs	r3, #35	@ 0x23
 8002d8a:	221f      	movs	r2, #31
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43da      	mvns	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	400a      	ands	r2, r1
 8002d98:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	4618      	mov	r0, r3
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	3b23      	subs	r3, #35	@ 0x23
 8002db4:	fa00 f203 	lsl.w	r2, r0, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	631a      	str	r2, [r3, #48]	@ 0x30
 8002dc0:	e023      	b.n	8002e0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3b41      	subs	r3, #65	@ 0x41
 8002dd4:	221f      	movs	r2, #31
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43da      	mvns	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	400a      	ands	r2, r1
 8002de2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	4618      	mov	r0, r3
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3b41      	subs	r3, #65	@ 0x41
 8002dfe:	fa00 f203 	lsl.w	r2, r0, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e0a:	4b29      	ldr	r3, [pc, #164]	@ (8002eb0 <HAL_ADC_ConfigChannel+0x250>)
 8002e0c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a28      	ldr	r2, [pc, #160]	@ (8002eb4 <HAL_ADC_ConfigChannel+0x254>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d10f      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x1d8>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b12      	cmp	r3, #18
 8002e1e:	d10b      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8002eb4 <HAL_ADC_ConfigChannel+0x254>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d12b      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x23a>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a1c      	ldr	r2, [pc, #112]	@ (8002eb8 <HAL_ADC_ConfigChannel+0x258>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d003      	beq.n	8002e54 <HAL_ADC_ConfigChannel+0x1f4>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b11      	cmp	r3, #17
 8002e52:	d122      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a11      	ldr	r2, [pc, #68]	@ (8002eb8 <HAL_ADC_ConfigChannel+0x258>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d111      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e76:	4b11      	ldr	r3, [pc, #68]	@ (8002ebc <HAL_ADC_ConfigChannel+0x25c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a11      	ldr	r2, [pc, #68]	@ (8002ec0 <HAL_ADC_ConfigChannel+0x260>)
 8002e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e80:	0c9a      	lsrs	r2, r3, #18
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002e8c:	e002      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	3b01      	subs	r3, #1
 8002e92:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f9      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	40012300 	.word	0x40012300
 8002eb4:	40012000 	.word	0x40012000
 8002eb8:	10000012 	.word	0x10000012
 8002ebc:	20000000 	.word	0x20000000
 8002ec0:	431bde83 	.word	0x431bde83

08002ec4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ecc:	4b79      	ldr	r3, [pc, #484]	@ (80030b4 <ADC_Init+0x1f0>)
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ef8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6859      	ldr	r1, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	021a      	lsls	r2, r3, #8
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002f1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6859      	ldr	r1, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6899      	ldr	r1, [r3, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f56:	4a58      	ldr	r2, [pc, #352]	@ (80030b8 <ADC_Init+0x1f4>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d022      	beq.n	8002fa2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6899      	ldr	r1, [r3, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002f8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6899      	ldr	r1, [r3, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	609a      	str	r2, [r3, #8]
 8002fa0:	e00f      	b.n	8002fc2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002fc0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0202 	bic.w	r2, r2, #2
 8002fd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6899      	ldr	r1, [r3, #8]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	7e1b      	ldrb	r3, [r3, #24]
 8002fdc:	005a      	lsls	r2, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d01b      	beq.n	8003028 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ffe:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800300e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6859      	ldr	r1, [r3, #4]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301a:	3b01      	subs	r3, #1
 800301c:	035a      	lsls	r2, r3, #13
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	e007      	b.n	8003038 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003036:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003046:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	3b01      	subs	r3, #1
 8003054:	051a      	lsls	r2, r3, #20
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800306c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6899      	ldr	r1, [r3, #8]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800307a:	025a      	lsls	r2, r3, #9
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003092:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6899      	ldr	r1, [r3, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	029a      	lsls	r2, r3, #10
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	609a      	str	r2, [r3, #8]
}
 80030a8:	bf00      	nop
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	40012300 	.word	0x40012300
 80030b8:	0f000001 	.word	0x0f000001

080030bc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ce:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d13c      	bne.n	8003150 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d12b      	bne.n	8003148 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d127      	bne.n	8003148 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003102:	2b00      	cmp	r3, #0
 8003104:	d006      	beq.n	8003114 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003110:	2b00      	cmp	r3, #0
 8003112:	d119      	bne.n	8003148 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0220 	bic.w	r2, r2, #32
 8003122:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003128:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003134:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d105      	bne.n	8003148 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003140:	f043 0201 	orr.w	r2, r3, #1
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f7fe f993 	bl	8001474 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800314e:	e00e      	b.n	800316e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003154:	f003 0310 	and.w	r3, r3, #16
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f7ff fd75 	bl	8002c4c <HAL_ADC_ErrorCallback>
}
 8003162:	e004      	b.n	800316e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	4798      	blx	r3
}
 800316e:	bf00      	nop
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003182:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f7ff fd4d 	bl	8002c24 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800318a:	bf00      	nop
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b084      	sub	sp, #16
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2240      	movs	r2, #64	@ 0x40
 80031a4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031aa:	f043 0204 	orr.w	r2, r3, #4
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f7ff fd4a 	bl	8002c4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031b8:	bf00      	nop
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <__NVIC_SetPriorityGrouping>:
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003218 <__NVIC_SetPriorityGrouping+0x44>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031f0:	4013      	ands	r3, r2
 80031f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003200:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003206:	4a04      	ldr	r2, [pc, #16]	@ (8003218 <__NVIC_SetPriorityGrouping+0x44>)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	60d3      	str	r3, [r2, #12]
}
 800320c:	bf00      	nop
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	e000ed00 	.word	0xe000ed00

0800321c <__NVIC_GetPriorityGrouping>:
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003220:	4b04      	ldr	r3, [pc, #16]	@ (8003234 <__NVIC_GetPriorityGrouping+0x18>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	0a1b      	lsrs	r3, r3, #8
 8003226:	f003 0307 	and.w	r3, r3, #7
}
 800322a:	4618      	mov	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	e000ed00 	.word	0xe000ed00

08003238 <__NVIC_EnableIRQ>:
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003246:	2b00      	cmp	r3, #0
 8003248:	db0b      	blt.n	8003262 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	f003 021f 	and.w	r2, r3, #31
 8003250:	4907      	ldr	r1, [pc, #28]	@ (8003270 <__NVIC_EnableIRQ+0x38>)
 8003252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	2001      	movs	r0, #1
 800325a:	fa00 f202 	lsl.w	r2, r0, r2
 800325e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	e000e100 	.word	0xe000e100

08003274 <__NVIC_SetPriority>:
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	6039      	str	r1, [r7, #0]
 800327e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003284:	2b00      	cmp	r3, #0
 8003286:	db0a      	blt.n	800329e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	b2da      	uxtb	r2, r3
 800328c:	490c      	ldr	r1, [pc, #48]	@ (80032c0 <__NVIC_SetPriority+0x4c>)
 800328e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003292:	0112      	lsls	r2, r2, #4
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	440b      	add	r3, r1
 8003298:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800329c:	e00a      	b.n	80032b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	4908      	ldr	r1, [pc, #32]	@ (80032c4 <__NVIC_SetPriority+0x50>)
 80032a4:	79fb      	ldrb	r3, [r7, #7]
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	3b04      	subs	r3, #4
 80032ac:	0112      	lsls	r2, r2, #4
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	440b      	add	r3, r1
 80032b2:	761a      	strb	r2, [r3, #24]
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	e000e100 	.word	0xe000e100
 80032c4:	e000ed00 	.word	0xe000ed00

080032c8 <NVIC_EncodePriority>:
{
 80032c8:	b480      	push	{r7}
 80032ca:	b089      	sub	sp, #36	@ 0x24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	f1c3 0307 	rsb	r3, r3, #7
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	bf28      	it	cs
 80032e6:	2304      	movcs	r3, #4
 80032e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	3304      	adds	r3, #4
 80032ee:	2b06      	cmp	r3, #6
 80032f0:	d902      	bls.n	80032f8 <NVIC_EncodePriority+0x30>
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	3b03      	subs	r3, #3
 80032f6:	e000      	b.n	80032fa <NVIC_EncodePriority+0x32>
 80032f8:	2300      	movs	r3, #0
 80032fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43da      	mvns	r2, r3
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	401a      	ands	r2, r3
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003310:	f04f 31ff 	mov.w	r1, #4294967295
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	fa01 f303 	lsl.w	r3, r1, r3
 800331a:	43d9      	mvns	r1, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003320:	4313      	orrs	r3, r2
}
 8003322:	4618      	mov	r0, r3
 8003324:	3724      	adds	r7, #36	@ 0x24
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
	...

08003330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3b01      	subs	r3, #1
 800333c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003340:	d301      	bcc.n	8003346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003342:	2301      	movs	r3, #1
 8003344:	e00f      	b.n	8003366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003346:	4a0a      	ldr	r2, [pc, #40]	@ (8003370 <SysTick_Config+0x40>)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3b01      	subs	r3, #1
 800334c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800334e:	210f      	movs	r1, #15
 8003350:	f04f 30ff 	mov.w	r0, #4294967295
 8003354:	f7ff ff8e 	bl	8003274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003358:	4b05      	ldr	r3, [pc, #20]	@ (8003370 <SysTick_Config+0x40>)
 800335a:	2200      	movs	r2, #0
 800335c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800335e:	4b04      	ldr	r3, [pc, #16]	@ (8003370 <SysTick_Config+0x40>)
 8003360:	2207      	movs	r2, #7
 8003362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	e000e010 	.word	0xe000e010

08003374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7ff ff29 	bl	80031d4 <__NVIC_SetPriorityGrouping>
}
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800338a:	b580      	push	{r7, lr}
 800338c:	b086      	sub	sp, #24
 800338e:	af00      	add	r7, sp, #0
 8003390:	4603      	mov	r3, r0
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	607a      	str	r2, [r7, #4]
 8003396:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003398:	2300      	movs	r3, #0
 800339a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800339c:	f7ff ff3e 	bl	800321c <__NVIC_GetPriorityGrouping>
 80033a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	6978      	ldr	r0, [r7, #20]
 80033a8:	f7ff ff8e 	bl	80032c8 <NVIC_EncodePriority>
 80033ac:	4602      	mov	r2, r0
 80033ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033b2:	4611      	mov	r1, r2
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff ff5d 	bl	8003274 <__NVIC_SetPriority>
}
 80033ba:	bf00      	nop
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	4603      	mov	r3, r0
 80033ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff ff31 	bl	8003238 <__NVIC_EnableIRQ>
}
 80033d6:	bf00      	nop
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff ffa2 	bl	8003330 <SysTick_Config>
 80033ec:	4603      	mov	r3, r0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003404:	f7ff f99e 	bl	8002744 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e099      	b.n	8003548 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0201 	bic.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003434:	e00f      	b.n	8003456 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003436:	f7ff f985 	bl	8002744 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b05      	cmp	r3, #5
 8003442:	d908      	bls.n	8003456 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2220      	movs	r2, #32
 8003448:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2203      	movs	r2, #3
 800344e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e078      	b.n	8003548 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1e8      	bne.n	8003436 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	4b38      	ldr	r3, [pc, #224]	@ (8003550 <HAL_DMA_Init+0x158>)
 8003470:	4013      	ands	r3, r2
 8003472:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003482:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800348e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800349a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d107      	bne.n	80034c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b8:	4313      	orrs	r3, r2
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	4313      	orrs	r3, r2
 80034be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f023 0307 	bic.w	r3, r3, #7
 80034d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	4313      	orrs	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d117      	bne.n	800351a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00e      	beq.n	800351a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 fa6f 	bl	80039e0 <DMA_CheckFifoParam>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d008      	beq.n	800351a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2240      	movs	r2, #64	@ 0x40
 800350c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003516:	2301      	movs	r3, #1
 8003518:	e016      	b.n	8003548 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 fa26 	bl	8003974 <DMA_CalcBaseAndBitshift>
 8003528:	4603      	mov	r3, r0
 800352a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003530:	223f      	movs	r2, #63	@ 0x3f
 8003532:	409a      	lsls	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	f010803f 	.word	0xf010803f

08003554 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
 8003560:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800356a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_DMA_Start_IT+0x26>
 8003576:	2302      	movs	r3, #2
 8003578:	e040      	b.n	80035fc <HAL_DMA_Start_IT+0xa8>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b01      	cmp	r3, #1
 800358c:	d12f      	bne.n	80035ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2202      	movs	r2, #2
 8003592:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	68b9      	ldr	r1, [r7, #8]
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 f9b8 	bl	8003918 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ac:	223f      	movs	r2, #63	@ 0x3f
 80035ae:	409a      	lsls	r2, r3
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0216 	orr.w	r2, r2, #22
 80035c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d007      	beq.n	80035dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0208 	orr.w	r2, r2, #8
 80035da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0201 	orr.w	r2, r2, #1
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	e005      	b.n	80035fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035f6:	2302      	movs	r3, #2
 80035f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80035fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003610:	4b8e      	ldr	r3, [pc, #568]	@ (800384c <HAL_DMA_IRQHandler+0x248>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a8e      	ldr	r2, [pc, #568]	@ (8003850 <HAL_DMA_IRQHandler+0x24c>)
 8003616:	fba2 2303 	umull	r2, r3, r2, r3
 800361a:	0a9b      	lsrs	r3, r3, #10
 800361c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003622:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800362e:	2208      	movs	r2, #8
 8003630:	409a      	lsls	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4013      	ands	r3, r2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d01a      	beq.n	8003670 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d013      	beq.n	8003670 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0204 	bic.w	r2, r2, #4
 8003656:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800365c:	2208      	movs	r2, #8
 800365e:	409a      	lsls	r2, r3
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003668:	f043 0201 	orr.w	r2, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003674:	2201      	movs	r2, #1
 8003676:	409a      	lsls	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4013      	ands	r3, r2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d012      	beq.n	80036a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00b      	beq.n	80036a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003692:	2201      	movs	r2, #1
 8003694:	409a      	lsls	r2, r3
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800369e:	f043 0202 	orr.w	r2, r3, #2
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036aa:	2204      	movs	r2, #4
 80036ac:	409a      	lsls	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4013      	ands	r3, r2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d012      	beq.n	80036dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00b      	beq.n	80036dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c8:	2204      	movs	r2, #4
 80036ca:	409a      	lsls	r2, r3
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d4:	f043 0204 	orr.w	r2, r3, #4
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e0:	2210      	movs	r2, #16
 80036e2:	409a      	lsls	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d043      	beq.n	8003774 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d03c      	beq.n	8003774 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036fe:	2210      	movs	r2, #16
 8003700:	409a      	lsls	r2, r3
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d018      	beq.n	8003746 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d108      	bne.n	8003734 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	d024      	beq.n	8003774 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	4798      	blx	r3
 8003732:	e01f      	b.n	8003774 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003738:	2b00      	cmp	r3, #0
 800373a:	d01b      	beq.n	8003774 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	4798      	blx	r3
 8003744:	e016      	b.n	8003774 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003750:	2b00      	cmp	r3, #0
 8003752:	d107      	bne.n	8003764 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0208 	bic.w	r2, r2, #8
 8003762:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003778:	2220      	movs	r2, #32
 800377a:	409a      	lsls	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4013      	ands	r3, r2
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 808f 	beq.w	80038a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0310 	and.w	r3, r3, #16
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 8087 	beq.w	80038a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800379a:	2220      	movs	r2, #32
 800379c:	409a      	lsls	r2, r3
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b05      	cmp	r3, #5
 80037ac:	d136      	bne.n	800381c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0216 	bic.w	r2, r2, #22
 80037bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695a      	ldr	r2, [r3, #20]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d103      	bne.n	80037de <HAL_DMA_IRQHandler+0x1da>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d007      	beq.n	80037ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0208 	bic.w	r2, r2, #8
 80037ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f2:	223f      	movs	r2, #63	@ 0x3f
 80037f4:	409a      	lsls	r2, r3
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800380e:	2b00      	cmp	r3, #0
 8003810:	d07e      	beq.n	8003910 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	4798      	blx	r3
        }
        return;
 800381a:	e079      	b.n	8003910 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d01d      	beq.n	8003866 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10d      	bne.n	8003854 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383c:	2b00      	cmp	r3, #0
 800383e:	d031      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	4798      	blx	r3
 8003848:	e02c      	b.n	80038a4 <HAL_DMA_IRQHandler+0x2a0>
 800384a:	bf00      	nop
 800384c:	20000000 	.word	0x20000000
 8003850:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003858:	2b00      	cmp	r3, #0
 800385a:	d023      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	4798      	blx	r3
 8003864:	e01e      	b.n	80038a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10f      	bne.n	8003894 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0210 	bic.w	r2, r2, #16
 8003882:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d032      	beq.n	8003912 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d022      	beq.n	80038fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2205      	movs	r2, #5
 80038bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0201 	bic.w	r2, r2, #1
 80038ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	3301      	adds	r3, #1
 80038d4:	60bb      	str	r3, [r7, #8]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d307      	bcc.n	80038ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f2      	bne.n	80038d0 <HAL_DMA_IRQHandler+0x2cc>
 80038ea:	e000      	b.n	80038ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003902:	2b00      	cmp	r3, #0
 8003904:	d005      	beq.n	8003912 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	4798      	blx	r3
 800390e:	e000      	b.n	8003912 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003910:	bf00      	nop
    }
  }
}
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
 8003924:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003934:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	2b40      	cmp	r3, #64	@ 0x40
 8003944:	d108      	bne.n	8003958 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003956:	e007      	b.n	8003968 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	60da      	str	r2, [r3, #12]
}
 8003968:	bf00      	nop
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	b2db      	uxtb	r3, r3
 8003982:	3b10      	subs	r3, #16
 8003984:	4a14      	ldr	r2, [pc, #80]	@ (80039d8 <DMA_CalcBaseAndBitshift+0x64>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	091b      	lsrs	r3, r3, #4
 800398c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800398e:	4a13      	ldr	r2, [pc, #76]	@ (80039dc <DMA_CalcBaseAndBitshift+0x68>)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4413      	add	r3, r2
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b03      	cmp	r3, #3
 80039a0:	d909      	bls.n	80039b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039aa:	f023 0303 	bic.w	r3, r3, #3
 80039ae:	1d1a      	adds	r2, r3, #4
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80039b4:	e007      	b.n	80039c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039be:	f023 0303 	bic.w	r3, r3, #3
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	aaaaaaab 	.word	0xaaaaaaab
 80039dc:	08006244 	.word	0x08006244

080039e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039e8:	2300      	movs	r3, #0
 80039ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d11f      	bne.n	8003a3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d856      	bhi.n	8003aae <DMA_CheckFifoParam+0xce>
 8003a00:	a201      	add	r2, pc, #4	@ (adr r2, 8003a08 <DMA_CheckFifoParam+0x28>)
 8003a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a06:	bf00      	nop
 8003a08:	08003a19 	.word	0x08003a19
 8003a0c:	08003a2b 	.word	0x08003a2b
 8003a10:	08003a19 	.word	0x08003a19
 8003a14:	08003aaf 	.word	0x08003aaf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d046      	beq.n	8003ab2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a28:	e043      	b.n	8003ab2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a32:	d140      	bne.n	8003ab6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a38:	e03d      	b.n	8003ab6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a42:	d121      	bne.n	8003a88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	d837      	bhi.n	8003aba <DMA_CheckFifoParam+0xda>
 8003a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a50 <DMA_CheckFifoParam+0x70>)
 8003a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a50:	08003a61 	.word	0x08003a61
 8003a54:	08003a67 	.word	0x08003a67
 8003a58:	08003a61 	.word	0x08003a61
 8003a5c:	08003a79 	.word	0x08003a79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	73fb      	strb	r3, [r7, #15]
      break;
 8003a64:	e030      	b.n	8003ac8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d025      	beq.n	8003abe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a76:	e022      	b.n	8003abe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a80:	d11f      	bne.n	8003ac2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a86:	e01c      	b.n	8003ac2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d903      	bls.n	8003a96 <DMA_CheckFifoParam+0xb6>
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	2b03      	cmp	r3, #3
 8003a92:	d003      	beq.n	8003a9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a94:	e018      	b.n	8003ac8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	73fb      	strb	r3, [r7, #15]
      break;
 8003a9a:	e015      	b.n	8003ac8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00e      	beq.n	8003ac6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8003aac:	e00b      	b.n	8003ac6 <DMA_CheckFifoParam+0xe6>
      break;
 8003aae:	bf00      	nop
 8003ab0:	e00a      	b.n	8003ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ab2:	bf00      	nop
 8003ab4:	e008      	b.n	8003ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ab6:	bf00      	nop
 8003ab8:	e006      	b.n	8003ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8003aba:	bf00      	nop
 8003abc:	e004      	b.n	8003ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8003abe:	bf00      	nop
 8003ac0:	e002      	b.n	8003ac8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003ac2:	bf00      	nop
 8003ac4:	e000      	b.n	8003ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ac6:	bf00      	nop
    }
  } 
  
  return status; 
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop

08003ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b089      	sub	sp, #36	@ 0x24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aee:	2300      	movs	r3, #0
 8003af0:	61fb      	str	r3, [r7, #28]
 8003af2:	e165      	b.n	8003dc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003af4:	2201      	movs	r2, #1
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	4013      	ands	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	f040 8154 	bne.w	8003dba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d005      	beq.n	8003b2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d130      	bne.n	8003b8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	2203      	movs	r2, #3
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b60:	2201      	movs	r2, #1
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	091b      	lsrs	r3, r3, #4
 8003b76:	f003 0201 	and.w	r2, r3, #1
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f003 0303 	and.w	r3, r3, #3
 8003b94:	2b03      	cmp	r3, #3
 8003b96:	d017      	beq.n	8003bc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	2203      	movs	r2, #3
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4013      	ands	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f003 0303 	and.w	r3, r3, #3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d123      	bne.n	8003c1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	08da      	lsrs	r2, r3, #3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3208      	adds	r2, #8
 8003bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	220f      	movs	r2, #15
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	691a      	ldr	r2, [r3, #16]
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	08da      	lsrs	r2, r3, #3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3208      	adds	r2, #8
 8003c16:	69b9      	ldr	r1, [r7, #24]
 8003c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	2203      	movs	r2, #3
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	4013      	ands	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 0203 	and.w	r2, r3, #3
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 80ae 	beq.w	8003dba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	4b5d      	ldr	r3, [pc, #372]	@ (8003dd8 <HAL_GPIO_Init+0x300>)
 8003c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c66:	4a5c      	ldr	r2, [pc, #368]	@ (8003dd8 <HAL_GPIO_Init+0x300>)
 8003c68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c6e:	4b5a      	ldr	r3, [pc, #360]	@ (8003dd8 <HAL_GPIO_Init+0x300>)
 8003c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c7a:	4a58      	ldr	r2, [pc, #352]	@ (8003ddc <HAL_GPIO_Init+0x304>)
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	089b      	lsrs	r3, r3, #2
 8003c80:	3302      	adds	r3, #2
 8003c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	220f      	movs	r2, #15
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	43db      	mvns	r3, r3
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a4f      	ldr	r2, [pc, #316]	@ (8003de0 <HAL_GPIO_Init+0x308>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d025      	beq.n	8003cf2 <HAL_GPIO_Init+0x21a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a4e      	ldr	r2, [pc, #312]	@ (8003de4 <HAL_GPIO_Init+0x30c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d01f      	beq.n	8003cee <HAL_GPIO_Init+0x216>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a4d      	ldr	r2, [pc, #308]	@ (8003de8 <HAL_GPIO_Init+0x310>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d019      	beq.n	8003cea <HAL_GPIO_Init+0x212>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a4c      	ldr	r2, [pc, #304]	@ (8003dec <HAL_GPIO_Init+0x314>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d013      	beq.n	8003ce6 <HAL_GPIO_Init+0x20e>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a4b      	ldr	r2, [pc, #300]	@ (8003df0 <HAL_GPIO_Init+0x318>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d00d      	beq.n	8003ce2 <HAL_GPIO_Init+0x20a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a4a      	ldr	r2, [pc, #296]	@ (8003df4 <HAL_GPIO_Init+0x31c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d007      	beq.n	8003cde <HAL_GPIO_Init+0x206>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a49      	ldr	r2, [pc, #292]	@ (8003df8 <HAL_GPIO_Init+0x320>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d101      	bne.n	8003cda <HAL_GPIO_Init+0x202>
 8003cd6:	2306      	movs	r3, #6
 8003cd8:	e00c      	b.n	8003cf4 <HAL_GPIO_Init+0x21c>
 8003cda:	2307      	movs	r3, #7
 8003cdc:	e00a      	b.n	8003cf4 <HAL_GPIO_Init+0x21c>
 8003cde:	2305      	movs	r3, #5
 8003ce0:	e008      	b.n	8003cf4 <HAL_GPIO_Init+0x21c>
 8003ce2:	2304      	movs	r3, #4
 8003ce4:	e006      	b.n	8003cf4 <HAL_GPIO_Init+0x21c>
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e004      	b.n	8003cf4 <HAL_GPIO_Init+0x21c>
 8003cea:	2302      	movs	r3, #2
 8003cec:	e002      	b.n	8003cf4 <HAL_GPIO_Init+0x21c>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <HAL_GPIO_Init+0x21c>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	69fa      	ldr	r2, [r7, #28]
 8003cf6:	f002 0203 	and.w	r2, r2, #3
 8003cfa:	0092      	lsls	r2, r2, #2
 8003cfc:	4093      	lsls	r3, r2
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d04:	4935      	ldr	r1, [pc, #212]	@ (8003ddc <HAL_GPIO_Init+0x304>)
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	089b      	lsrs	r3, r3, #2
 8003d0a:	3302      	adds	r3, #2
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d12:	4b3a      	ldr	r3, [pc, #232]	@ (8003dfc <HAL_GPIO_Init+0x324>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d36:	4a31      	ldr	r2, [pc, #196]	@ (8003dfc <HAL_GPIO_Init+0x324>)
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d3c:	4b2f      	ldr	r3, [pc, #188]	@ (8003dfc <HAL_GPIO_Init+0x324>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	43db      	mvns	r3, r3
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d003      	beq.n	8003d60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d60:	4a26      	ldr	r2, [pc, #152]	@ (8003dfc <HAL_GPIO_Init+0x324>)
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d66:	4b25      	ldr	r3, [pc, #148]	@ (8003dfc <HAL_GPIO_Init+0x324>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	4013      	ands	r3, r2
 8003d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8003dfc <HAL_GPIO_Init+0x324>)
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d90:	4b1a      	ldr	r3, [pc, #104]	@ (8003dfc <HAL_GPIO_Init+0x324>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003db4:	4a11      	ldr	r2, [pc, #68]	@ (8003dfc <HAL_GPIO_Init+0x324>)
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	61fb      	str	r3, [r7, #28]
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	2b0f      	cmp	r3, #15
 8003dc4:	f67f ae96 	bls.w	8003af4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dc8:	bf00      	nop
 8003dca:	bf00      	nop
 8003dcc:	3724      	adds	r7, #36	@ 0x24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	40013800 	.word	0x40013800
 8003de0:	40020000 	.word	0x40020000
 8003de4:	40020400 	.word	0x40020400
 8003de8:	40020800 	.word	0x40020800
 8003dec:	40020c00 	.word	0x40020c00
 8003df0:	40021000 	.word	0x40021000
 8003df4:	40021400 	.word	0x40021400
 8003df8:	40021800 	.word	0x40021800
 8003dfc:	40013c00 	.word	0x40013c00

08003e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	807b      	strh	r3, [r7, #2]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e10:	787b      	ldrb	r3, [r7, #1]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e16:	887a      	ldrh	r2, [r7, #2]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e1c:	e003      	b.n	8003e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e1e:	887b      	ldrh	r3, [r7, #2]
 8003e20:	041a      	lsls	r2, r3, #16
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	619a      	str	r2, [r3, #24]
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
	...

08003e34 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e3e:	2300      	movs	r3, #0
 8003e40:	603b      	str	r3, [r7, #0]
 8003e42:	4b20      	ldr	r3, [pc, #128]	@ (8003ec4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e46:	4a1f      	ldr	r2, [pc, #124]	@ (8003ec4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ec4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e56:	603b      	str	r3, [r7, #0]
 8003e58:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ec8 <HAL_PWREx_EnableOverDrive+0x94>)
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e60:	f7fe fc70 	bl	8002744 <HAL_GetTick>
 8003e64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e66:	e009      	b.n	8003e7c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e68:	f7fe fc6c 	bl	8002744 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e76:	d901      	bls.n	8003e7c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e01f      	b.n	8003ebc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e7c:	4b13      	ldr	r3, [pc, #76]	@ (8003ecc <HAL_PWREx_EnableOverDrive+0x98>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e88:	d1ee      	bne.n	8003e68 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e8a:	4b11      	ldr	r3, [pc, #68]	@ (8003ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e90:	f7fe fc58 	bl	8002744 <HAL_GetTick>
 8003e94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e96:	e009      	b.n	8003eac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e98:	f7fe fc54 	bl	8002744 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ea6:	d901      	bls.n	8003eac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e007      	b.n	8003ebc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003eac:	4b07      	ldr	r3, [pc, #28]	@ (8003ecc <HAL_PWREx_EnableOverDrive+0x98>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003eb8:	d1ee      	bne.n	8003e98 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	420e0040 	.word	0x420e0040
 8003ecc:	40007000 	.word	0x40007000
 8003ed0:	420e0044 	.word	0x420e0044

08003ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e0cc      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ee8:	4b68      	ldr	r3, [pc, #416]	@ (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d90c      	bls.n	8003f10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef6:	4b65      	ldr	r3, [pc, #404]	@ (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003efe:	4b63      	ldr	r3, [pc, #396]	@ (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 030f 	and.w	r3, r3, #15
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d001      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0b8      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d020      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f28:	4b59      	ldr	r3, [pc, #356]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	4a58      	ldr	r2, [pc, #352]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f40:	4b53      	ldr	r3, [pc, #332]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	4a52      	ldr	r2, [pc, #328]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f4c:	4b50      	ldr	r3, [pc, #320]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	494d      	ldr	r1, [pc, #308]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d044      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d107      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f72:	4b47      	ldr	r3, [pc, #284]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d119      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e07f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d003      	beq.n	8003f92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d107      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f92:	4b3f      	ldr	r3, [pc, #252]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d109      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e06f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa2:	4b3b      	ldr	r3, [pc, #236]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e067      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fb2:	4b37      	ldr	r3, [pc, #220]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f023 0203 	bic.w	r2, r3, #3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	4934      	ldr	r1, [pc, #208]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fc4:	f7fe fbbe 	bl	8002744 <HAL_GetTick>
 8003fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fca:	e00a      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fcc:	f7fe fbba 	bl	8002744 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e04f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe2:	4b2b      	ldr	r3, [pc, #172]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 020c 	and.w	r2, r3, #12
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d1eb      	bne.n	8003fcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff4:	4b25      	ldr	r3, [pc, #148]	@ (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 030f 	and.w	r3, r3, #15
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d20c      	bcs.n	800401c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004002:	4b22      	ldr	r3, [pc, #136]	@ (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800400a:	4b20      	ldr	r3, [pc, #128]	@ (800408c <HAL_RCC_ClockConfig+0x1b8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e032      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004028:	4b19      	ldr	r3, [pc, #100]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4916      	ldr	r1, [pc, #88]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004036:	4313      	orrs	r3, r2
 8004038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d009      	beq.n	800405a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004046:	4b12      	ldr	r3, [pc, #72]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	490e      	ldr	r1, [pc, #56]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	4313      	orrs	r3, r2
 8004058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800405a:	f000 f821 	bl	80040a0 <HAL_RCC_GetSysClockFreq>
 800405e:	4602      	mov	r2, r0
 8004060:	4b0b      	ldr	r3, [pc, #44]	@ (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	091b      	lsrs	r3, r3, #4
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	490a      	ldr	r1, [pc, #40]	@ (8004094 <HAL_RCC_ClockConfig+0x1c0>)
 800406c:	5ccb      	ldrb	r3, [r1, r3]
 800406e:	fa22 f303 	lsr.w	r3, r2, r3
 8004072:	4a09      	ldr	r2, [pc, #36]	@ (8004098 <HAL_RCC_ClockConfig+0x1c4>)
 8004074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004076:	4b09      	ldr	r3, [pc, #36]	@ (800409c <HAL_RCC_ClockConfig+0x1c8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f7fe fb1e 	bl	80026bc <HAL_InitTick>

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40023c00 	.word	0x40023c00
 8004090:	40023800 	.word	0x40023800
 8004094:	08006224 	.word	0x08006224
 8004098:	20000000 	.word	0x20000000
 800409c:	20000004 	.word	0x20000004

080040a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040a4:	b0ae      	sub	sp, #184	@ 0xb8
 80040a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040c6:	4bcb      	ldr	r3, [pc, #812]	@ (80043f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 030c 	and.w	r3, r3, #12
 80040ce:	2b0c      	cmp	r3, #12
 80040d0:	f200 8204 	bhi.w	80044dc <HAL_RCC_GetSysClockFreq+0x43c>
 80040d4:	a201      	add	r2, pc, #4	@ (adr r2, 80040dc <HAL_RCC_GetSysClockFreq+0x3c>)
 80040d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040da:	bf00      	nop
 80040dc:	08004111 	.word	0x08004111
 80040e0:	080044dd 	.word	0x080044dd
 80040e4:	080044dd 	.word	0x080044dd
 80040e8:	080044dd 	.word	0x080044dd
 80040ec:	08004119 	.word	0x08004119
 80040f0:	080044dd 	.word	0x080044dd
 80040f4:	080044dd 	.word	0x080044dd
 80040f8:	080044dd 	.word	0x080044dd
 80040fc:	08004121 	.word	0x08004121
 8004100:	080044dd 	.word	0x080044dd
 8004104:	080044dd 	.word	0x080044dd
 8004108:	080044dd 	.word	0x080044dd
 800410c:	08004311 	.word	0x08004311
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004110:	4bb9      	ldr	r3, [pc, #740]	@ (80043f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004112:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004116:	e1e5      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004118:	4bb7      	ldr	r3, [pc, #732]	@ (80043f8 <HAL_RCC_GetSysClockFreq+0x358>)
 800411a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800411e:	e1e1      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004120:	4bb4      	ldr	r3, [pc, #720]	@ (80043f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004128:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800412c:	4bb1      	ldr	r3, [pc, #708]	@ (80043f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d071      	beq.n	800421c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004138:	4bae      	ldr	r3, [pc, #696]	@ (80043f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	099b      	lsrs	r3, r3, #6
 800413e:	2200      	movs	r2, #0
 8004140:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004144:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004148:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800414c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004150:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004154:	2300      	movs	r3, #0
 8004156:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800415a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800415e:	4622      	mov	r2, r4
 8004160:	462b      	mov	r3, r5
 8004162:	f04f 0000 	mov.w	r0, #0
 8004166:	f04f 0100 	mov.w	r1, #0
 800416a:	0159      	lsls	r1, r3, #5
 800416c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004170:	0150      	lsls	r0, r2, #5
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	4621      	mov	r1, r4
 8004178:	1a51      	subs	r1, r2, r1
 800417a:	6439      	str	r1, [r7, #64]	@ 0x40
 800417c:	4629      	mov	r1, r5
 800417e:	eb63 0301 	sbc.w	r3, r3, r1
 8004182:	647b      	str	r3, [r7, #68]	@ 0x44
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	f04f 0300 	mov.w	r3, #0
 800418c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004190:	4649      	mov	r1, r9
 8004192:	018b      	lsls	r3, r1, #6
 8004194:	4641      	mov	r1, r8
 8004196:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800419a:	4641      	mov	r1, r8
 800419c:	018a      	lsls	r2, r1, #6
 800419e:	4641      	mov	r1, r8
 80041a0:	1a51      	subs	r1, r2, r1
 80041a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80041a4:	4649      	mov	r1, r9
 80041a6:	eb63 0301 	sbc.w	r3, r3, r1
 80041aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	f04f 0300 	mov.w	r3, #0
 80041b4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80041b8:	4649      	mov	r1, r9
 80041ba:	00cb      	lsls	r3, r1, #3
 80041bc:	4641      	mov	r1, r8
 80041be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041c2:	4641      	mov	r1, r8
 80041c4:	00ca      	lsls	r2, r1, #3
 80041c6:	4610      	mov	r0, r2
 80041c8:	4619      	mov	r1, r3
 80041ca:	4603      	mov	r3, r0
 80041cc:	4622      	mov	r2, r4
 80041ce:	189b      	adds	r3, r3, r2
 80041d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80041d2:	462b      	mov	r3, r5
 80041d4:	460a      	mov	r2, r1
 80041d6:	eb42 0303 	adc.w	r3, r2, r3
 80041da:	637b      	str	r3, [r7, #52]	@ 0x34
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80041e8:	4629      	mov	r1, r5
 80041ea:	028b      	lsls	r3, r1, #10
 80041ec:	4621      	mov	r1, r4
 80041ee:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041f2:	4621      	mov	r1, r4
 80041f4:	028a      	lsls	r2, r1, #10
 80041f6:	4610      	mov	r0, r2
 80041f8:	4619      	mov	r1, r3
 80041fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041fe:	2200      	movs	r2, #0
 8004200:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004204:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004208:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800420c:	f7fc fb0a 	bl	8000824 <__aeabi_uldivmod>
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	4613      	mov	r3, r2
 8004216:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800421a:	e067      	b.n	80042ec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800421c:	4b75      	ldr	r3, [pc, #468]	@ (80043f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	099b      	lsrs	r3, r3, #6
 8004222:	2200      	movs	r2, #0
 8004224:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004228:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800422c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004234:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004236:	2300      	movs	r3, #0
 8004238:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800423a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800423e:	4622      	mov	r2, r4
 8004240:	462b      	mov	r3, r5
 8004242:	f04f 0000 	mov.w	r0, #0
 8004246:	f04f 0100 	mov.w	r1, #0
 800424a:	0159      	lsls	r1, r3, #5
 800424c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004250:	0150      	lsls	r0, r2, #5
 8004252:	4602      	mov	r2, r0
 8004254:	460b      	mov	r3, r1
 8004256:	4621      	mov	r1, r4
 8004258:	1a51      	subs	r1, r2, r1
 800425a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800425c:	4629      	mov	r1, r5
 800425e:	eb63 0301 	sbc.w	r3, r3, r1
 8004262:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004270:	4649      	mov	r1, r9
 8004272:	018b      	lsls	r3, r1, #6
 8004274:	4641      	mov	r1, r8
 8004276:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800427a:	4641      	mov	r1, r8
 800427c:	018a      	lsls	r2, r1, #6
 800427e:	4641      	mov	r1, r8
 8004280:	ebb2 0a01 	subs.w	sl, r2, r1
 8004284:	4649      	mov	r1, r9
 8004286:	eb63 0b01 	sbc.w	fp, r3, r1
 800428a:	f04f 0200 	mov.w	r2, #0
 800428e:	f04f 0300 	mov.w	r3, #0
 8004292:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004296:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800429a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800429e:	4692      	mov	sl, r2
 80042a0:	469b      	mov	fp, r3
 80042a2:	4623      	mov	r3, r4
 80042a4:	eb1a 0303 	adds.w	r3, sl, r3
 80042a8:	623b      	str	r3, [r7, #32]
 80042aa:	462b      	mov	r3, r5
 80042ac:	eb4b 0303 	adc.w	r3, fp, r3
 80042b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80042b2:	f04f 0200 	mov.w	r2, #0
 80042b6:	f04f 0300 	mov.w	r3, #0
 80042ba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80042be:	4629      	mov	r1, r5
 80042c0:	028b      	lsls	r3, r1, #10
 80042c2:	4621      	mov	r1, r4
 80042c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042c8:	4621      	mov	r1, r4
 80042ca:	028a      	lsls	r2, r1, #10
 80042cc:	4610      	mov	r0, r2
 80042ce:	4619      	mov	r1, r3
 80042d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042d4:	2200      	movs	r2, #0
 80042d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80042d8:	677a      	str	r2, [r7, #116]	@ 0x74
 80042da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80042de:	f7fc faa1 	bl	8000824 <__aeabi_uldivmod>
 80042e2:	4602      	mov	r2, r0
 80042e4:	460b      	mov	r3, r1
 80042e6:	4613      	mov	r3, r2
 80042e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80042ec:	4b41      	ldr	r3, [pc, #260]	@ (80043f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	0c1b      	lsrs	r3, r3, #16
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	3301      	adds	r3, #1
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80042fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004302:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004306:	fbb2 f3f3 	udiv	r3, r2, r3
 800430a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800430e:	e0e9      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004310:	4b38      	ldr	r3, [pc, #224]	@ (80043f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004318:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800431c:	4b35      	ldr	r3, [pc, #212]	@ (80043f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d069      	beq.n	80043fc <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004328:	4b32      	ldr	r3, [pc, #200]	@ (80043f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	099b      	lsrs	r3, r3, #6
 800432e:	2200      	movs	r2, #0
 8004330:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004332:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004334:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800433a:	663b      	str	r3, [r7, #96]	@ 0x60
 800433c:	2300      	movs	r3, #0
 800433e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004340:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004344:	4622      	mov	r2, r4
 8004346:	462b      	mov	r3, r5
 8004348:	f04f 0000 	mov.w	r0, #0
 800434c:	f04f 0100 	mov.w	r1, #0
 8004350:	0159      	lsls	r1, r3, #5
 8004352:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004356:	0150      	lsls	r0, r2, #5
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	4621      	mov	r1, r4
 800435e:	1a51      	subs	r1, r2, r1
 8004360:	61b9      	str	r1, [r7, #24]
 8004362:	4629      	mov	r1, r5
 8004364:	eb63 0301 	sbc.w	r3, r3, r1
 8004368:	61fb      	str	r3, [r7, #28]
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004376:	4659      	mov	r1, fp
 8004378:	018b      	lsls	r3, r1, #6
 800437a:	4651      	mov	r1, sl
 800437c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004380:	4651      	mov	r1, sl
 8004382:	018a      	lsls	r2, r1, #6
 8004384:	4651      	mov	r1, sl
 8004386:	ebb2 0801 	subs.w	r8, r2, r1
 800438a:	4659      	mov	r1, fp
 800438c:	eb63 0901 	sbc.w	r9, r3, r1
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	f04f 0300 	mov.w	r3, #0
 8004398:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800439c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043a4:	4690      	mov	r8, r2
 80043a6:	4699      	mov	r9, r3
 80043a8:	4623      	mov	r3, r4
 80043aa:	eb18 0303 	adds.w	r3, r8, r3
 80043ae:	613b      	str	r3, [r7, #16]
 80043b0:	462b      	mov	r3, r5
 80043b2:	eb49 0303 	adc.w	r3, r9, r3
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	f04f 0300 	mov.w	r3, #0
 80043c0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80043c4:	4629      	mov	r1, r5
 80043c6:	028b      	lsls	r3, r1, #10
 80043c8:	4621      	mov	r1, r4
 80043ca:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043ce:	4621      	mov	r1, r4
 80043d0:	028a      	lsls	r2, r1, #10
 80043d2:	4610      	mov	r0, r2
 80043d4:	4619      	mov	r1, r3
 80043d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043da:	2200      	movs	r2, #0
 80043dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043de:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80043e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80043e4:	f7fc fa1e 	bl	8000824 <__aeabi_uldivmod>
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	4613      	mov	r3, r2
 80043ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043f2:	e063      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x41c>
 80043f4:	40023800 	.word	0x40023800
 80043f8:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043fc:	4b3d      	ldr	r3, [pc, #244]	@ (80044f4 <HAL_RCC_GetSysClockFreq+0x454>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	099b      	lsrs	r3, r3, #6
 8004402:	2200      	movs	r2, #0
 8004404:	4618      	mov	r0, r3
 8004406:	4611      	mov	r1, r2
 8004408:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800440c:	653b      	str	r3, [r7, #80]	@ 0x50
 800440e:	2300      	movs	r3, #0
 8004410:	657b      	str	r3, [r7, #84]	@ 0x54
 8004412:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004416:	4642      	mov	r2, r8
 8004418:	464b      	mov	r3, r9
 800441a:	f04f 0000 	mov.w	r0, #0
 800441e:	f04f 0100 	mov.w	r1, #0
 8004422:	0159      	lsls	r1, r3, #5
 8004424:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004428:	0150      	lsls	r0, r2, #5
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	4641      	mov	r1, r8
 8004430:	1a51      	subs	r1, r2, r1
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	4649      	mov	r1, r9
 8004436:	eb63 0301 	sbc.w	r3, r3, r1
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004448:	4659      	mov	r1, fp
 800444a:	018b      	lsls	r3, r1, #6
 800444c:	4651      	mov	r1, sl
 800444e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004452:	4651      	mov	r1, sl
 8004454:	018a      	lsls	r2, r1, #6
 8004456:	4651      	mov	r1, sl
 8004458:	1a54      	subs	r4, r2, r1
 800445a:	4659      	mov	r1, fp
 800445c:	eb63 0501 	sbc.w	r5, r3, r1
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	f04f 0300 	mov.w	r3, #0
 8004468:	00eb      	lsls	r3, r5, #3
 800446a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800446e:	00e2      	lsls	r2, r4, #3
 8004470:	4614      	mov	r4, r2
 8004472:	461d      	mov	r5, r3
 8004474:	4643      	mov	r3, r8
 8004476:	18e3      	adds	r3, r4, r3
 8004478:	603b      	str	r3, [r7, #0]
 800447a:	464b      	mov	r3, r9
 800447c:	eb45 0303 	adc.w	r3, r5, r3
 8004480:	607b      	str	r3, [r7, #4]
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	f04f 0300 	mov.w	r3, #0
 800448a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800448e:	4629      	mov	r1, r5
 8004490:	028b      	lsls	r3, r1, #10
 8004492:	4621      	mov	r1, r4
 8004494:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004498:	4621      	mov	r1, r4
 800449a:	028a      	lsls	r2, r1, #10
 800449c:	4610      	mov	r0, r2
 800449e:	4619      	mov	r1, r3
 80044a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80044a4:	2200      	movs	r2, #0
 80044a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044a8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80044aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80044ae:	f7fc f9b9 	bl	8000824 <__aeabi_uldivmod>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4613      	mov	r3, r2
 80044b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80044bc:	4b0d      	ldr	r3, [pc, #52]	@ (80044f4 <HAL_RCC_GetSysClockFreq+0x454>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	0f1b      	lsrs	r3, r3, #28
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80044ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80044d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80044da:	e003      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044dc:	4b06      	ldr	r3, [pc, #24]	@ (80044f8 <HAL_RCC_GetSysClockFreq+0x458>)
 80044de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80044e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	37b8      	adds	r7, #184	@ 0xb8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044f2:	bf00      	nop
 80044f4:	40023800 	.word	0x40023800
 80044f8:	00f42400 	.word	0x00f42400

080044fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e28d      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 8083 	beq.w	8004622 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800451c:	4b94      	ldr	r3, [pc, #592]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f003 030c 	and.w	r3, r3, #12
 8004524:	2b04      	cmp	r3, #4
 8004526:	d019      	beq.n	800455c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004528:	4b91      	ldr	r3, [pc, #580]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f003 030c 	and.w	r3, r3, #12
        || \
 8004530:	2b08      	cmp	r3, #8
 8004532:	d106      	bne.n	8004542 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004534:	4b8e      	ldr	r3, [pc, #568]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800453c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004540:	d00c      	beq.n	800455c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004542:	4b8b      	ldr	r3, [pc, #556]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800454a:	2b0c      	cmp	r3, #12
 800454c:	d112      	bne.n	8004574 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800454e:	4b88      	ldr	r3, [pc, #544]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004556:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800455a:	d10b      	bne.n	8004574 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800455c:	4b84      	ldr	r3, [pc, #528]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d05b      	beq.n	8004620 <HAL_RCC_OscConfig+0x124>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d157      	bne.n	8004620 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e25a      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800457c:	d106      	bne.n	800458c <HAL_RCC_OscConfig+0x90>
 800457e:	4b7c      	ldr	r3, [pc, #496]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a7b      	ldr	r2, [pc, #492]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 8004584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	e01d      	b.n	80045c8 <HAL_RCC_OscConfig+0xcc>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004594:	d10c      	bne.n	80045b0 <HAL_RCC_OscConfig+0xb4>
 8004596:	4b76      	ldr	r3, [pc, #472]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a75      	ldr	r2, [pc, #468]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 800459c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	4b73      	ldr	r3, [pc, #460]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a72      	ldr	r2, [pc, #456]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 80045a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	e00b      	b.n	80045c8 <HAL_RCC_OscConfig+0xcc>
 80045b0:	4b6f      	ldr	r3, [pc, #444]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a6e      	ldr	r2, [pc, #440]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 80045b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	4b6c      	ldr	r3, [pc, #432]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a6b      	ldr	r2, [pc, #428]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 80045c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d013      	beq.n	80045f8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d0:	f7fe f8b8 	bl	8002744 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045d8:	f7fe f8b4 	bl	8002744 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b64      	cmp	r3, #100	@ 0x64
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e21f      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ea:	4b61      	ldr	r3, [pc, #388]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0f0      	beq.n	80045d8 <HAL_RCC_OscConfig+0xdc>
 80045f6:	e014      	b.n	8004622 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f8:	f7fe f8a4 	bl	8002744 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004600:	f7fe f8a0 	bl	8002744 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b64      	cmp	r3, #100	@ 0x64
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e20b      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004612:	4b57      	ldr	r3, [pc, #348]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1f0      	bne.n	8004600 <HAL_RCC_OscConfig+0x104>
 800461e:	e000      	b.n	8004622 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d06f      	beq.n	800470e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800462e:	4b50      	ldr	r3, [pc, #320]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 030c 	and.w	r3, r3, #12
 8004636:	2b00      	cmp	r3, #0
 8004638:	d017      	beq.n	800466a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800463a:	4b4d      	ldr	r3, [pc, #308]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 030c 	and.w	r3, r3, #12
        || \
 8004642:	2b08      	cmp	r3, #8
 8004644:	d105      	bne.n	8004652 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004646:	4b4a      	ldr	r3, [pc, #296]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00b      	beq.n	800466a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004652:	4b47      	ldr	r3, [pc, #284]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800465a:	2b0c      	cmp	r3, #12
 800465c:	d11c      	bne.n	8004698 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800465e:	4b44      	ldr	r3, [pc, #272]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d116      	bne.n	8004698 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800466a:	4b41      	ldr	r3, [pc, #260]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d005      	beq.n	8004682 <HAL_RCC_OscConfig+0x186>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d001      	beq.n	8004682 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e1d3      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004682:	4b3b      	ldr	r3, [pc, #236]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	4937      	ldr	r1, [pc, #220]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 8004692:	4313      	orrs	r3, r2
 8004694:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004696:	e03a      	b.n	800470e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d020      	beq.n	80046e2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046a0:	4b34      	ldr	r3, [pc, #208]	@ (8004774 <HAL_RCC_OscConfig+0x278>)
 80046a2:	2201      	movs	r2, #1
 80046a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a6:	f7fe f84d 	bl	8002744 <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ae:	f7fe f849 	bl	8002744 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e1b4      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0f0      	beq.n	80046ae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046cc:	4b28      	ldr	r3, [pc, #160]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	4925      	ldr	r1, [pc, #148]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	600b      	str	r3, [r1, #0]
 80046e0:	e015      	b.n	800470e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046e2:	4b24      	ldr	r3, [pc, #144]	@ (8004774 <HAL_RCC_OscConfig+0x278>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e8:	f7fe f82c 	bl	8002744 <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046f0:	f7fe f828 	bl	8002744 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e193      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004702:	4b1b      	ldr	r3, [pc, #108]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1f0      	bne.n	80046f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b00      	cmp	r3, #0
 8004718:	d036      	beq.n	8004788 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d016      	beq.n	8004750 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004722:	4b15      	ldr	r3, [pc, #84]	@ (8004778 <HAL_RCC_OscConfig+0x27c>)
 8004724:	2201      	movs	r2, #1
 8004726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004728:	f7fe f80c 	bl	8002744 <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004730:	f7fe f808 	bl	8002744 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e173      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004742:	4b0b      	ldr	r3, [pc, #44]	@ (8004770 <HAL_RCC_OscConfig+0x274>)
 8004744:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0f0      	beq.n	8004730 <HAL_RCC_OscConfig+0x234>
 800474e:	e01b      	b.n	8004788 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004750:	4b09      	ldr	r3, [pc, #36]	@ (8004778 <HAL_RCC_OscConfig+0x27c>)
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004756:	f7fd fff5 	bl	8002744 <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800475c:	e00e      	b.n	800477c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800475e:	f7fd fff1 	bl	8002744 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d907      	bls.n	800477c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e15c      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
 8004770:	40023800 	.word	0x40023800
 8004774:	42470000 	.word	0x42470000
 8004778:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800477c:	4b8a      	ldr	r3, [pc, #552]	@ (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800477e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1ea      	bne.n	800475e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 8097 	beq.w	80048c4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004796:	2300      	movs	r3, #0
 8004798:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800479a:	4b83      	ldr	r3, [pc, #524]	@ (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800479c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10f      	bne.n	80047c6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047a6:	2300      	movs	r3, #0
 80047a8:	60bb      	str	r3, [r7, #8]
 80047aa:	4b7f      	ldr	r3, [pc, #508]	@ (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 80047ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ae:	4a7e      	ldr	r2, [pc, #504]	@ (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 80047b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80047b6:	4b7c      	ldr	r3, [pc, #496]	@ (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 80047b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047be:	60bb      	str	r3, [r7, #8]
 80047c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047c2:	2301      	movs	r3, #1
 80047c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c6:	4b79      	ldr	r3, [pc, #484]	@ (80049ac <HAL_RCC_OscConfig+0x4b0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d118      	bne.n	8004804 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047d2:	4b76      	ldr	r3, [pc, #472]	@ (80049ac <HAL_RCC_OscConfig+0x4b0>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a75      	ldr	r2, [pc, #468]	@ (80049ac <HAL_RCC_OscConfig+0x4b0>)
 80047d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047de:	f7fd ffb1 	bl	8002744 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e4:	e008      	b.n	80047f8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e6:	f7fd ffad 	bl	8002744 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e118      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f8:	4b6c      	ldr	r3, [pc, #432]	@ (80049ac <HAL_RCC_OscConfig+0x4b0>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0f0      	beq.n	80047e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d106      	bne.n	800481a <HAL_RCC_OscConfig+0x31e>
 800480c:	4b66      	ldr	r3, [pc, #408]	@ (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800480e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004810:	4a65      	ldr	r2, [pc, #404]	@ (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004812:	f043 0301 	orr.w	r3, r3, #1
 8004816:	6713      	str	r3, [r2, #112]	@ 0x70
 8004818:	e01c      	b.n	8004854 <HAL_RCC_OscConfig+0x358>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b05      	cmp	r3, #5
 8004820:	d10c      	bne.n	800483c <HAL_RCC_OscConfig+0x340>
 8004822:	4b61      	ldr	r3, [pc, #388]	@ (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004826:	4a60      	ldr	r2, [pc, #384]	@ (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004828:	f043 0304 	orr.w	r3, r3, #4
 800482c:	6713      	str	r3, [r2, #112]	@ 0x70
 800482e:	4b5e      	ldr	r3, [pc, #376]	@ (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004832:	4a5d      	ldr	r2, [pc, #372]	@ (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004834:	f043 0301 	orr.w	r3, r3, #1
 8004838:	6713      	str	r3, [r2, #112]	@ 0x70
 800483a:	e00b      	b.n	8004854 <HAL_RCC_OscConfig+0x358>
 800483c:	4b5a      	ldr	r3, [pc, #360]	@ (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800483e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004840:	4a59      	ldr	r2, [pc, #356]	@ (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004842:	f023 0301 	bic.w	r3, r3, #1
 8004846:	6713      	str	r3, [r2, #112]	@ 0x70
 8004848:	4b57      	ldr	r3, [pc, #348]	@ (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800484a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800484c:	4a56      	ldr	r2, [pc, #344]	@ (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800484e:	f023 0304 	bic.w	r3, r3, #4
 8004852:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d015      	beq.n	8004888 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800485c:	f7fd ff72 	bl	8002744 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004862:	e00a      	b.n	800487a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004864:	f7fd ff6e 	bl	8002744 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004872:	4293      	cmp	r3, r2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e0d7      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800487a:	4b4b      	ldr	r3, [pc, #300]	@ (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800487c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0ee      	beq.n	8004864 <HAL_RCC_OscConfig+0x368>
 8004886:	e014      	b.n	80048b2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004888:	f7fd ff5c 	bl	8002744 <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800488e:	e00a      	b.n	80048a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004890:	f7fd ff58 	bl	8002744 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800489e:	4293      	cmp	r3, r2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e0c1      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048a6:	4b40      	ldr	r3, [pc, #256]	@ (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 80048a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1ee      	bne.n	8004890 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048b2:	7dfb      	ldrb	r3, [r7, #23]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d105      	bne.n	80048c4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048b8:	4b3b      	ldr	r3, [pc, #236]	@ (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 80048ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048bc:	4a3a      	ldr	r2, [pc, #232]	@ (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 80048be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 80ad 	beq.w	8004a28 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048ce:	4b36      	ldr	r3, [pc, #216]	@ (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 030c 	and.w	r3, r3, #12
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	d060      	beq.n	800499c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d145      	bne.n	800496e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048e2:	4b33      	ldr	r3, [pc, #204]	@ (80049b0 <HAL_RCC_OscConfig+0x4b4>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e8:	f7fd ff2c 	bl	8002744 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f0:	f7fd ff28 	bl	8002744 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e093      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004902:	4b29      	ldr	r3, [pc, #164]	@ (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1f0      	bne.n	80048f0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	69da      	ldr	r2, [r3, #28]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491c:	019b      	lsls	r3, r3, #6
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004924:	085b      	lsrs	r3, r3, #1
 8004926:	3b01      	subs	r3, #1
 8004928:	041b      	lsls	r3, r3, #16
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004930:	061b      	lsls	r3, r3, #24
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004938:	071b      	lsls	r3, r3, #28
 800493a:	491b      	ldr	r1, [pc, #108]	@ (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 800493c:	4313      	orrs	r3, r2
 800493e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004940:	4b1b      	ldr	r3, [pc, #108]	@ (80049b0 <HAL_RCC_OscConfig+0x4b4>)
 8004942:	2201      	movs	r2, #1
 8004944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004946:	f7fd fefd 	bl	8002744 <HAL_GetTick>
 800494a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800494c:	e008      	b.n	8004960 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800494e:	f7fd fef9 	bl	8002744 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e064      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004960:	4b11      	ldr	r3, [pc, #68]	@ (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0f0      	beq.n	800494e <HAL_RCC_OscConfig+0x452>
 800496c:	e05c      	b.n	8004a28 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800496e:	4b10      	ldr	r3, [pc, #64]	@ (80049b0 <HAL_RCC_OscConfig+0x4b4>)
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004974:	f7fd fee6 	bl	8002744 <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800497c:	f7fd fee2 	bl	8002744 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e04d      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800498e:	4b06      	ldr	r3, [pc, #24]	@ (80049a8 <HAL_RCC_OscConfig+0x4ac>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1f0      	bne.n	800497c <HAL_RCC_OscConfig+0x480>
 800499a:	e045      	b.n	8004a28 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d107      	bne.n	80049b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e040      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
 80049a8:	40023800 	.word	0x40023800
 80049ac:	40007000 	.word	0x40007000
 80049b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049b4:	4b1f      	ldr	r3, [pc, #124]	@ (8004a34 <HAL_RCC_OscConfig+0x538>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d030      	beq.n	8004a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d129      	bne.n	8004a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049da:	429a      	cmp	r2, r3
 80049dc:	d122      	bne.n	8004a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80049e4:	4013      	ands	r3, r2
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80049ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d119      	bne.n	8004a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fa:	085b      	lsrs	r3, r3, #1
 80049fc:	3b01      	subs	r3, #1
 80049fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d10f      	bne.n	8004a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d107      	bne.n	8004a24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d001      	beq.n	8004a28 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e000      	b.n	8004a2a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	40023800 	.word	0x40023800

08004a38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e041      	b.n	8004ace <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d106      	bne.n	8004a64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fd fa2c 	bl	8001ebc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3304      	adds	r3, #4
 8004a74:	4619      	mov	r1, r3
 8004a76:	4610      	mov	r0, r2
 8004a78:	f000 fa88 	bl	8004f8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d001      	beq.n	8004af0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e04e      	b.n	8004b8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a23      	ldr	r2, [pc, #140]	@ (8004b9c <HAL_TIM_Base_Start_IT+0xc4>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d022      	beq.n	8004b58 <HAL_TIM_Base_Start_IT+0x80>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b1a:	d01d      	beq.n	8004b58 <HAL_TIM_Base_Start_IT+0x80>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a1f      	ldr	r2, [pc, #124]	@ (8004ba0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d018      	beq.n	8004b58 <HAL_TIM_Base_Start_IT+0x80>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ba4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d013      	beq.n	8004b58 <HAL_TIM_Base_Start_IT+0x80>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a1c      	ldr	r2, [pc, #112]	@ (8004ba8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00e      	beq.n	8004b58 <HAL_TIM_Base_Start_IT+0x80>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a1b      	ldr	r2, [pc, #108]	@ (8004bac <HAL_TIM_Base_Start_IT+0xd4>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d009      	beq.n	8004b58 <HAL_TIM_Base_Start_IT+0x80>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a19      	ldr	r2, [pc, #100]	@ (8004bb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d004      	beq.n	8004b58 <HAL_TIM_Base_Start_IT+0x80>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a18      	ldr	r2, [pc, #96]	@ (8004bb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d111      	bne.n	8004b7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2b06      	cmp	r3, #6
 8004b68:	d010      	beq.n	8004b8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f042 0201 	orr.w	r2, r2, #1
 8004b78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b7a:	e007      	b.n	8004b8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0201 	orr.w	r2, r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	40010000 	.word	0x40010000
 8004ba0:	40000400 	.word	0x40000400
 8004ba4:	40000800 	.word	0x40000800
 8004ba8:	40000c00 	.word	0x40000c00
 8004bac:	40010400 	.word	0x40010400
 8004bb0:	40014000 	.word	0x40014000
 8004bb4:	40001800 	.word	0x40001800

08004bb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d020      	beq.n	8004c1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d01b      	beq.n	8004c1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0202 	mvn.w	r2, #2
 8004bec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f9a3 	bl	8004f4e <HAL_TIM_IC_CaptureCallback>
 8004c08:	e005      	b.n	8004c16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f995 	bl	8004f3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f9a6 	bl	8004f62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f003 0304 	and.w	r3, r3, #4
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d020      	beq.n	8004c68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d01b      	beq.n	8004c68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f06f 0204 	mvn.w	r2, #4
 8004c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f97d 	bl	8004f4e <HAL_TIM_IC_CaptureCallback>
 8004c54:	e005      	b.n	8004c62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f96f 	bl	8004f3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f980 	bl	8004f62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d020      	beq.n	8004cb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f003 0308 	and.w	r3, r3, #8
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d01b      	beq.n	8004cb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f06f 0208 	mvn.w	r2, #8
 8004c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2204      	movs	r2, #4
 8004c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	f003 0303 	and.w	r3, r3, #3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f957 	bl	8004f4e <HAL_TIM_IC_CaptureCallback>
 8004ca0:	e005      	b.n	8004cae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f949 	bl	8004f3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f95a 	bl	8004f62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	f003 0310 	and.w	r3, r3, #16
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d020      	beq.n	8004d00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f003 0310 	and.w	r3, r3, #16
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d01b      	beq.n	8004d00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f06f 0210 	mvn.w	r2, #16
 8004cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2208      	movs	r2, #8
 8004cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f931 	bl	8004f4e <HAL_TIM_IC_CaptureCallback>
 8004cec:	e005      	b.n	8004cfa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f923 	bl	8004f3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 f934 	bl	8004f62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00c      	beq.n	8004d24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d007      	beq.n	8004d24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f06f 0201 	mvn.w	r2, #1
 8004d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f901 	bl	8004f26 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00c      	beq.n	8004d48 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d007      	beq.n	8004d48 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 faee 	bl	8005324 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00c      	beq.n	8004d6c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d007      	beq.n	8004d6c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f905 	bl	8004f76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	f003 0320 	and.w	r3, r3, #32
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00c      	beq.n	8004d90 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f003 0320 	and.w	r3, r3, #32
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d007      	beq.n	8004d90 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f06f 0220 	mvn.w	r2, #32
 8004d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 fac0 	bl	8005310 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d90:	bf00      	nop
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d101      	bne.n	8004db4 <HAL_TIM_ConfigClockSource+0x1c>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e0b4      	b.n	8004f1e <HAL_TIM_ConfigClockSource+0x186>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004dd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004dda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dec:	d03e      	beq.n	8004e6c <HAL_TIM_ConfigClockSource+0xd4>
 8004dee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004df2:	f200 8087 	bhi.w	8004f04 <HAL_TIM_ConfigClockSource+0x16c>
 8004df6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dfa:	f000 8086 	beq.w	8004f0a <HAL_TIM_ConfigClockSource+0x172>
 8004dfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e02:	d87f      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x16c>
 8004e04:	2b70      	cmp	r3, #112	@ 0x70
 8004e06:	d01a      	beq.n	8004e3e <HAL_TIM_ConfigClockSource+0xa6>
 8004e08:	2b70      	cmp	r3, #112	@ 0x70
 8004e0a:	d87b      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x16c>
 8004e0c:	2b60      	cmp	r3, #96	@ 0x60
 8004e0e:	d050      	beq.n	8004eb2 <HAL_TIM_ConfigClockSource+0x11a>
 8004e10:	2b60      	cmp	r3, #96	@ 0x60
 8004e12:	d877      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x16c>
 8004e14:	2b50      	cmp	r3, #80	@ 0x50
 8004e16:	d03c      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0xfa>
 8004e18:	2b50      	cmp	r3, #80	@ 0x50
 8004e1a:	d873      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x16c>
 8004e1c:	2b40      	cmp	r3, #64	@ 0x40
 8004e1e:	d058      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0x13a>
 8004e20:	2b40      	cmp	r3, #64	@ 0x40
 8004e22:	d86f      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x16c>
 8004e24:	2b30      	cmp	r3, #48	@ 0x30
 8004e26:	d064      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e28:	2b30      	cmp	r3, #48	@ 0x30
 8004e2a:	d86b      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x16c>
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	d060      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e30:	2b20      	cmp	r3, #32
 8004e32:	d867      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x16c>
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d05c      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e38:	2b10      	cmp	r3, #16
 8004e3a:	d05a      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e3c:	e062      	b.n	8004f04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e4e:	f000 f9c3 	bl	80051d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	609a      	str	r2, [r3, #8]
      break;
 8004e6a:	e04f      	b.n	8004f0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e7c:	f000 f9ac 	bl	80051d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e8e:	609a      	str	r2, [r3, #8]
      break;
 8004e90:	e03c      	b.n	8004f0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	f000 f920 	bl	80050e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2150      	movs	r1, #80	@ 0x50
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 f979 	bl	80051a2 <TIM_ITRx_SetConfig>
      break;
 8004eb0:	e02c      	b.n	8004f0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f000 f93f 	bl	8005142 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2160      	movs	r1, #96	@ 0x60
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 f969 	bl	80051a2 <TIM_ITRx_SetConfig>
      break;
 8004ed0:	e01c      	b.n	8004f0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ede:	461a      	mov	r2, r3
 8004ee0:	f000 f900 	bl	80050e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2140      	movs	r1, #64	@ 0x40
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 f959 	bl	80051a2 <TIM_ITRx_SetConfig>
      break;
 8004ef0:	e00c      	b.n	8004f0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4619      	mov	r1, r3
 8004efc:	4610      	mov	r0, r2
 8004efe:	f000 f950 	bl	80051a2 <TIM_ITRx_SetConfig>
      break;
 8004f02:	e003      	b.n	8004f0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	73fb      	strb	r3, [r7, #15]
      break;
 8004f08:	e000      	b.n	8004f0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f2e:	bf00      	nop
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
	...

08004f8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a46      	ldr	r2, [pc, #280]	@ (80050b8 <TIM_Base_SetConfig+0x12c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d013      	beq.n	8004fcc <TIM_Base_SetConfig+0x40>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004faa:	d00f      	beq.n	8004fcc <TIM_Base_SetConfig+0x40>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a43      	ldr	r2, [pc, #268]	@ (80050bc <TIM_Base_SetConfig+0x130>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d00b      	beq.n	8004fcc <TIM_Base_SetConfig+0x40>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a42      	ldr	r2, [pc, #264]	@ (80050c0 <TIM_Base_SetConfig+0x134>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d007      	beq.n	8004fcc <TIM_Base_SetConfig+0x40>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a41      	ldr	r2, [pc, #260]	@ (80050c4 <TIM_Base_SetConfig+0x138>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d003      	beq.n	8004fcc <TIM_Base_SetConfig+0x40>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a40      	ldr	r2, [pc, #256]	@ (80050c8 <TIM_Base_SetConfig+0x13c>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d108      	bne.n	8004fde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a35      	ldr	r2, [pc, #212]	@ (80050b8 <TIM_Base_SetConfig+0x12c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d02b      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fec:	d027      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a32      	ldr	r2, [pc, #200]	@ (80050bc <TIM_Base_SetConfig+0x130>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d023      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a31      	ldr	r2, [pc, #196]	@ (80050c0 <TIM_Base_SetConfig+0x134>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d01f      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a30      	ldr	r2, [pc, #192]	@ (80050c4 <TIM_Base_SetConfig+0x138>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d01b      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a2f      	ldr	r2, [pc, #188]	@ (80050c8 <TIM_Base_SetConfig+0x13c>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d017      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a2e      	ldr	r2, [pc, #184]	@ (80050cc <TIM_Base_SetConfig+0x140>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d013      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a2d      	ldr	r2, [pc, #180]	@ (80050d0 <TIM_Base_SetConfig+0x144>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d00f      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a2c      	ldr	r2, [pc, #176]	@ (80050d4 <TIM_Base_SetConfig+0x148>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00b      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a2b      	ldr	r2, [pc, #172]	@ (80050d8 <TIM_Base_SetConfig+0x14c>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d007      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a2a      	ldr	r2, [pc, #168]	@ (80050dc <TIM_Base_SetConfig+0x150>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d003      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a29      	ldr	r2, [pc, #164]	@ (80050e0 <TIM_Base_SetConfig+0x154>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d108      	bne.n	8005050 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	4313      	orrs	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	4313      	orrs	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a10      	ldr	r2, [pc, #64]	@ (80050b8 <TIM_Base_SetConfig+0x12c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d003      	beq.n	8005084 <TIM_Base_SetConfig+0xf8>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a12      	ldr	r2, [pc, #72]	@ (80050c8 <TIM_Base_SetConfig+0x13c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d103      	bne.n	800508c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	691a      	ldr	r2, [r3, #16]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b01      	cmp	r3, #1
 800509c:	d105      	bne.n	80050aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	f023 0201 	bic.w	r2, r3, #1
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	611a      	str	r2, [r3, #16]
  }
}
 80050aa:	bf00      	nop
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	40010000 	.word	0x40010000
 80050bc:	40000400 	.word	0x40000400
 80050c0:	40000800 	.word	0x40000800
 80050c4:	40000c00 	.word	0x40000c00
 80050c8:	40010400 	.word	0x40010400
 80050cc:	40014000 	.word	0x40014000
 80050d0:	40014400 	.word	0x40014400
 80050d4:	40014800 	.word	0x40014800
 80050d8:	40001800 	.word	0x40001800
 80050dc:	40001c00 	.word	0x40001c00
 80050e0:	40002000 	.word	0x40002000

080050e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b087      	sub	sp, #28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	f023 0201 	bic.w	r2, r3, #1
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800510e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	4313      	orrs	r3, r2
 8005118:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f023 030a 	bic.w	r3, r3, #10
 8005120:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	4313      	orrs	r3, r2
 8005128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	621a      	str	r2, [r3, #32]
}
 8005136:	bf00      	nop
 8005138:	371c      	adds	r7, #28
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005142:	b480      	push	{r7}
 8005144:	b087      	sub	sp, #28
 8005146:	af00      	add	r7, sp, #0
 8005148:	60f8      	str	r0, [r7, #12]
 800514a:	60b9      	str	r1, [r7, #8]
 800514c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	f023 0210 	bic.w	r2, r3, #16
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800516c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	031b      	lsls	r3, r3, #12
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	4313      	orrs	r3, r2
 8005176:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800517e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	011b      	lsls	r3, r3, #4
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	4313      	orrs	r3, r2
 8005188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	621a      	str	r2, [r3, #32]
}
 8005196:	bf00      	nop
 8005198:	371c      	adds	r7, #28
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b085      	sub	sp, #20
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4313      	orrs	r3, r2
 80051c0:	f043 0307 	orr.w	r3, r3, #7
 80051c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	609a      	str	r2, [r3, #8]
}
 80051cc:	bf00      	nop
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
 80051e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	021a      	lsls	r2, r3, #8
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	431a      	orrs	r2, r3
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	4313      	orrs	r3, r2
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	4313      	orrs	r3, r2
 8005204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	609a      	str	r2, [r3, #8]
}
 800520c:	bf00      	nop
 800520e:	371c      	adds	r7, #28
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005228:	2b01      	cmp	r3, #1
 800522a:	d101      	bne.n	8005230 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800522c:	2302      	movs	r3, #2
 800522e:	e05a      	b.n	80052e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005256:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a21      	ldr	r2, [pc, #132]	@ (80052f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d022      	beq.n	80052ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800527c:	d01d      	beq.n	80052ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a1d      	ldr	r2, [pc, #116]	@ (80052f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d018      	beq.n	80052ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a1b      	ldr	r2, [pc, #108]	@ (80052fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d013      	beq.n	80052ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a1a      	ldr	r2, [pc, #104]	@ (8005300 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d00e      	beq.n	80052ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a18      	ldr	r2, [pc, #96]	@ (8005304 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d009      	beq.n	80052ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a17      	ldr	r2, [pc, #92]	@ (8005308 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d004      	beq.n	80052ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a15      	ldr	r2, [pc, #84]	@ (800530c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d10c      	bne.n	80052d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3714      	adds	r7, #20
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	40010000 	.word	0x40010000
 80052f8:	40000400 	.word	0x40000400
 80052fc:	40000800 	.word	0x40000800
 8005300:	40000c00 	.word	0x40000c00
 8005304:	40010400 	.word	0x40010400
 8005308:	40014000 	.word	0x40014000
 800530c:	40001800 	.word	0x40001800

08005310 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <LL_GPIO_SetPinMode>:
{
 8005338:	b480      	push	{r7}
 800533a:	b08b      	sub	sp, #44	@ 0x2c
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	fa93 f3a3 	rbit	r3, r3
 8005352:	613b      	str	r3, [r7, #16]
  return result;
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800535e:	2320      	movs	r3, #32
 8005360:	e003      	b.n	800536a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	fab3 f383 	clz	r3, r3
 8005368:	b2db      	uxtb	r3, r3
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	2103      	movs	r1, #3
 800536e:	fa01 f303 	lsl.w	r3, r1, r3
 8005372:	43db      	mvns	r3, r3
 8005374:	401a      	ands	r2, r3
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800537a:	6a3b      	ldr	r3, [r7, #32]
 800537c:	fa93 f3a3 	rbit	r3, r3
 8005380:	61fb      	str	r3, [r7, #28]
  return result;
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800538c:	2320      	movs	r3, #32
 800538e:	e003      	b.n	8005398 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005392:	fab3 f383 	clz	r3, r3
 8005396:	b2db      	uxtb	r3, r3
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	6879      	ldr	r1, [r7, #4]
 800539c:	fa01 f303 	lsl.w	r3, r1, r3
 80053a0:	431a      	orrs	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	601a      	str	r2, [r3, #0]
}
 80053a6:	bf00      	nop
 80053a8:	372c      	adds	r7, #44	@ 0x2c
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <LL_GPIO_SetPinOutputType>:
{
 80053b2:	b480      	push	{r7}
 80053b4:	b085      	sub	sp, #20
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	60f8      	str	r0, [r7, #12]
 80053ba:	60b9      	str	r1, [r7, #8]
 80053bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	43db      	mvns	r3, r3
 80053c6:	401a      	ands	r2, r3
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	6879      	ldr	r1, [r7, #4]
 80053cc:	fb01 f303 	mul.w	r3, r1, r3
 80053d0:	431a      	orrs	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	605a      	str	r2, [r3, #4]
}
 80053d6:	bf00      	nop
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <LL_GPIO_SetPinSpeed>:
{
 80053e2:	b480      	push	{r7}
 80053e4:	b08b      	sub	sp, #44	@ 0x2c
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	60f8      	str	r0, [r7, #12]
 80053ea:	60b9      	str	r1, [r7, #8]
 80053ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	689a      	ldr	r2, [r3, #8]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	fa93 f3a3 	rbit	r3, r3
 80053fc:	613b      	str	r3, [r7, #16]
  return result;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005408:	2320      	movs	r3, #32
 800540a:	e003      	b.n	8005414 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	fab3 f383 	clz	r3, r3
 8005412:	b2db      	uxtb	r3, r3
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	2103      	movs	r1, #3
 8005418:	fa01 f303 	lsl.w	r3, r1, r3
 800541c:	43db      	mvns	r3, r3
 800541e:	401a      	ands	r2, r3
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	fa93 f3a3 	rbit	r3, r3
 800542a:	61fb      	str	r3, [r7, #28]
  return result;
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005436:	2320      	movs	r3, #32
 8005438:	e003      	b.n	8005442 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800543a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543c:	fab3 f383 	clz	r3, r3
 8005440:	b2db      	uxtb	r3, r3
 8005442:	005b      	lsls	r3, r3, #1
 8005444:	6879      	ldr	r1, [r7, #4]
 8005446:	fa01 f303 	lsl.w	r3, r1, r3
 800544a:	431a      	orrs	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	609a      	str	r2, [r3, #8]
}
 8005450:	bf00      	nop
 8005452:	372c      	adds	r7, #44	@ 0x2c
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <LL_GPIO_SetPinPull>:
{
 800545c:	b480      	push	{r7}
 800545e:	b08b      	sub	sp, #44	@ 0x2c
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	68da      	ldr	r2, [r3, #12]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	fa93 f3a3 	rbit	r3, r3
 8005476:	613b      	str	r3, [r7, #16]
  return result;
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005482:	2320      	movs	r3, #32
 8005484:	e003      	b.n	800548e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	fab3 f383 	clz	r3, r3
 800548c:	b2db      	uxtb	r3, r3
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	2103      	movs	r1, #3
 8005492:	fa01 f303 	lsl.w	r3, r1, r3
 8005496:	43db      	mvns	r3, r3
 8005498:	401a      	ands	r2, r3
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	fa93 f3a3 	rbit	r3, r3
 80054a4:	61fb      	str	r3, [r7, #28]
  return result;
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80054aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80054b0:	2320      	movs	r3, #32
 80054b2:	e003      	b.n	80054bc <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80054b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b6:	fab3 f383 	clz	r3, r3
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	6879      	ldr	r1, [r7, #4]
 80054c0:	fa01 f303 	lsl.w	r3, r1, r3
 80054c4:	431a      	orrs	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	60da      	str	r2, [r3, #12]
}
 80054ca:	bf00      	nop
 80054cc:	372c      	adds	r7, #44	@ 0x2c
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <LL_GPIO_SetAFPin_0_7>:
{
 80054d6:	b480      	push	{r7}
 80054d8:	b08b      	sub	sp, #44	@ 0x2c
 80054da:	af00      	add	r7, sp, #0
 80054dc:	60f8      	str	r0, [r7, #12]
 80054de:	60b9      	str	r1, [r7, #8]
 80054e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6a1a      	ldr	r2, [r3, #32]
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	fa93 f3a3 	rbit	r3, r3
 80054f0:	613b      	str	r3, [r7, #16]
  return result;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80054fc:	2320      	movs	r3, #32
 80054fe:	e003      	b.n	8005508 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	fab3 f383 	clz	r3, r3
 8005506:	b2db      	uxtb	r3, r3
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	210f      	movs	r1, #15
 800550c:	fa01 f303 	lsl.w	r3, r1, r3
 8005510:	43db      	mvns	r3, r3
 8005512:	401a      	ands	r2, r3
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	fa93 f3a3 	rbit	r3, r3
 800551e:	61fb      	str	r3, [r7, #28]
  return result;
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005526:	2b00      	cmp	r3, #0
 8005528:	d101      	bne.n	800552e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800552a:	2320      	movs	r3, #32
 800552c:	e003      	b.n	8005536 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800552e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005530:	fab3 f383 	clz	r3, r3
 8005534:	b2db      	uxtb	r3, r3
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	6879      	ldr	r1, [r7, #4]
 800553a:	fa01 f303 	lsl.w	r3, r1, r3
 800553e:	431a      	orrs	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	621a      	str	r2, [r3, #32]
}
 8005544:	bf00      	nop
 8005546:	372c      	adds	r7, #44	@ 0x2c
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <LL_GPIO_SetAFPin_8_15>:
{
 8005550:	b480      	push	{r7}
 8005552:	b08b      	sub	sp, #44	@ 0x2c
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	0a1b      	lsrs	r3, r3, #8
 8005564:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	fa93 f3a3 	rbit	r3, r3
 800556c:	613b      	str	r3, [r7, #16]
  return result;
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005578:	2320      	movs	r3, #32
 800557a:	e003      	b.n	8005584 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	fab3 f383 	clz	r3, r3
 8005582:	b2db      	uxtb	r3, r3
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	210f      	movs	r1, #15
 8005588:	fa01 f303 	lsl.w	r3, r1, r3
 800558c:	43db      	mvns	r3, r3
 800558e:	401a      	ands	r2, r3
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	0a1b      	lsrs	r3, r3, #8
 8005594:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	fa93 f3a3 	rbit	r3, r3
 800559c:	61fb      	str	r3, [r7, #28]
  return result;
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80055a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80055a8:	2320      	movs	r3, #32
 80055aa:	e003      	b.n	80055b4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80055ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ae:	fab3 f383 	clz	r3, r3
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	fa01 f303 	lsl.w	r3, r1, r3
 80055bc:	431a      	orrs	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80055c2:	bf00      	nop
 80055c4:	372c      	adds	r7, #44	@ 0x2c
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b08a      	sub	sp, #40	@ 0x28
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80055d8:	2300      	movs	r3, #0
 80055da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 80055dc:	2300      	movs	r3, #0
 80055de:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	fa93 f3a3 	rbit	r3, r3
 80055ec:	617b      	str	r3, [r7, #20]
  return result;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <LL_GPIO_Init+0x2e>
    return 32U;
 80055f8:	2320      	movs	r3, #32
 80055fa:	e003      	b.n	8005604 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	fab3 f383 	clz	r3, r3
 8005602:	b2db      	uxtb	r3, r3
 8005604:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005606:	e057      	b.n	80056b8 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	2101      	movs	r1, #1
 800560e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005610:	fa01 f303 	lsl.w	r3, r1, r3
 8005614:	4013      	ands	r3, r2
 8005616:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8005618:	6a3b      	ldr	r3, [r7, #32]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d049      	beq.n	80056b2 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d003      	beq.n	800562e <LL_GPIO_Init+0x60>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	2b02      	cmp	r3, #2
 800562c:	d10d      	bne.n	800564a <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	461a      	mov	r2, r3
 8005634:	6a39      	ldr	r1, [r7, #32]
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f7ff fed3 	bl	80053e2 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	461a      	mov	r2, r3
 8005642:	6a39      	ldr	r1, [r7, #32]
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f7ff feb4 	bl	80053b2 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	461a      	mov	r2, r3
 8005650:	6a39      	ldr	r1, [r7, #32]
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7ff ff02 	bl	800545c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	2b02      	cmp	r3, #2
 800565e:	d121      	bne.n	80056a4 <LL_GPIO_Init+0xd6>
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	fa93 f3a3 	rbit	r3, r3
 800566a:	60bb      	str	r3, [r7, #8]
  return result;
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <LL_GPIO_Init+0xac>
    return 32U;
 8005676:	2320      	movs	r3, #32
 8005678:	e003      	b.n	8005682 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	fab3 f383 	clz	r3, r3
 8005680:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005682:	2b07      	cmp	r3, #7
 8005684:	d807      	bhi.n	8005696 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	461a      	mov	r2, r3
 800568c:	6a39      	ldr	r1, [r7, #32]
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7ff ff21 	bl	80054d6 <LL_GPIO_SetAFPin_0_7>
 8005694:	e006      	b.n	80056a4 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	461a      	mov	r2, r3
 800569c:	6a39      	ldr	r1, [r7, #32]
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7ff ff56 	bl	8005550 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	461a      	mov	r2, r3
 80056aa:	6a39      	ldr	r1, [r7, #32]
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f7ff fe43 	bl	8005338 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80056b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b4:	3301      	adds	r3, #1
 80056b6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056be:	fa22 f303 	lsr.w	r3, r2, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1a0      	bne.n	8005608 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3728      	adds	r7, #40	@ 0x28
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80056d0:	b480      	push	{r7}
 80056d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80056d4:	4b04      	ldr	r3, [pc, #16]	@ (80056e8 <LL_RCC_GetSysClkSource+0x18>)
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f003 030c 	and.w	r3, r3, #12
}
 80056dc:	4618      	mov	r0, r3
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	40023800 	.word	0x40023800

080056ec <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80056f0:	4b04      	ldr	r3, [pc, #16]	@ (8005704 <LL_RCC_GetAHBPrescaler+0x18>)
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	40023800 	.word	0x40023800

08005708 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800570c:	4b04      	ldr	r3, [pc, #16]	@ (8005720 <LL_RCC_GetAPB1Prescaler+0x18>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8005714:	4618      	mov	r0, r3
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	40023800 	.word	0x40023800

08005724 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005728:	4b04      	ldr	r3, [pc, #16]	@ (800573c <LL_RCC_GetAPB2Prescaler+0x18>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8005730:	4618      	mov	r0, r3
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	40023800 	.word	0x40023800

08005740 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005744:	4b04      	ldr	r3, [pc, #16]	@ (8005758 <LL_RCC_PLL_GetMainSource+0x18>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 800574c:	4618      	mov	r0, r3
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40023800 	.word	0x40023800

0800575c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005760:	4b04      	ldr	r3, [pc, #16]	@ (8005774 <LL_RCC_PLL_GetN+0x18>)
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	099b      	lsrs	r3, r3, #6
 8005766:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800576a:	4618      	mov	r0, r3
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	40023800 	.word	0x40023800

08005778 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800577c:	4b04      	ldr	r3, [pc, #16]	@ (8005790 <LL_RCC_PLL_GetP+0x18>)
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8005784:	4618      	mov	r0, r3
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	40023800 	.word	0x40023800

08005794 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005794:	b480      	push	{r7}
 8005796:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005798:	4b04      	ldr	r3, [pc, #16]	@ (80057ac <LL_RCC_PLL_GetR+0x18>)
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	40023800 	.word	0x40023800

080057b0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80057b0:	b480      	push	{r7}
 80057b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80057b4:	4b04      	ldr	r3, [pc, #16]	@ (80057c8 <LL_RCC_PLL_GetDivider+0x18>)
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80057bc:	4618      	mov	r0, r3
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	40023800 	.word	0x40023800

080057cc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80057d4:	f000 f820 	bl	8005818 <RCC_GetSystemClockFreq>
 80057d8:	4602      	mov	r2, r0
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 f85a 	bl	800589c <RCC_GetHCLKClockFreq>
 80057e8:	4602      	mov	r2, r0
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 f868 	bl	80058c8 <RCC_GetPCLK1ClockFreq>
 80057f8:	4602      	mov	r2, r0
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	4618      	mov	r0, r3
 8005804:	f000 f874 	bl	80058f0 <RCC_GetPCLK2ClockFreq>
 8005808:	4602      	mov	r2, r0
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	60da      	str	r2, [r3, #12]
}
 800580e:	bf00      	nop
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
	...

08005818 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800581e:	2300      	movs	r3, #0
 8005820:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005822:	f7ff ff55 	bl	80056d0 <LL_RCC_GetSysClkSource>
 8005826:	4603      	mov	r3, r0
 8005828:	2b0c      	cmp	r3, #12
 800582a:	d82d      	bhi.n	8005888 <RCC_GetSystemClockFreq+0x70>
 800582c:	a201      	add	r2, pc, #4	@ (adr r2, 8005834 <RCC_GetSystemClockFreq+0x1c>)
 800582e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005832:	bf00      	nop
 8005834:	08005869 	.word	0x08005869
 8005838:	08005889 	.word	0x08005889
 800583c:	08005889 	.word	0x08005889
 8005840:	08005889 	.word	0x08005889
 8005844:	0800586f 	.word	0x0800586f
 8005848:	08005889 	.word	0x08005889
 800584c:	08005889 	.word	0x08005889
 8005850:	08005889 	.word	0x08005889
 8005854:	08005875 	.word	0x08005875
 8005858:	08005889 	.word	0x08005889
 800585c:	08005889 	.word	0x08005889
 8005860:	08005889 	.word	0x08005889
 8005864:	0800587f 	.word	0x0800587f
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005868:	4b0b      	ldr	r3, [pc, #44]	@ (8005898 <RCC_GetSystemClockFreq+0x80>)
 800586a:	607b      	str	r3, [r7, #4]
      break;
 800586c:	e00f      	b.n	800588e <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800586e:	4b0a      	ldr	r3, [pc, #40]	@ (8005898 <RCC_GetSystemClockFreq+0x80>)
 8005870:	607b      	str	r3, [r7, #4]
      break;
 8005872:	e00c      	b.n	800588e <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8005874:	2008      	movs	r0, #8
 8005876:	f000 f84f 	bl	8005918 <RCC_PLL_GetFreqDomain_SYS>
 800587a:	6078      	str	r0, [r7, #4]
      break;
 800587c:	e007      	b.n	800588e <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 800587e:	200c      	movs	r0, #12
 8005880:	f000 f84a 	bl	8005918 <RCC_PLL_GetFreqDomain_SYS>
 8005884:	6078      	str	r0, [r7, #4]
      break;
 8005886:	e002      	b.n	800588e <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8005888:	4b03      	ldr	r3, [pc, #12]	@ (8005898 <RCC_GetSystemClockFreq+0x80>)
 800588a:	607b      	str	r3, [r7, #4]
      break;
 800588c:	bf00      	nop
  }

  return frequency;
 800588e:	687b      	ldr	r3, [r7, #4]
}
 8005890:	4618      	mov	r0, r3
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	00f42400 	.word	0x00f42400

0800589c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80058a4:	f7ff ff22 	bl	80056ec <LL_RCC_GetAHBPrescaler>
 80058a8:	4603      	mov	r3, r0
 80058aa:	091b      	lsrs	r3, r3, #4
 80058ac:	f003 030f 	and.w	r3, r3, #15
 80058b0:	4a04      	ldr	r2, [pc, #16]	@ (80058c4 <RCC_GetHCLKClockFreq+0x28>)
 80058b2:	5cd3      	ldrb	r3, [r2, r3]
 80058b4:	461a      	mov	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	40d3      	lsrs	r3, r2
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	08006224 	.word	0x08006224

080058c8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80058d0:	f7ff ff1a 	bl	8005708 <LL_RCC_GetAPB1Prescaler>
 80058d4:	4603      	mov	r3, r0
 80058d6:	0a9b      	lsrs	r3, r3, #10
 80058d8:	4a04      	ldr	r2, [pc, #16]	@ (80058ec <RCC_GetPCLK1ClockFreq+0x24>)
 80058da:	5cd3      	ldrb	r3, [r2, r3]
 80058dc:	461a      	mov	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	40d3      	lsrs	r3, r2
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	08006234 	.word	0x08006234

080058f0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80058f8:	f7ff ff14 	bl	8005724 <LL_RCC_GetAPB2Prescaler>
 80058fc:	4603      	mov	r3, r0
 80058fe:	0b5b      	lsrs	r3, r3, #13
 8005900:	4a04      	ldr	r2, [pc, #16]	@ (8005914 <RCC_GetPCLK2ClockFreq+0x24>)
 8005902:	5cd3      	ldrb	r3, [r2, r3]
 8005904:	461a      	mov	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	40d3      	lsrs	r3, r2
}
 800590a:	4618      	mov	r0, r3
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	08006234 	.word	0x08006234

08005918 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8005918:	b590      	push	{r4, r7, lr}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8005924:	2300      	movs	r3, #0
 8005926:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800592c:	f7ff ff08 	bl	8005740 <LL_RCC_PLL_GetMainSource>
 8005930:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d004      	beq.n	8005942 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800593e:	d003      	beq.n	8005948 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8005940:	e005      	b.n	800594e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005942:	4b1c      	ldr	r3, [pc, #112]	@ (80059b4 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8005944:	617b      	str	r3, [r7, #20]
      break;
 8005946:	e005      	b.n	8005954 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005948:	4b1a      	ldr	r3, [pc, #104]	@ (80059b4 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 800594a:	617b      	str	r3, [r7, #20]
      break;
 800594c:	e002      	b.n	8005954 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800594e:	4b19      	ldr	r3, [pc, #100]	@ (80059b4 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8005950:	617b      	str	r3, [r7, #20]
      break;
 8005952:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b08      	cmp	r3, #8
 8005958:	d114      	bne.n	8005984 <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800595a:	f7ff ff29 	bl	80057b0 <LL_RCC_PLL_GetDivider>
 800595e:	4602      	mov	r2, r0
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	fbb3 f4f2 	udiv	r4, r3, r2
 8005966:	f7ff fef9 	bl	800575c <LL_RCC_PLL_GetN>
 800596a:	4603      	mov	r3, r0
 800596c:	fb03 f404 	mul.w	r4, r3, r4
 8005970:	f7ff ff02 	bl	8005778 <LL_RCC_PLL_GetP>
 8005974:	4603      	mov	r3, r0
 8005976:	0c1b      	lsrs	r3, r3, #16
 8005978:	3301      	adds	r3, #1
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	fbb4 f3f3 	udiv	r3, r4, r3
 8005980:	613b      	str	r3, [r7, #16]
 8005982:	e011      	b.n	80059a8 <RCC_PLL_GetFreqDomain_SYS+0x90>
                                              LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005984:	f7ff ff14 	bl	80057b0 <LL_RCC_PLL_GetDivider>
 8005988:	4602      	mov	r2, r0
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	fbb3 f4f2 	udiv	r4, r3, r2
 8005990:	f7ff fee4 	bl	800575c <LL_RCC_PLL_GetN>
 8005994:	4603      	mov	r3, r0
 8005996:	fb03 f404 	mul.w	r4, r3, r4
 800599a:	f7ff fefb 	bl	8005794 <LL_RCC_PLL_GetR>
 800599e:	4603      	mov	r3, r0
 80059a0:	0f1b      	lsrs	r3, r3, #28
 80059a2:	fbb4 f3f3 	udiv	r3, r4, r3
 80059a6:	613b      	str	r3, [r7, #16]
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80059a8:	693b      	ldr	r3, [r7, #16]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	371c      	adds	r7, #28
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd90      	pop	{r4, r7, pc}
 80059b2:	bf00      	nop
 80059b4:	00f42400 	.word	0x00f42400

080059b8 <LL_USART_IsEnabled>:
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059cc:	bf0c      	ite	eq
 80059ce:	2301      	moveq	r3, #1
 80059d0:	2300      	movne	r3, #0
 80059d2:	b2db      	uxtb	r3, r3
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <LL_USART_SetStopBitsLength>:
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	431a      	orrs	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	611a      	str	r2, [r3, #16]
}
 80059fa:	bf00      	nop
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <LL_USART_SetHWFlowCtrl>:
{
 8005a06:	b480      	push	{r7}
 8005a08:	b083      	sub	sp, #12
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
 8005a0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	615a      	str	r2, [r3, #20]
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <LL_USART_SetBaudRate>:
{
 8005a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a30:	b0c0      	sub	sp, #256	@ 0x100
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a38:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8005a3c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8005a40:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a4c:	f040 810c 	bne.w	8005c68 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005a50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a54:	2200      	movs	r2, #0
 8005a56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005a5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005a62:	4622      	mov	r2, r4
 8005a64:	462b      	mov	r3, r5
 8005a66:	1891      	adds	r1, r2, r2
 8005a68:	6639      	str	r1, [r7, #96]	@ 0x60
 8005a6a:	415b      	adcs	r3, r3
 8005a6c:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a6e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8005a72:	4621      	mov	r1, r4
 8005a74:	eb12 0801 	adds.w	r8, r2, r1
 8005a78:	4629      	mov	r1, r5
 8005a7a:	eb43 0901 	adc.w	r9, r3, r1
 8005a7e:	f04f 0200 	mov.w	r2, #0
 8005a82:	f04f 0300 	mov.w	r3, #0
 8005a86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a92:	4690      	mov	r8, r2
 8005a94:	4699      	mov	r9, r3
 8005a96:	4623      	mov	r3, r4
 8005a98:	eb18 0303 	adds.w	r3, r8, r3
 8005a9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005aa0:	462b      	mov	r3, r5
 8005aa2:	eb49 0303 	adc.w	r3, r9, r3
 8005aa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005aaa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005aae:	2200      	movs	r2, #0
 8005ab0:	469a      	mov	sl, r3
 8005ab2:	4693      	mov	fp, r2
 8005ab4:	eb1a 030a 	adds.w	r3, sl, sl
 8005ab8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005aba:	eb4b 030b 	adc.w	r3, fp, fp
 8005abe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ac0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005ac4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ac8:	f7fa feac 	bl	8000824 <__aeabi_uldivmod>
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4b64      	ldr	r3, [pc, #400]	@ (8005c64 <LL_USART_SetBaudRate+0x238>)
 8005ad2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ad6:	095b      	lsrs	r3, r3, #5
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	011b      	lsls	r3, r3, #4
 8005adc:	b29c      	uxth	r4, r3
 8005ade:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ae8:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005aec:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8005af0:	4642      	mov	r2, r8
 8005af2:	464b      	mov	r3, r9
 8005af4:	1891      	adds	r1, r2, r2
 8005af6:	6539      	str	r1, [r7, #80]	@ 0x50
 8005af8:	415b      	adcs	r3, r3
 8005afa:	657b      	str	r3, [r7, #84]	@ 0x54
 8005afc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005b00:	4641      	mov	r1, r8
 8005b02:	1851      	adds	r1, r2, r1
 8005b04:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b06:	4649      	mov	r1, r9
 8005b08:	414b      	adcs	r3, r1
 8005b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b0c:	f04f 0200 	mov.w	r2, #0
 8005b10:	f04f 0300 	mov.w	r3, #0
 8005b14:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8005b18:	4659      	mov	r1, fp
 8005b1a:	00cb      	lsls	r3, r1, #3
 8005b1c:	4651      	mov	r1, sl
 8005b1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b22:	4651      	mov	r1, sl
 8005b24:	00ca      	lsls	r2, r1, #3
 8005b26:	4610      	mov	r0, r2
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	4642      	mov	r2, r8
 8005b2e:	189b      	adds	r3, r3, r2
 8005b30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b34:	464b      	mov	r3, r9
 8005b36:	460a      	mov	r2, r1
 8005b38:	eb42 0303 	adc.w	r3, r2, r3
 8005b3c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005b40:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005b44:	2200      	movs	r2, #0
 8005b46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b4a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8005b4e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005b52:	460b      	mov	r3, r1
 8005b54:	18db      	adds	r3, r3, r3
 8005b56:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b58:	4613      	mov	r3, r2
 8005b5a:	eb42 0303 	adc.w	r3, r2, r3
 8005b5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005b64:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8005b68:	f7fa fe5c 	bl	8000824 <__aeabi_uldivmod>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	460b      	mov	r3, r1
 8005b70:	4611      	mov	r1, r2
 8005b72:	4b3c      	ldr	r3, [pc, #240]	@ (8005c64 <LL_USART_SetBaudRate+0x238>)
 8005b74:	fba3 2301 	umull	r2, r3, r3, r1
 8005b78:	095b      	lsrs	r3, r3, #5
 8005b7a:	2264      	movs	r2, #100	@ 0x64
 8005b7c:	fb02 f303 	mul.w	r3, r2, r3
 8005b80:	1acb      	subs	r3, r1, r3
 8005b82:	00db      	lsls	r3, r3, #3
 8005b84:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005b88:	4b36      	ldr	r3, [pc, #216]	@ (8005c64 <LL_USART_SetBaudRate+0x238>)
 8005b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b8e:	095b      	lsrs	r3, r3, #5
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	4423      	add	r3, r4
 8005b9e:	b29c      	uxth	r4, r3
 8005ba0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005baa:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005bae:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8005bb2:	4642      	mov	r2, r8
 8005bb4:	464b      	mov	r3, r9
 8005bb6:	1891      	adds	r1, r2, r2
 8005bb8:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005bba:	415b      	adcs	r3, r3
 8005bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bbe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005bc2:	4641      	mov	r1, r8
 8005bc4:	1851      	adds	r1, r2, r1
 8005bc6:	6339      	str	r1, [r7, #48]	@ 0x30
 8005bc8:	4649      	mov	r1, r9
 8005bca:	414b      	adcs	r3, r1
 8005bcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bce:	f04f 0200 	mov.w	r2, #0
 8005bd2:	f04f 0300 	mov.w	r3, #0
 8005bd6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005bda:	4659      	mov	r1, fp
 8005bdc:	00cb      	lsls	r3, r1, #3
 8005bde:	4651      	mov	r1, sl
 8005be0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005be4:	4651      	mov	r1, sl
 8005be6:	00ca      	lsls	r2, r1, #3
 8005be8:	4610      	mov	r0, r2
 8005bea:	4619      	mov	r1, r3
 8005bec:	4603      	mov	r3, r0
 8005bee:	4642      	mov	r2, r8
 8005bf0:	189b      	adds	r3, r3, r2
 8005bf2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005bf6:	464b      	mov	r3, r9
 8005bf8:	460a      	mov	r2, r1
 8005bfa:	eb42 0303 	adc.w	r3, r2, r3
 8005bfe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005c02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005c06:	2200      	movs	r2, #0
 8005c08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c0c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8005c10:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005c14:	460b      	mov	r3, r1
 8005c16:	18db      	adds	r3, r3, r3
 8005c18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	eb42 0303 	adc.w	r3, r2, r3
 8005c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c26:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8005c2a:	f7fa fdfb 	bl	8000824 <__aeabi_uldivmod>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	460b      	mov	r3, r1
 8005c32:	4b0c      	ldr	r3, [pc, #48]	@ (8005c64 <LL_USART_SetBaudRate+0x238>)
 8005c34:	fba3 1302 	umull	r1, r3, r3, r2
 8005c38:	095b      	lsrs	r3, r3, #5
 8005c3a:	2164      	movs	r1, #100	@ 0x64
 8005c3c:	fb01 f303 	mul.w	r3, r1, r3
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	00db      	lsls	r3, r3, #3
 8005c44:	3332      	adds	r3, #50	@ 0x32
 8005c46:	4a07      	ldr	r2, [pc, #28]	@ (8005c64 <LL_USART_SetBaudRate+0x238>)
 8005c48:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4c:	095b      	lsrs	r3, r3, #5
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	f003 0307 	and.w	r3, r3, #7
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	4423      	add	r3, r4
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c60:	609a      	str	r2, [r3, #8]
}
 8005c62:	e108      	b.n	8005e76 <LL_USART_SetBaudRate+0x44a>
 8005c64:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005c68:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c72:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005c76:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8005c7a:	4642      	mov	r2, r8
 8005c7c:	464b      	mov	r3, r9
 8005c7e:	1891      	adds	r1, r2, r2
 8005c80:	6239      	str	r1, [r7, #32]
 8005c82:	415b      	adcs	r3, r3
 8005c84:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c8a:	4641      	mov	r1, r8
 8005c8c:	1854      	adds	r4, r2, r1
 8005c8e:	4649      	mov	r1, r9
 8005c90:	eb43 0501 	adc.w	r5, r3, r1
 8005c94:	f04f 0200 	mov.w	r2, #0
 8005c98:	f04f 0300 	mov.w	r3, #0
 8005c9c:	00eb      	lsls	r3, r5, #3
 8005c9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ca2:	00e2      	lsls	r2, r4, #3
 8005ca4:	4614      	mov	r4, r2
 8005ca6:	461d      	mov	r5, r3
 8005ca8:	4643      	mov	r3, r8
 8005caa:	18e3      	adds	r3, r4, r3
 8005cac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005cb0:	464b      	mov	r3, r9
 8005cb2:	eb45 0303 	adc.w	r3, r5, r3
 8005cb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005cba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005cc4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005cc8:	f04f 0200 	mov.w	r2, #0
 8005ccc:	f04f 0300 	mov.w	r3, #0
 8005cd0:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8005cd4:	4629      	mov	r1, r5
 8005cd6:	008b      	lsls	r3, r1, #2
 8005cd8:	4621      	mov	r1, r4
 8005cda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cde:	4621      	mov	r1, r4
 8005ce0:	008a      	lsls	r2, r1, #2
 8005ce2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8005ce6:	f7fa fd9d 	bl	8000824 <__aeabi_uldivmod>
 8005cea:	4602      	mov	r2, r0
 8005cec:	460b      	mov	r3, r1
 8005cee:	4b65      	ldr	r3, [pc, #404]	@ (8005e84 <LL_USART_SetBaudRate+0x458>)
 8005cf0:	fba3 2302 	umull	r2, r3, r3, r2
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	011b      	lsls	r3, r3, #4
 8005cfa:	b29c      	uxth	r4, r3
 8005cfc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005d00:	2200      	movs	r2, #0
 8005d02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d0a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8005d0e:	4642      	mov	r2, r8
 8005d10:	464b      	mov	r3, r9
 8005d12:	1891      	adds	r1, r2, r2
 8005d14:	61b9      	str	r1, [r7, #24]
 8005d16:	415b      	adcs	r3, r3
 8005d18:	61fb      	str	r3, [r7, #28]
 8005d1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d1e:	4641      	mov	r1, r8
 8005d20:	1851      	adds	r1, r2, r1
 8005d22:	6139      	str	r1, [r7, #16]
 8005d24:	4649      	mov	r1, r9
 8005d26:	414b      	adcs	r3, r1
 8005d28:	617b      	str	r3, [r7, #20]
 8005d2a:	f04f 0200 	mov.w	r2, #0
 8005d2e:	f04f 0300 	mov.w	r3, #0
 8005d32:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d36:	4659      	mov	r1, fp
 8005d38:	00cb      	lsls	r3, r1, #3
 8005d3a:	4651      	mov	r1, sl
 8005d3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d40:	4651      	mov	r1, sl
 8005d42:	00ca      	lsls	r2, r1, #3
 8005d44:	4610      	mov	r0, r2
 8005d46:	4619      	mov	r1, r3
 8005d48:	4603      	mov	r3, r0
 8005d4a:	4642      	mov	r2, r8
 8005d4c:	189b      	adds	r3, r3, r2
 8005d4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d52:	464b      	mov	r3, r9
 8005d54:	460a      	mov	r2, r1
 8005d56:	eb42 0303 	adc.w	r3, r2, r3
 8005d5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005d5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d62:	2200      	movs	r2, #0
 8005d64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d68:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005d6c:	f04f 0200 	mov.w	r2, #0
 8005d70:	f04f 0300 	mov.w	r3, #0
 8005d74:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8005d78:	4649      	mov	r1, r9
 8005d7a:	008b      	lsls	r3, r1, #2
 8005d7c:	4641      	mov	r1, r8
 8005d7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d82:	4641      	mov	r1, r8
 8005d84:	008a      	lsls	r2, r1, #2
 8005d86:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8005d8a:	f7fa fd4b 	bl	8000824 <__aeabi_uldivmod>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	460b      	mov	r3, r1
 8005d92:	4611      	mov	r1, r2
 8005d94:	4b3b      	ldr	r3, [pc, #236]	@ (8005e84 <LL_USART_SetBaudRate+0x458>)
 8005d96:	fba3 2301 	umull	r2, r3, r3, r1
 8005d9a:	095b      	lsrs	r3, r3, #5
 8005d9c:	2264      	movs	r2, #100	@ 0x64
 8005d9e:	fb02 f303 	mul.w	r3, r2, r3
 8005da2:	1acb      	subs	r3, r1, r3
 8005da4:	011b      	lsls	r3, r3, #4
 8005da6:	3332      	adds	r3, #50	@ 0x32
 8005da8:	4a36      	ldr	r2, [pc, #216]	@ (8005e84 <LL_USART_SetBaudRate+0x458>)
 8005daa:	fba2 2303 	umull	r2, r3, r2, r3
 8005dae:	095b      	lsrs	r3, r3, #5
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	4423      	add	r3, r4
 8005dba:	b29c      	uxth	r4, r3
 8005dbc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005dc4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005dc6:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005dca:	4642      	mov	r2, r8
 8005dcc:	464b      	mov	r3, r9
 8005dce:	1891      	adds	r1, r2, r2
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	415b      	adcs	r3, r3
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dda:	4641      	mov	r1, r8
 8005ddc:	1851      	adds	r1, r2, r1
 8005dde:	6039      	str	r1, [r7, #0]
 8005de0:	4649      	mov	r1, r9
 8005de2:	414b      	adcs	r3, r1
 8005de4:	607b      	str	r3, [r7, #4]
 8005de6:	f04f 0200 	mov.w	r2, #0
 8005dea:	f04f 0300 	mov.w	r3, #0
 8005dee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005df2:	4659      	mov	r1, fp
 8005df4:	00cb      	lsls	r3, r1, #3
 8005df6:	4651      	mov	r1, sl
 8005df8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dfc:	4651      	mov	r1, sl
 8005dfe:	00ca      	lsls	r2, r1, #3
 8005e00:	4610      	mov	r0, r2
 8005e02:	4619      	mov	r1, r3
 8005e04:	4603      	mov	r3, r0
 8005e06:	4642      	mov	r2, r8
 8005e08:	189b      	adds	r3, r3, r2
 8005e0a:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e0c:	464b      	mov	r3, r9
 8005e0e:	460a      	mov	r2, r1
 8005e10:	eb42 0303 	adc.w	r3, r2, r3
 8005e14:	677b      	str	r3, [r7, #116]	@ 0x74
 8005e16:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005e20:	f04f 0200 	mov.w	r2, #0
 8005e24:	f04f 0300 	mov.w	r3, #0
 8005e28:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8005e2c:	4649      	mov	r1, r9
 8005e2e:	008b      	lsls	r3, r1, #2
 8005e30:	4641      	mov	r1, r8
 8005e32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e36:	4641      	mov	r1, r8
 8005e38:	008a      	lsls	r2, r1, #2
 8005e3a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8005e3e:	f7fa fcf1 	bl	8000824 <__aeabi_uldivmod>
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	4b0f      	ldr	r3, [pc, #60]	@ (8005e84 <LL_USART_SetBaudRate+0x458>)
 8005e48:	fba3 1302 	umull	r1, r3, r3, r2
 8005e4c:	095b      	lsrs	r3, r3, #5
 8005e4e:	2164      	movs	r1, #100	@ 0x64
 8005e50:	fb01 f303 	mul.w	r3, r1, r3
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	011b      	lsls	r3, r3, #4
 8005e58:	3332      	adds	r3, #50	@ 0x32
 8005e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8005e84 <LL_USART_SetBaudRate+0x458>)
 8005e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e60:	095b      	lsrs	r3, r3, #5
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	f003 030f 	and.w	r3, r3, #15
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	4423      	add	r3, r4
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	461a      	mov	r2, r3
 8005e70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e74:	609a      	str	r2, [r3, #8]
}
 8005e76:	bf00      	nop
 8005e78:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e82:	bf00      	nop
 8005e84:	51eb851f 	.word	0x51eb851f

08005e88 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b088      	sub	sp, #32
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8005e96:	2300      	movs	r3, #0
 8005e98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7ff fd8c 	bl	80059b8 <LL_USART_IsEnabled>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d15e      	bne.n	8005f64 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8005eae:	f023 030c 	bic.w	r3, r3, #12
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	6851      	ldr	r1, [r2, #4]
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	68d2      	ldr	r2, [r2, #12]
 8005eba:	4311      	orrs	r1, r2
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	6912      	ldr	r2, [r2, #16]
 8005ec0:	4311      	orrs	r1, r2
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	6992      	ldr	r2, [r2, #24]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f7ff fd83 	bl	80059e0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	4619      	mov	r1, r3
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f7ff fd90 	bl	8005a06 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005ee6:	f107 0308 	add.w	r3, r7, #8
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7ff fc6e 	bl	80057cc <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a1f      	ldr	r2, [pc, #124]	@ (8005f70 <LL_USART_Init+0xe8>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d102      	bne.n	8005efe <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	61bb      	str	r3, [r7, #24]
 8005efc:	e021      	b.n	8005f42 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a1c      	ldr	r2, [pc, #112]	@ (8005f74 <LL_USART_Init+0xec>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d102      	bne.n	8005f0c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	61bb      	str	r3, [r7, #24]
 8005f0a:	e01a      	b.n	8005f42 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a1a      	ldr	r2, [pc, #104]	@ (8005f78 <LL_USART_Init+0xf0>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d102      	bne.n	8005f1a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	61bb      	str	r3, [r7, #24]
 8005f18:	e013      	b.n	8005f42 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a17      	ldr	r2, [pc, #92]	@ (8005f7c <LL_USART_Init+0xf4>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d102      	bne.n	8005f28 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	61bb      	str	r3, [r7, #24]
 8005f26:	e00c      	b.n	8005f42 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a15      	ldr	r2, [pc, #84]	@ (8005f80 <LL_USART_Init+0xf8>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d102      	bne.n	8005f36 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	61bb      	str	r3, [r7, #24]
 8005f34:	e005      	b.n	8005f42 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a12      	ldr	r2, [pc, #72]	@ (8005f84 <LL_USART_Init+0xfc>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d101      	bne.n	8005f42 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00d      	beq.n	8005f64 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d009      	beq.n	8005f64 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8005f50:	2300      	movs	r3, #0
 8005f52:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8005f5c:	69b9      	ldr	r1, [r7, #24]
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7ff fd64 	bl	8005a2c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005f64:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3720      	adds	r7, #32
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	40011000 	.word	0x40011000
 8005f74:	40004400 	.word	0x40004400
 8005f78:	40004800 	.word	0x40004800
 8005f7c:	40011400 	.word	0x40011400
 8005f80:	40004c00 	.word	0x40004c00
 8005f84:	40005000 	.word	0x40005000

08005f88 <memset>:
 8005f88:	4402      	add	r2, r0
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d100      	bne.n	8005f92 <memset+0xa>
 8005f90:	4770      	bx	lr
 8005f92:	f803 1b01 	strb.w	r1, [r3], #1
 8005f96:	e7f9      	b.n	8005f8c <memset+0x4>

08005f98 <__libc_init_array>:
 8005f98:	b570      	push	{r4, r5, r6, lr}
 8005f9a:	4d0d      	ldr	r5, [pc, #52]	@ (8005fd0 <__libc_init_array+0x38>)
 8005f9c:	4c0d      	ldr	r4, [pc, #52]	@ (8005fd4 <__libc_init_array+0x3c>)
 8005f9e:	1b64      	subs	r4, r4, r5
 8005fa0:	10a4      	asrs	r4, r4, #2
 8005fa2:	2600      	movs	r6, #0
 8005fa4:	42a6      	cmp	r6, r4
 8005fa6:	d109      	bne.n	8005fbc <__libc_init_array+0x24>
 8005fa8:	4d0b      	ldr	r5, [pc, #44]	@ (8005fd8 <__libc_init_array+0x40>)
 8005faa:	4c0c      	ldr	r4, [pc, #48]	@ (8005fdc <__libc_init_array+0x44>)
 8005fac:	f000 f826 	bl	8005ffc <_init>
 8005fb0:	1b64      	subs	r4, r4, r5
 8005fb2:	10a4      	asrs	r4, r4, #2
 8005fb4:	2600      	movs	r6, #0
 8005fb6:	42a6      	cmp	r6, r4
 8005fb8:	d105      	bne.n	8005fc6 <__libc_init_array+0x2e>
 8005fba:	bd70      	pop	{r4, r5, r6, pc}
 8005fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fc0:	4798      	blx	r3
 8005fc2:	3601      	adds	r6, #1
 8005fc4:	e7ee      	b.n	8005fa4 <__libc_init_array+0xc>
 8005fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fca:	4798      	blx	r3
 8005fcc:	3601      	adds	r6, #1
 8005fce:	e7f2      	b.n	8005fb6 <__libc_init_array+0x1e>
 8005fd0:	08006254 	.word	0x08006254
 8005fd4:	08006254 	.word	0x08006254
 8005fd8:	08006254 	.word	0x08006254
 8005fdc:	08006258 	.word	0x08006258

08005fe0 <memcpy>:
 8005fe0:	440a      	add	r2, r1
 8005fe2:	4291      	cmp	r1, r2
 8005fe4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fe8:	d100      	bne.n	8005fec <memcpy+0xc>
 8005fea:	4770      	bx	lr
 8005fec:	b510      	push	{r4, lr}
 8005fee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ff2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ff6:	4291      	cmp	r1, r2
 8005ff8:	d1f9      	bne.n	8005fee <memcpy+0xe>
 8005ffa:	bd10      	pop	{r4, pc}

08005ffc <_init>:
 8005ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffe:	bf00      	nop
 8006000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006002:	bc08      	pop	{r3}
 8006004:	469e      	mov	lr, r3
 8006006:	4770      	bx	lr

08006008 <_fini>:
 8006008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600a:	bf00      	nop
 800600c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800600e:	bc08      	pop	{r3}
 8006010:	469e      	mov	lr, r3
 8006012:	4770      	bx	lr
