
demo_jetsonnano.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057c8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  0800598c  0800598c  0000698c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bc4  08005bc4  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005bc4  08005bc4  00006bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bcc  08005bcc  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bcc  08005bcc  00006bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005bd0  08005bd0  00006bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005bd4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  2000000c  08005be0  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08005be0  00007294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116c1  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003193  00000000  00000000  000186fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  0001b890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d68  00000000  00000000  0001ca28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026332  00000000  00000000  0001d790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001546e  00000000  00000000  00043ac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e90f0  00000000  00000000  00058f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00142020  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048dc  00000000  00000000  00142064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00146940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005974 	.word	0x08005974

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08005974 	.word	0x08005974

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004fa:	463b      	mov	r3, r7
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000506:	4b30      	ldr	r3, [pc, #192]	@ (80005c8 <MX_ADC1_Init+0xd4>)
 8000508:	4a30      	ldr	r2, [pc, #192]	@ (80005cc <MX_ADC1_Init+0xd8>)
 800050a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800050c:	4b2e      	ldr	r3, [pc, #184]	@ (80005c8 <MX_ADC1_Init+0xd4>)
 800050e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000512:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000514:	4b2c      	ldr	r3, [pc, #176]	@ (80005c8 <MX_ADC1_Init+0xd4>)
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800051a:	4b2b      	ldr	r3, [pc, #172]	@ (80005c8 <MX_ADC1_Init+0xd4>)
 800051c:	2201      	movs	r2, #1
 800051e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000520:	4b29      	ldr	r3, [pc, #164]	@ (80005c8 <MX_ADC1_Init+0xd4>)
 8000522:	2200      	movs	r2, #0
 8000524:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000526:	4b28      	ldr	r3, [pc, #160]	@ (80005c8 <MX_ADC1_Init+0xd4>)
 8000528:	2200      	movs	r2, #0
 800052a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800052e:	4b26      	ldr	r3, [pc, #152]	@ (80005c8 <MX_ADC1_Init+0xd4>)
 8000530:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000534:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000536:	4b24      	ldr	r3, [pc, #144]	@ (80005c8 <MX_ADC1_Init+0xd4>)
 8000538:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 800053c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800053e:	4b22      	ldr	r3, [pc, #136]	@ (80005c8 <MX_ADC1_Init+0xd4>)
 8000540:	2200      	movs	r2, #0
 8000542:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000544:	4b20      	ldr	r3, [pc, #128]	@ (80005c8 <MX_ADC1_Init+0xd4>)
 8000546:	2203      	movs	r2, #3
 8000548:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800054a:	4b1f      	ldr	r3, [pc, #124]	@ (80005c8 <MX_ADC1_Init+0xd4>)
 800054c:	2201      	movs	r2, #1
 800054e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000552:	4b1d      	ldr	r3, [pc, #116]	@ (80005c8 <MX_ADC1_Init+0xd4>)
 8000554:	2201      	movs	r2, #1
 8000556:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000558:	481b      	ldr	r0, [pc, #108]	@ (80005c8 <MX_ADC1_Init+0xd4>)
 800055a:	f001 fdbb 	bl	80020d4 <HAL_ADC_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000564:	f000 ff2e 	bl	80013c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000568:	2300      	movs	r3, #0
 800056a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800056c:	2301      	movs	r3, #1
 800056e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000570:	2301      	movs	r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000574:	463b      	mov	r3, r7
 8000576:	4619      	mov	r1, r3
 8000578:	4813      	ldr	r0, [pc, #76]	@ (80005c8 <MX_ADC1_Init+0xd4>)
 800057a:	f002 f82d 	bl	80025d8 <HAL_ADC_ConfigChannel>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000584:	f000 ff1e 	bl	80013c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000588:	2301      	movs	r3, #1
 800058a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800058c:	2302      	movs	r3, #2
 800058e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000590:	463b      	mov	r3, r7
 8000592:	4619      	mov	r1, r3
 8000594:	480c      	ldr	r0, [pc, #48]	@ (80005c8 <MX_ADC1_Init+0xd4>)
 8000596:	f002 f81f 	bl	80025d8 <HAL_ADC_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80005a0:	f000 ff10 	bl	80013c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80005a8:	2303      	movs	r3, #3
 80005aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	4619      	mov	r1, r3
 80005b0:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <MX_ADC1_Init+0xd4>)
 80005b2:	f002 f811 	bl	80025d8 <HAL_ADC_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80005bc:	f000 ff02 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000028 	.word	0x20000028
 80005cc:	40012000 	.word	0x40012000

080005d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	@ 0x28
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	f107 0314 	add.w	r3, r7, #20
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a33      	ldr	r2, [pc, #204]	@ (80006bc <HAL_ADC_MspInit+0xec>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d15f      	bne.n	80006b2 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
 80005f6:	4b32      	ldr	r3, [pc, #200]	@ (80006c0 <HAL_ADC_MspInit+0xf0>)
 80005f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005fa:	4a31      	ldr	r2, [pc, #196]	@ (80006c0 <HAL_ADC_MspInit+0xf0>)
 80005fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000600:	6453      	str	r3, [r2, #68]	@ 0x44
 8000602:	4b2f      	ldr	r3, [pc, #188]	@ (80006c0 <HAL_ADC_MspInit+0xf0>)
 8000604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	4b2b      	ldr	r3, [pc, #172]	@ (80006c0 <HAL_ADC_MspInit+0xf0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	4a2a      	ldr	r2, [pc, #168]	@ (80006c0 <HAL_ADC_MspInit+0xf0>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6313      	str	r3, [r2, #48]	@ 0x30
 800061e:	4b28      	ldr	r3, [pc, #160]	@ (80006c0 <HAL_ADC_MspInit+0xf0>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800062a:	2307      	movs	r3, #7
 800062c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800062e:	2303      	movs	r3, #3
 8000630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	4619      	mov	r1, r3
 800063c:	4821      	ldr	r0, [pc, #132]	@ (80006c4 <HAL_ADC_MspInit+0xf4>)
 800063e:	f002 ff07 	bl	8003450 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000642:	4b21      	ldr	r3, [pc, #132]	@ (80006c8 <HAL_ADC_MspInit+0xf8>)
 8000644:	4a21      	ldr	r2, [pc, #132]	@ (80006cc <HAL_ADC_MspInit+0xfc>)
 8000646:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000648:	4b1f      	ldr	r3, [pc, #124]	@ (80006c8 <HAL_ADC_MspInit+0xf8>)
 800064a:	2200      	movs	r2, #0
 800064c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800064e:	4b1e      	ldr	r3, [pc, #120]	@ (80006c8 <HAL_ADC_MspInit+0xf8>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000654:	4b1c      	ldr	r3, [pc, #112]	@ (80006c8 <HAL_ADC_MspInit+0xf8>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800065a:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <HAL_ADC_MspInit+0xf8>)
 800065c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000660:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000662:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <HAL_ADC_MspInit+0xf8>)
 8000664:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000668:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800066a:	4b17      	ldr	r3, [pc, #92]	@ (80006c8 <HAL_ADC_MspInit+0xf8>)
 800066c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000670:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000672:	4b15      	ldr	r3, [pc, #84]	@ (80006c8 <HAL_ADC_MspInit+0xf8>)
 8000674:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000678:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800067a:	4b13      	ldr	r3, [pc, #76]	@ (80006c8 <HAL_ADC_MspInit+0xf8>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000680:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <HAL_ADC_MspInit+0xf8>)
 8000682:	2200      	movs	r2, #0
 8000684:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000686:	4810      	ldr	r0, [pc, #64]	@ (80006c8 <HAL_ADC_MspInit+0xf8>)
 8000688:	f002 fb72 	bl	8002d70 <HAL_DMA_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000692:	f000 fe97 	bl	80013c4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a0b      	ldr	r2, [pc, #44]	@ (80006c8 <HAL_ADC_MspInit+0xf8>)
 800069a:	639a      	str	r2, [r3, #56]	@ 0x38
 800069c:	4a0a      	ldr	r2, [pc, #40]	@ (80006c8 <HAL_ADC_MspInit+0xf8>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2100      	movs	r1, #0
 80006a6:	2012      	movs	r0, #18
 80006a8:	f002 fb2b 	bl	8002d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80006ac:	2012      	movs	r0, #18
 80006ae:	f002 fb44 	bl	8002d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006b2:	bf00      	nop
 80006b4:	3728      	adds	r7, #40	@ 0x28
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40012000 	.word	0x40012000
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40020000 	.word	0x40020000
 80006c8:	20000070 	.word	0x20000070
 80006cc:	40026410 	.word	0x40026410

080006d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d4:	4b04      	ldr	r3, [pc, #16]	@ (80006e8 <__NVIC_GetPriorityGrouping+0x18>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	0a1b      	lsrs	r3, r3, #8
 80006da:	f003 0307 	and.w	r3, r3, #7
}
 80006de:	4618      	mov	r0, r3
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	db0b      	blt.n	8000716 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	f003 021f 	and.w	r2, r3, #31
 8000704:	4907      	ldr	r1, [pc, #28]	@ (8000724 <__NVIC_EnableIRQ+0x38>)
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	095b      	lsrs	r3, r3, #5
 800070c:	2001      	movs	r0, #1
 800070e:	fa00 f202 	lsl.w	r2, r0, r2
 8000712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000e100 	.word	0xe000e100

08000728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	6039      	str	r1, [r7, #0]
 8000732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000738:	2b00      	cmp	r3, #0
 800073a:	db0a      	blt.n	8000752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	b2da      	uxtb	r2, r3
 8000740:	490c      	ldr	r1, [pc, #48]	@ (8000774 <__NVIC_SetPriority+0x4c>)
 8000742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000746:	0112      	lsls	r2, r2, #4
 8000748:	b2d2      	uxtb	r2, r2
 800074a:	440b      	add	r3, r1
 800074c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000750:	e00a      	b.n	8000768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4908      	ldr	r1, [pc, #32]	@ (8000778 <__NVIC_SetPriority+0x50>)
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	f003 030f 	and.w	r3, r3, #15
 800075e:	3b04      	subs	r3, #4
 8000760:	0112      	lsls	r2, r2, #4
 8000762:	b2d2      	uxtb	r2, r2
 8000764:	440b      	add	r3, r1
 8000766:	761a      	strb	r2, [r3, #24]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	e000e100 	.word	0xe000e100
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800077c:	b480      	push	{r7}
 800077e:	b089      	sub	sp, #36	@ 0x24
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	f1c3 0307 	rsb	r3, r3, #7
 8000796:	2b04      	cmp	r3, #4
 8000798:	bf28      	it	cs
 800079a:	2304      	movcs	r3, #4
 800079c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	3304      	adds	r3, #4
 80007a2:	2b06      	cmp	r3, #6
 80007a4:	d902      	bls.n	80007ac <NVIC_EncodePriority+0x30>
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	3b03      	subs	r3, #3
 80007aa:	e000      	b.n	80007ae <NVIC_EncodePriority+0x32>
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b0:	f04f 32ff 	mov.w	r2, #4294967295
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ba:	43da      	mvns	r2, r3
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	401a      	ands	r2, r3
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c4:	f04f 31ff 	mov.w	r1, #4294967295
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	fa01 f303 	lsl.w	r3, r1, r3
 80007ce:	43d9      	mvns	r1, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	4313      	orrs	r3, r2
         );
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3724      	adds	r7, #36	@ 0x24
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
	...

080007e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b2b      	ldr	r3, [pc, #172]	@ (800089c <MX_DMA_Init+0xb8>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a2a      	ldr	r2, [pc, #168]	@ (800089c <MX_DMA_Init+0xb8>)
 80007f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b28      	ldr	r3, [pc, #160]	@ (800089c <MX_DMA_Init+0xb8>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b24      	ldr	r3, [pc, #144]	@ (800089c <MX_DMA_Init+0xb8>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a23      	ldr	r2, [pc, #140]	@ (800089c <MX_DMA_Init+0xb8>)
 8000810:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b21      	ldr	r3, [pc, #132]	@ (800089c <MX_DMA_Init+0xb8>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000822:	f7ff ff55 	bl	80006d0 <__NVIC_GetPriorityGrouping>
 8000826:	4603      	mov	r3, r0
 8000828:	2200      	movs	r2, #0
 800082a:	2100      	movs	r1, #0
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ffa5 	bl	800077c <NVIC_EncodePriority>
 8000832:	4603      	mov	r3, r0
 8000834:	4619      	mov	r1, r3
 8000836:	200e      	movs	r0, #14
 8000838:	f7ff ff76 	bl	8000728 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800083c:	200e      	movs	r0, #14
 800083e:	f7ff ff55 	bl	80006ec <__NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	2100      	movs	r1, #0
 8000846:	2038      	movs	r0, #56	@ 0x38
 8000848:	f002 fa5b 	bl	8002d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800084c:	2038      	movs	r0, #56	@ 0x38
 800084e:	f002 fa74 	bl	8002d3a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000852:	f7ff ff3d 	bl	80006d0 <__NVIC_GetPriorityGrouping>
 8000856:	4603      	mov	r3, r0
 8000858:	2200      	movs	r2, #0
 800085a:	2100      	movs	r1, #0
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ff8d 	bl	800077c <NVIC_EncodePriority>
 8000862:	4603      	mov	r3, r0
 8000864:	4619      	mov	r1, r3
 8000866:	203a      	movs	r0, #58	@ 0x3a
 8000868:	f7ff ff5e 	bl	8000728 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800086c:	203a      	movs	r0, #58	@ 0x3a
 800086e:	f7ff ff3d 	bl	80006ec <__NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000872:	f7ff ff2d 	bl	80006d0 <__NVIC_GetPriorityGrouping>
 8000876:	4603      	mov	r3, r0
 8000878:	2200      	movs	r2, #0
 800087a:	2100      	movs	r1, #0
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff7d 	bl	800077c <NVIC_EncodePriority>
 8000882:	4603      	mov	r3, r0
 8000884:	4619      	mov	r1, r3
 8000886:	2046      	movs	r0, #70	@ 0x46
 8000888:	f7ff ff4e 	bl	8000728 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800088c:	2046      	movs	r0, #70	@ 0x46
 800088e:	f7ff ff2d 	bl	80006ec <__NVIC_EnableIRQ>

}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800

080008a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	@ 0x28
 80008a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b2d      	ldr	r3, [pc, #180]	@ (8000970 <MX_GPIO_Init+0xd0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a2c      	ldr	r2, [pc, #176]	@ (8000970 <MX_GPIO_Init+0xd0>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000970 <MX_GPIO_Init+0xd0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b26      	ldr	r3, [pc, #152]	@ (8000970 <MX_GPIO_Init+0xd0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a25      	ldr	r2, [pc, #148]	@ (8000970 <MX_GPIO_Init+0xd0>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b23      	ldr	r3, [pc, #140]	@ (8000970 <MX_GPIO_Init+0xd0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000970 <MX_GPIO_Init+0xd0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000970 <MX_GPIO_Init+0xd0>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000970 <MX_GPIO_Init+0xd0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b18      	ldr	r3, [pc, #96]	@ (8000970 <MX_GPIO_Init+0xd0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a17      	ldr	r2, [pc, #92]	@ (8000970 <MX_GPIO_Init+0xd0>)
 8000914:	f043 0308 	orr.w	r3, r3, #8
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <MX_GPIO_Init+0xd0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f003 0308 	and.w	r3, r3, #8
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <MX_GPIO_Init+0xd0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	4a10      	ldr	r2, [pc, #64]	@ (8000970 <MX_GPIO_Init+0xd0>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	6313      	str	r3, [r2, #48]	@ 0x30
 8000936:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <MX_GPIO_Init+0xd0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2104      	movs	r1, #4
 8000946:	480b      	ldr	r0, [pc, #44]	@ (8000974 <MX_GPIO_Init+0xd4>)
 8000948:	f002 ff16 	bl	8003778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800094c:	2304      	movs	r3, #4
 800094e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4619      	mov	r1, r3
 8000962:	4804      	ldr	r0, [pc, #16]	@ (8000974 <MX_GPIO_Init+0xd4>)
 8000964:	f002 fd74 	bl	8003450 <HAL_GPIO_Init>

}
 8000968:	bf00      	nop
 800096a:	3728      	adds	r7, #40	@ 0x28
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40023800 	.word	0x40023800
 8000974:	40020c00 	.word	0x40020c00

08000978 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000988:	2b80      	cmp	r3, #128	@ 0x80
 800098a:	bf0c      	ite	eq
 800098c:	2301      	moveq	r3, #1
 800098e:	2300      	movne	r3, #0
 8000990:	b2db      	uxtb	r3, r3
}
 8000992:	4618      	mov	r0, r3
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 800099e:	b480      	push	{r7}
 80009a0:	b089      	sub	sp, #36	@ 0x24
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	330c      	adds	r3, #12
 80009aa:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	e853 3f00 	ldrex	r3, [r3]
 80009b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	f043 0310 	orr.w	r3, r3, #16
 80009ba:	61fb      	str	r3, [r7, #28]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	330c      	adds	r3, #12
 80009c0:	69fa      	ldr	r2, [r7, #28]
 80009c2:	61ba      	str	r2, [r7, #24]
 80009c4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80009c6:	6979      	ldr	r1, [r7, #20]
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	e841 2300 	strex	r3, r2, [r1]
 80009ce:	613b      	str	r3, [r7, #16]
   return(result);
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d1e7      	bne.n	80009a6 <LL_USART_EnableIT_IDLE+0x8>
}
 80009d6:	bf00      	nop
 80009d8:	bf00      	nop
 80009da:	3724      	adds	r7, #36	@ 0x24
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b089      	sub	sp, #36	@ 0x24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3314      	adds	r3, #20
 80009f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	e853 3f00 	ldrex	r3, [r3]
 80009f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a00:	61fb      	str	r3, [r7, #28]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	3314      	adds	r3, #20
 8000a06:	69fa      	ldr	r2, [r7, #28]
 8000a08:	61ba      	str	r2, [r7, #24]
 8000a0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000a0c:	6979      	ldr	r1, [r7, #20]
 8000a0e:	69ba      	ldr	r2, [r7, #24]
 8000a10:	e841 2300 	strex	r3, r2, [r1]
 8000a14:	613b      	str	r3, [r7, #16]
   return(result);
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d1e7      	bne.n	80009ec <LL_USART_EnableDMAReq_RX+0x8>
}
 8000a1c:	bf00      	nop
 8000a1e:	bf00      	nop
 8000a20:	3724      	adds	r7, #36	@ 0x24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b083      	sub	sp, #12
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
 8000a32:	460b      	mov	r3, r1
 8000a34:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000a36:	78fa      	ldrb	r2, [r7, #3]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	605a      	str	r2, [r3, #4]
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000a52:	4a0c      	ldr	r2, [pc, #48]	@ (8000a84 <LL_DMA_EnableStream+0x3c>)
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	4413      	add	r3, r2
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4413      	add	r3, r2
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4908      	ldr	r1, [pc, #32]	@ (8000a84 <LL_DMA_EnableStream+0x3c>)
 8000a64:	683a      	ldr	r2, [r7, #0]
 8000a66:	440a      	add	r2, r1
 8000a68:	7812      	ldrb	r2, [r2, #0]
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	440a      	add	r2, r1
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6013      	str	r3, [r2, #0]
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	08005b8c 	.word	0x08005b8c

08000a88 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8000a94:	4a0d      	ldr	r2, [pc, #52]	@ (8000acc <LL_DMA_SetDataLength+0x44>)
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	4413      	add	r3, r2
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	0c1b      	lsrs	r3, r3, #16
 8000aa6:	041b      	lsls	r3, r3, #16
 8000aa8:	4908      	ldr	r1, [pc, #32]	@ (8000acc <LL_DMA_SetDataLength+0x44>)
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	440a      	add	r2, r1
 8000aae:	7812      	ldrb	r2, [r2, #0]
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	440a      	add	r2, r1
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	604b      	str	r3, [r1, #4]
}
 8000abe:	bf00      	nop
 8000ac0:	3714      	adds	r7, #20
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	08005b8c 	.word	0x08005b8c

08000ad0 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8000adc:	4a07      	ldr	r2, [pc, #28]	@ (8000afc <LL_DMA_SetMemoryAddress+0x2c>)
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	4413      	add	r3, r2
 8000aea:	461a      	mov	r2, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	60d3      	str	r3, [r2, #12]
}
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	08005b8c 	.word	0x08005b8c

08000b00 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8000b0c:	4a07      	ldr	r2, [pc, #28]	@ (8000b2c <LL_DMA_SetPeriphAddress+0x2c>)
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	4413      	add	r3, r2
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	4413      	add	r3, r2
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6093      	str	r3, [r2, #8]
}
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	08005b8c 	.word	0x08005b8c

08000b30 <writePacket>:
void convertlineangVelToSpeed(uint32_t linear_vel, uint32_t angular_vel);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void writePacket(uint8_t packet[], int length) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < length; i++) {
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	e011      	b.n	8000b64 <writePacket+0x34>
        while (!LL_USART_IsActiveFlag_TXE(USART1));
 8000b40:	bf00      	nop
 8000b42:	480d      	ldr	r0, [pc, #52]	@ (8000b78 <writePacket+0x48>)
 8000b44:	f7ff ff18 	bl	8000978 <LL_USART_IsActiveFlag_TXE>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d0f9      	beq.n	8000b42 <writePacket+0x12>
        LL_USART_TransmitData8(USART1, packet[i]);
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	4413      	add	r3, r2
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	4619      	mov	r1, r3
 8000b58:	4807      	ldr	r0, [pc, #28]	@ (8000b78 <writePacket+0x48>)
 8000b5a:	f7ff ff66 	bl	8000a2a <LL_USART_TransmitData8>
    for (int i = 0; i < length; i++) {
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	3301      	adds	r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fa      	ldr	r2, [r7, #12]
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	dbe9      	blt.n	8000b40 <writePacket+0x10>
    }
}
 8000b6c:	bf00      	nop
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40011000 	.word	0x40011000

08000b7c <writePacket3>:
void writePacket3(uint8_t packet[], int length) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < length; i++) {
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	e011      	b.n	8000bb0 <writePacket3+0x34>
        while (!LL_USART_IsActiveFlag_TXE(USART3));
 8000b8c:	bf00      	nop
 8000b8e:	480d      	ldr	r0, [pc, #52]	@ (8000bc4 <writePacket3+0x48>)
 8000b90:	f7ff fef2 	bl	8000978 <LL_USART_IsActiveFlag_TXE>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d0f9      	beq.n	8000b8e <writePacket3+0x12>
        LL_USART_TransmitData8(USART3, packet[i]);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	687a      	ldr	r2, [r7, #4]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4807      	ldr	r0, [pc, #28]	@ (8000bc4 <writePacket3+0x48>)
 8000ba6:	f7ff ff40 	bl	8000a2a <LL_USART_TransmitData8>
    for (int i = 0; i < length; i++) {
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	3301      	adds	r3, #1
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fa      	ldr	r2, [r7, #12]
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	dbe9      	blt.n	8000b8c <writePacket3+0x10>
    }
}
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40004800 	.word	0x40004800

08000bc8 <sendPsd>:

void sendPsd() {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
    uint8_t packet[14]; // ?��?��(1) + ?��?��?��(12) + ?��?��(1)
    int index = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]

    packet[index++] = 0x08;
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	1c5a      	adds	r2, r3, #1
 8000bd6:	617a      	str	r2, [r7, #20]
 8000bd8:	3318      	adds	r3, #24
 8000bda:	443b      	add	r3, r7
 8000bdc:	2208      	movs	r2, #8
 8000bde:	f803 2c18 	strb.w	r2, [r3, #-24]

    for(int i=0; i<3; i++) {
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	e035      	b.n	8000c54 <sendPsd+0x8c>
		packet[index++] = (filtered_buffer[i] >> 24) & 0xFF;
 8000be8:	4a24      	ldr	r2, [pc, #144]	@ (8000c7c <sendPsd+0xb4>)
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf0:	0e19      	lsrs	r1, r3, #24
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	1c5a      	adds	r2, r3, #1
 8000bf6:	617a      	str	r2, [r7, #20]
 8000bf8:	b2ca      	uxtb	r2, r1
 8000bfa:	3318      	adds	r3, #24
 8000bfc:	443b      	add	r3, r7
 8000bfe:	f803 2c18 	strb.w	r2, [r3, #-24]
		packet[index++] = (filtered_buffer[i] >> 16) & 0xFF;
 8000c02:	4a1e      	ldr	r2, [pc, #120]	@ (8000c7c <sendPsd+0xb4>)
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c0a:	0c19      	lsrs	r1, r3, #16
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	1c5a      	adds	r2, r3, #1
 8000c10:	617a      	str	r2, [r7, #20]
 8000c12:	b2ca      	uxtb	r2, r1
 8000c14:	3318      	adds	r3, #24
 8000c16:	443b      	add	r3, r7
 8000c18:	f803 2c18 	strb.w	r2, [r3, #-24]
		packet[index++] = (filtered_buffer[i] >> 8) & 0xFF;
 8000c1c:	4a17      	ldr	r2, [pc, #92]	@ (8000c7c <sendPsd+0xb4>)
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c24:	0a19      	lsrs	r1, r3, #8
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	1c5a      	adds	r2, r3, #1
 8000c2a:	617a      	str	r2, [r7, #20]
 8000c2c:	b2ca      	uxtb	r2, r1
 8000c2e:	3318      	adds	r3, #24
 8000c30:	443b      	add	r3, r7
 8000c32:	f803 2c18 	strb.w	r2, [r3, #-24]
		packet[index++] = filtered_buffer[i] & 0xFF;
 8000c36:	4a11      	ldr	r2, [pc, #68]	@ (8000c7c <sendPsd+0xb4>)
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	1c5a      	adds	r2, r3, #1
 8000c42:	617a      	str	r2, [r7, #20]
 8000c44:	b2ca      	uxtb	r2, r1
 8000c46:	3318      	adds	r3, #24
 8000c48:	443b      	add	r3, r7
 8000c4a:	f803 2c18 	strb.w	r2, [r3, #-24]
    for(int i=0; i<3; i++) {
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	3301      	adds	r3, #1
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	ddc6      	ble.n	8000be8 <sendPsd+0x20>
    }
    packet[index++] = 0x20;
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	1c5a      	adds	r2, r3, #1
 8000c5e:	617a      	str	r2, [r7, #20]
 8000c60:	3318      	adds	r3, #24
 8000c62:	443b      	add	r3, r7
 8000c64:	2220      	movs	r2, #32
 8000c66:	f803 2c18 	strb.w	r2, [r3, #-24]

    writePacket(packet, index);
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	6979      	ldr	r1, [r7, #20]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff ff5e 	bl	8000b30 <writePacket>
}
 8000c74:	bf00      	nop
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	2000012c 	.word	0x2000012c

08000c80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c84:	f001 f9b4 	bl	8001ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c88:	f000 f86e 	bl	8000d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c8c:	f7ff fe08 	bl	80008a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c90:	f7ff fda8 	bl	80007e4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c94:	f7ff fc2e 	bl	80004f4 <MX_ADC1_Init>
  MX_TIM8_Init();
 8000c98:	f000 fd7c 	bl	8001794 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000c9c:	f001 f82a 	bl	8001cf4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000ca0:	f001 f8e8 	bl	8001e74 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim8);
 8000ca4:	4825      	ldr	r0, [pc, #148]	@ (8000d3c <main+0xbc>)
 8000ca6:	f003 fbd3 	bl	8004450 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, adc1_buffer, 3);
 8000caa:	2203      	movs	r2, #3
 8000cac:	4924      	ldr	r1, [pc, #144]	@ (8000d40 <main+0xc0>)
 8000cae:	4825      	ldr	r0, [pc, #148]	@ (8000d44 <main+0xc4>)
 8000cb0:	f001 fb64 	bl	800237c <HAL_ADC_Start_DMA>

  LL_DMA_SetMemoryAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)PCrxBuffer);
 8000cb4:	4b24      	ldr	r3, [pc, #144]	@ (8000d48 <main+0xc8>)
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	2102      	movs	r1, #2
 8000cba:	4824      	ldr	r0, [pc, #144]	@ (8000d4c <main+0xcc>)
 8000cbc:	f7ff ff08 	bl	8000ad0 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetPeriphAddress(DMA2, LL_DMA_STREAM_2, (uint32_t)&USART1->DR);
 8000cc0:	4a23      	ldr	r2, [pc, #140]	@ (8000d50 <main+0xd0>)
 8000cc2:	2102      	movs	r1, #2
 8000cc4:	4821      	ldr	r0, [pc, #132]	@ (8000d4c <main+0xcc>)
 8000cc6:	f7ff ff1b 	bl	8000b00 <LL_DMA_SetPeriphAddress>
  LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_2, RX_BUFFER_SIZE);
 8000cca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cce:	2102      	movs	r1, #2
 8000cd0:	481e      	ldr	r0, [pc, #120]	@ (8000d4c <main+0xcc>)
 8000cd2:	f7ff fed9 	bl	8000a88 <LL_DMA_SetDataLength>
  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_2);
 8000cd6:	2102      	movs	r1, #2
 8000cd8:	481c      	ldr	r0, [pc, #112]	@ (8000d4c <main+0xcc>)
 8000cda:	f7ff feb5 	bl	8000a48 <LL_DMA_EnableStream>
  LL_USART_EnableDMAReq_RX(USART1);
 8000cde:	481d      	ldr	r0, [pc, #116]	@ (8000d54 <main+0xd4>)
 8000ce0:	f7ff fe80 	bl	80009e4 <LL_USART_EnableDMAReq_RX>
  LL_USART_EnableIT_IDLE(USART1);
 8000ce4:	481b      	ldr	r0, [pc, #108]	@ (8000d54 <main+0xd4>)
 8000ce6:	f7ff fe5a 	bl	800099e <LL_USART_EnableIT_IDLE>

  operatingMode(0);
 8000cea:	2000      	movs	r0, #0
 8000cec:	f000 fa18 	bl	8001120 <operatingMode>
  enableTorque(0);
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f000 f98d 	bl	8001010 <enableTorque>
  operatingMode(1);
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	f000 fa12 	bl	8001120 <operatingMode>
  enableTorque(1);
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f000 f987 	bl	8001010 <enableTorque>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sendPsd();
 8000d02:	f7ff ff61 	bl	8000bc8 <sendPsd>
	  convertlineangVelToSpeed(linear_vel, angular_vel);
 8000d06:	4b14      	ldr	r3, [pc, #80]	@ (8000d58 <main+0xd8>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a14      	ldr	r2, [pc, #80]	@ (8000d5c <main+0xdc>)
 8000d0c:	6812      	ldr	r2, [r2, #0]
 8000d0e:	4611      	mov	r1, r2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 fb35 	bl	8001380 <convertlineangVelToSpeed>
	  sendGoalVelocity(0, (velocity_0 * 2));
 8000d16:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <main+0xe0>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f000 fa86 	bl	8001230 <sendGoalVelocity>
	  sendGoalVelocity(1, -(velocity_1 * 2));
 8000d24:	4b0f      	ldr	r3, [pc, #60]	@ (8000d64 <main+0xe4>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	07db      	lsls	r3, r3, #31
 8000d2c:	1a9b      	subs	r3, r3, r2
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	4619      	mov	r1, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	f000 fa7c 	bl	8001230 <sendGoalVelocity>
	  sendPsd();
 8000d38:	bf00      	nop
 8000d3a:	e7e2      	b.n	8000d02 <main+0x82>
 8000d3c:	20000248 	.word	0x20000248
 8000d40:	200000d0 	.word	0x200000d0
 8000d44:	20000028 	.word	0x20000028
 8000d48:	20000138 	.word	0x20000138
 8000d4c:	40026400 	.word	0x40026400
 8000d50:	40011004 	.word	0x40011004
 8000d54:	40011000 	.word	0x40011000
 8000d58:	20000240 	.word	0x20000240
 8000d5c:	20000244 	.word	0x20000244
 8000d60:	20000238 	.word	0x20000238
 8000d64:	2000023c 	.word	0x2000023c

08000d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b094      	sub	sp, #80	@ 0x50
 8000d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	2234      	movs	r2, #52	@ 0x34
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f004 fdc2 	bl	8005900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7c:	f107 0308 	add.w	r3, r7, #8
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	4b2c      	ldr	r3, [pc, #176]	@ (8000e44 <SystemClock_Config+0xdc>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d94:	4a2b      	ldr	r2, [pc, #172]	@ (8000e44 <SystemClock_Config+0xdc>)
 8000d96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9c:	4b29      	ldr	r3, [pc, #164]	@ (8000e44 <SystemClock_Config+0xdc>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da8:	2300      	movs	r3, #0
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	4b26      	ldr	r3, [pc, #152]	@ (8000e48 <SystemClock_Config+0xe0>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a25      	ldr	r2, [pc, #148]	@ (8000e48 <SystemClock_Config+0xe0>)
 8000db2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	4b23      	ldr	r3, [pc, #140]	@ (8000e48 <SystemClock_Config+0xe0>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dc0:	603b      	str	r3, [r7, #0]
 8000dc2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dc8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dcc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dd2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dd8:	2308      	movs	r3, #8
 8000dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000ddc:	23b4      	movs	r3, #180	@ 0xb4
 8000dde:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de0:	2302      	movs	r3, #2
 8000de2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000de4:	2302      	movs	r3, #2
 8000de6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dec:	f107 031c 	add.w	r3, r7, #28
 8000df0:	4618      	mov	r0, r3
 8000df2:	f003 f83f 	bl	8003e74 <HAL_RCC_OscConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000dfc:	f000 fae2 	bl	80013c4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e00:	f002 fcd4 	bl	80037ac <HAL_PWREx_EnableOverDrive>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e0a:	f000 fadb 	bl	80013c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0e:	230f      	movs	r3, #15
 8000e10:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e12:	2302      	movs	r3, #2
 8000e14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e1a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e24:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e26:	f107 0308 	add.w	r3, r7, #8
 8000e2a:	2105      	movs	r1, #5
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f002 fd0d 	bl	800384c <HAL_RCC_ClockConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000e38:	f000 fac4 	bl	80013c4 <Error_Handler>
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	3750      	adds	r7, #80	@ 0x50
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40007000 	.word	0x40007000

08000e4c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000e4c:	b490      	push	{r4, r7}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == hadc1.Instance) {
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b2f      	ldr	r3, [pc, #188]	@ (8000f18 <HAL_ADC_ConvCpltCallback+0xcc>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d156      	bne.n	8000f0e <HAL_ADC_ConvCpltCallback+0xc2>
		for(int i = 0; i < 3; i++) {
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	e012      	b.n	8000e8c <HAL_ADC_ConvCpltCallback+0x40>
			adc1_buffer_for6[i][adc_filter_index] = adc1_buffer[i];
 8000e66:	4b2d      	ldr	r3, [pc, #180]	@ (8000f1c <HAL_ADC_ConvCpltCallback+0xd0>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	461c      	mov	r4, r3
 8000e6c:	4a2c      	ldr	r2, [pc, #176]	@ (8000f20 <HAL_ADC_ConvCpltCallback+0xd4>)
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000e74:	482b      	ldr	r0, [pc, #172]	@ (8000f24 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000e76:	697a      	ldr	r2, [r7, #20]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	4413      	add	r3, r2
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	4423      	add	r3, r4
 8000e82:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		for(int i = 0; i < 3; i++) {
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	dde9      	ble.n	8000e66 <HAL_ADC_ConvCpltCallback+0x1a>
		}
		adc_filter_index = (adc_filter_index + 1) % 6;
 8000e92:	4b22      	ldr	r3, [pc, #136]	@ (8000f1c <HAL_ADC_ConvCpltCallback+0xd0>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	1c5a      	adds	r2, r3, #1
 8000e98:	4b23      	ldr	r3, [pc, #140]	@ (8000f28 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000e9a:	fb83 3102 	smull	r3, r1, r3, r2
 8000e9e:	17d3      	asrs	r3, r2, #31
 8000ea0:	1ac9      	subs	r1, r1, r3
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	440b      	add	r3, r1
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	1ad1      	subs	r1, r2, r3
 8000eac:	b2ca      	uxtb	r2, r1
 8000eae:	4b1b      	ldr	r3, [pc, #108]	@ (8000f1c <HAL_ADC_ConvCpltCallback+0xd0>)
 8000eb0:	701a      	strb	r2, [r3, #0]

		for(int i=0; i<3; i++) {
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	e027      	b.n	8000f08 <HAL_ADC_ConvCpltCallback+0xbc>
			adc_filter_sum = 0;
 8000eb8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f2c <HAL_ADC_ConvCpltCallback+0xe0>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
			for(int j=0; j<6; j++) {
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	e011      	b.n	8000ee8 <HAL_ADC_ConvCpltCallback+0x9c>
				adc_filter_sum += adc1_buffer_for6[i][j];
 8000ec4:	4917      	ldr	r1, [pc, #92]	@ (8000f24 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	4413      	add	r3, r2
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	68fa      	ldr	r2, [r7, #12]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000ed8:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <HAL_ADC_ConvCpltCallback+0xe0>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4413      	add	r3, r2
 8000ede:	4a13      	ldr	r2, [pc, #76]	@ (8000f2c <HAL_ADC_ConvCpltCallback+0xe0>)
 8000ee0:	6013      	str	r3, [r2, #0]
			for(int j=0; j<6; j++) {
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2b05      	cmp	r3, #5
 8000eec:	ddea      	ble.n	8000ec4 <HAL_ADC_ConvCpltCallback+0x78>
			}
			filtered_buffer[i] = adc_filter_sum / 6;
 8000eee:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <HAL_ADC_ConvCpltCallback+0xe0>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f30 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef8:	089a      	lsrs	r2, r3, #2
 8000efa:	490e      	ldr	r1, [pc, #56]	@ (8000f34 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i=0; i<3; i++) {
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	3301      	adds	r3, #1
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	ddd4      	ble.n	8000eb8 <HAL_ADC_ConvCpltCallback+0x6c>
		}
	}
}
 8000f0e:	bf00      	nop
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc90      	pop	{r4, r7}
 8000f16:	4770      	bx	lr
 8000f18:	20000028 	.word	0x20000028
 8000f1c:	20000124 	.word	0x20000124
 8000f20:	200000d0 	.word	0x200000d0
 8000f24:	200000dc 	.word	0x200000dc
 8000f28:	2aaaaaab 	.word	0x2aaaaaab
 8000f2c:	20000128 	.word	0x20000128
 8000f30:	aaaaaaab 	.word	0xaaaaaaab
 8000f34:	2000012c 	.word	0x2000012c

08000f38 <update_crc>:
unsigned short update_crc(unsigned short crc_accum, unsigned char *data_blk_ptr, unsigned short data_blk_size)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f44:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8000f48:	6019      	str	r1, [r3, #0]
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f50:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 8000f54:	4602      	mov	r2, r0
 8000f56:	801a      	strh	r2, [r3, #0]
 8000f58:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f5c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f60:	460a      	mov	r2, r1
 8000f62:	801a      	strh	r2, [r3, #0]
  unsigned short i, j;
  unsigned short crc_table[256] = {
 8000f64:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f68:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f6c:	4a27      	ldr	r2, [pc, #156]	@ (800100c <update_crc+0xd4>)
 8000f6e:	4618      	mov	r0, r3
 8000f70:	4611      	mov	r1, r2
 8000f72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f76:	461a      	mov	r2, r3
 8000f78:	f004 fcee 	bl	8005958 <memcpy>
      0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
      0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
      0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
  };

  for(j = 0; j < data_blk_size; j++)
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e
 8000f82:	e030      	b.n	8000fe6 <update_crc+0xae>
  {
      i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8000f84:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f88:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 8000f8c:	881b      	ldrh	r3, [r3, #0]
 8000f8e:	0a1b      	lsrs	r3, r3, #8
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	f8b7 220e 	ldrh.w	r2, [r7, #526]	@ 0x20e
 8000f96:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8000f9a:	f5a1 7104 	sub.w	r1, r1, #528	@ 0x210
 8000f9e:	6809      	ldr	r1, [r1, #0]
 8000fa0:	440a      	add	r2, r1
 8000fa2:	7812      	ldrb	r2, [r2, #0]
 8000fa4:	4053      	eors	r3, r2
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	f8a7 320c 	strh.w	r3, [r7, #524]	@ 0x20c
      crc_accum = (crc_accum << 8) ^ crc_table[i];
 8000fae:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000fb2:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	b21a      	sxth	r2, r3
 8000fbc:	f8b7 120c 	ldrh.w	r1, [r7, #524]	@ 0x20c
 8000fc0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000fc4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000fc8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	4053      	eors	r3, r2
 8000fd0:	b21a      	sxth	r2, r3
 8000fd2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000fd6:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 8000fda:	801a      	strh	r2, [r3, #0]
  for(j = 0; j < data_blk_size; j++)
 8000fdc:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e
 8000fe6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000fea:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000fee:	f8b7 220e 	ldrh.w	r2, [r7, #526]	@ 0x20e
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d3c5      	bcc.n	8000f84 <update_crc+0x4c>
  }

  return crc_accum;
 8000ff8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000ffc:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 8001000:	881b      	ldrh	r3, [r3, #0]
}
 8001002:	4618      	mov	r0, r3
 8001004:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	0800598c 	.word	0x0800598c

08001010 <enableTorque>:
void enableTorque(uint8_t motor_id) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
  uint8_t packet[14];
  size_t index = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]

  packet[index++] = 0xFF;
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	1c5a      	adds	r2, r3, #1
 8001022:	61fa      	str	r2, [r7, #28]
 8001024:	3320      	adds	r3, #32
 8001026:	443b      	add	r3, r7
 8001028:	22ff      	movs	r2, #255	@ 0xff
 800102a:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0xFF;
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	1c5a      	adds	r2, r3, #1
 8001032:	61fa      	str	r2, [r7, #28]
 8001034:	3320      	adds	r3, #32
 8001036:	443b      	add	r3, r7
 8001038:	22ff      	movs	r2, #255	@ 0xff
 800103a:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0xFD;
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	1c5a      	adds	r2, r3, #1
 8001042:	61fa      	str	r2, [r7, #28]
 8001044:	3320      	adds	r3, #32
 8001046:	443b      	add	r3, r7
 8001048:	22fd      	movs	r2, #253	@ 0xfd
 800104a:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0x00;
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	1c5a      	adds	r2, r3, #1
 8001052:	61fa      	str	r2, [r7, #28]
 8001054:	3320      	adds	r3, #32
 8001056:	443b      	add	r3, r7
 8001058:	2200      	movs	r2, #0
 800105a:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = motor_id; // ID
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	1c5a      	adds	r2, r3, #1
 8001062:	61fa      	str	r2, [r7, #28]
 8001064:	3320      	adds	r3, #32
 8001066:	443b      	add	r3, r7
 8001068:	79fa      	ldrb	r2, [r7, #7]
 800106a:	f803 2c14 	strb.w	r2, [r3, #-20]

  packet[index++] = 0x06;
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	1c5a      	adds	r2, r3, #1
 8001072:	61fa      	str	r2, [r7, #28]
 8001074:	3320      	adds	r3, #32
 8001076:	443b      	add	r3, r7
 8001078:	2206      	movs	r2, #6
 800107a:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0x00;
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	1c5a      	adds	r2, r3, #1
 8001082:	61fa      	str	r2, [r7, #28]
 8001084:	3320      	adds	r3, #32
 8001086:	443b      	add	r3, r7
 8001088:	2200      	movs	r2, #0
 800108a:	f803 2c14 	strb.w	r2, [r3, #-20]

  packet[index++] = 0x03; // Write
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	61fa      	str	r2, [r7, #28]
 8001094:	3320      	adds	r3, #32
 8001096:	443b      	add	r3, r7
 8001098:	2203      	movs	r2, #3
 800109a:	f803 2c14 	strb.w	r2, [r3, #-20]

  packet[index++] = 0x40;
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	1c5a      	adds	r2, r3, #1
 80010a2:	61fa      	str	r2, [r7, #28]
 80010a4:	3320      	adds	r3, #32
 80010a6:	443b      	add	r3, r7
 80010a8:	2240      	movs	r2, #64	@ 0x40
 80010aa:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0x00;
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	1c5a      	adds	r2, r3, #1
 80010b2:	61fa      	str	r2, [r7, #28]
 80010b4:	3320      	adds	r3, #32
 80010b6:	443b      	add	r3, r7
 80010b8:	2200      	movs	r2, #0
 80010ba:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0x01; // Torque ?��?��?��
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	1c5a      	adds	r2, r3, #1
 80010c2:	61fa      	str	r2, [r7, #28]
 80010c4:	3320      	adds	r3, #32
 80010c6:	443b      	add	r3, r7
 80010c8:	2201      	movs	r2, #1
 80010ca:	f803 2c14 	strb.w	r2, [r3, #-20]

  unsigned short crc = update_crc(0, packet, index);
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	4619      	mov	r1, r3
 80010d8:	2000      	movs	r0, #0
 80010da:	f7ff ff2d 	bl	8000f38 <update_crc>
 80010de:	4603      	mov	r3, r0
 80010e0:	837b      	strh	r3, [r7, #26]
  packet[index++] = crc & 0xFF;
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	1c5a      	adds	r2, r3, #1
 80010e6:	61fa      	str	r2, [r7, #28]
 80010e8:	8b7a      	ldrh	r2, [r7, #26]
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	3320      	adds	r3, #32
 80010ee:	443b      	add	r3, r7
 80010f0:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = (crc >> 8) & 0xFF;
 80010f4:	8b7b      	ldrh	r3, [r7, #26]
 80010f6:	0a1b      	lsrs	r3, r3, #8
 80010f8:	b299      	uxth	r1, r3
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	1c5a      	adds	r2, r3, #1
 80010fe:	61fa      	str	r2, [r7, #28]
 8001100:	b2ca      	uxtb	r2, r1
 8001102:	3320      	adds	r3, #32
 8001104:	443b      	add	r3, r7
 8001106:	f803 2c14 	strb.w	r2, [r3, #-20]

  writePacket3(packet, index);
 800110a:	69fa      	ldr	r2, [r7, #28]
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	4611      	mov	r1, r2
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fd32 	bl	8000b7c <writePacket3>
}
 8001118:	bf00      	nop
 800111a:	3720      	adds	r7, #32
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <operatingMode>:

void operatingMode(uint8_t motor_id) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
  uint8_t packet[14];
  size_t index = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]

  packet[index++] = 0xFF;
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	1c5a      	adds	r2, r3, #1
 8001132:	61fa      	str	r2, [r7, #28]
 8001134:	3320      	adds	r3, #32
 8001136:	443b      	add	r3, r7
 8001138:	22ff      	movs	r2, #255	@ 0xff
 800113a:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0xFF;
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	1c5a      	adds	r2, r3, #1
 8001142:	61fa      	str	r2, [r7, #28]
 8001144:	3320      	adds	r3, #32
 8001146:	443b      	add	r3, r7
 8001148:	22ff      	movs	r2, #255	@ 0xff
 800114a:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0xFD;
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	1c5a      	adds	r2, r3, #1
 8001152:	61fa      	str	r2, [r7, #28]
 8001154:	3320      	adds	r3, #32
 8001156:	443b      	add	r3, r7
 8001158:	22fd      	movs	r2, #253	@ 0xfd
 800115a:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0x00;
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	1c5a      	adds	r2, r3, #1
 8001162:	61fa      	str	r2, [r7, #28]
 8001164:	3320      	adds	r3, #32
 8001166:	443b      	add	r3, r7
 8001168:	2200      	movs	r2, #0
 800116a:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = motor_id; // ID
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	61fa      	str	r2, [r7, #28]
 8001174:	3320      	adds	r3, #32
 8001176:	443b      	add	r3, r7
 8001178:	79fa      	ldrb	r2, [r7, #7]
 800117a:	f803 2c14 	strb.w	r2, [r3, #-20]

  packet[index++] = 0x06;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	1c5a      	adds	r2, r3, #1
 8001182:	61fa      	str	r2, [r7, #28]
 8001184:	3320      	adds	r3, #32
 8001186:	443b      	add	r3, r7
 8001188:	2206      	movs	r2, #6
 800118a:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0x00;
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	1c5a      	adds	r2, r3, #1
 8001192:	61fa      	str	r2, [r7, #28]
 8001194:	3320      	adds	r3, #32
 8001196:	443b      	add	r3, r7
 8001198:	2200      	movs	r2, #0
 800119a:	f803 2c14 	strb.w	r2, [r3, #-20]

  packet[index++] = 0x03; // Write
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	1c5a      	adds	r2, r3, #1
 80011a2:	61fa      	str	r2, [r7, #28]
 80011a4:	3320      	adds	r3, #32
 80011a6:	443b      	add	r3, r7
 80011a8:	2203      	movs	r2, #3
 80011aa:	f803 2c14 	strb.w	r2, [r3, #-20]

  packet[index++] = 0x0B;
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	1c5a      	adds	r2, r3, #1
 80011b2:	61fa      	str	r2, [r7, #28]
 80011b4:	3320      	adds	r3, #32
 80011b6:	443b      	add	r3, r7
 80011b8:	220b      	movs	r2, #11
 80011ba:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0x00;
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	61fa      	str	r2, [r7, #28]
 80011c4:	3320      	adds	r3, #32
 80011c6:	443b      	add	r3, r7
 80011c8:	2200      	movs	r2, #0
 80011ca:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = 0x01;
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	1c5a      	adds	r2, r3, #1
 80011d2:	61fa      	str	r2, [r7, #28]
 80011d4:	3320      	adds	r3, #32
 80011d6:	443b      	add	r3, r7
 80011d8:	2201      	movs	r2, #1
 80011da:	f803 2c14 	strb.w	r2, [r3, #-20]

  unsigned short crc = update_crc(0, packet, index);
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	4619      	mov	r1, r3
 80011e8:	2000      	movs	r0, #0
 80011ea:	f7ff fea5 	bl	8000f38 <update_crc>
 80011ee:	4603      	mov	r3, r0
 80011f0:	837b      	strh	r3, [r7, #26]
  packet[index++] = crc & 0xFF;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	61fa      	str	r2, [r7, #28]
 80011f8:	8b7a      	ldrh	r2, [r7, #26]
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	3320      	adds	r3, #32
 80011fe:	443b      	add	r3, r7
 8001200:	f803 2c14 	strb.w	r2, [r3, #-20]
  packet[index++] = (crc >> 8) & 0xFF;
 8001204:	8b7b      	ldrh	r3, [r7, #26]
 8001206:	0a1b      	lsrs	r3, r3, #8
 8001208:	b299      	uxth	r1, r3
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	1c5a      	adds	r2, r3, #1
 800120e:	61fa      	str	r2, [r7, #28]
 8001210:	b2ca      	uxtb	r2, r1
 8001212:	3320      	adds	r3, #32
 8001214:	443b      	add	r3, r7
 8001216:	f803 2c14 	strb.w	r2, [r3, #-20]

  writePacket3(packet, index);
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fcaa 	bl	8000b7c <writePacket3>
}
 8001228:	bf00      	nop
 800122a:	3720      	adds	r7, #32
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <sendGoalVelocity>:

void sendGoalVelocity(uint8_t motor_id, uint32_t velocity) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
  uint8_t packet[16];
  size_t index = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]

  packet[index++] = 0xFF;
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	1c5a      	adds	r2, r3, #1
 8001244:	61fa      	str	r2, [r7, #28]
 8001246:	3320      	adds	r3, #32
 8001248:	443b      	add	r3, r7
 800124a:	22ff      	movs	r2, #255	@ 0xff
 800124c:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = 0xFF;
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	1c5a      	adds	r2, r3, #1
 8001254:	61fa      	str	r2, [r7, #28]
 8001256:	3320      	adds	r3, #32
 8001258:	443b      	add	r3, r7
 800125a:	22ff      	movs	r2, #255	@ 0xff
 800125c:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = 0xFD;
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	61fa      	str	r2, [r7, #28]
 8001266:	3320      	adds	r3, #32
 8001268:	443b      	add	r3, r7
 800126a:	22fd      	movs	r2, #253	@ 0xfd
 800126c:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = 0x00;
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	1c5a      	adds	r2, r3, #1
 8001274:	61fa      	str	r2, [r7, #28]
 8001276:	3320      	adds	r3, #32
 8001278:	443b      	add	r3, r7
 800127a:	2200      	movs	r2, #0
 800127c:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = motor_id; // ID
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	61fa      	str	r2, [r7, #28]
 8001286:	3320      	adds	r3, #32
 8001288:	443b      	add	r3, r7
 800128a:	79fa      	ldrb	r2, [r7, #7]
 800128c:	f803 2c18 	strb.w	r2, [r3, #-24]

  packet[index++] = 0x09;
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	1c5a      	adds	r2, r3, #1
 8001294:	61fa      	str	r2, [r7, #28]
 8001296:	3320      	adds	r3, #32
 8001298:	443b      	add	r3, r7
 800129a:	2209      	movs	r2, #9
 800129c:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = 0x00;
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	61fa      	str	r2, [r7, #28]
 80012a6:	3320      	adds	r3, #32
 80012a8:	443b      	add	r3, r7
 80012aa:	2200      	movs	r2, #0
 80012ac:	f803 2c18 	strb.w	r2, [r3, #-24]

  packet[index++] = 0x03; // Write
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	61fa      	str	r2, [r7, #28]
 80012b6:	3320      	adds	r3, #32
 80012b8:	443b      	add	r3, r7
 80012ba:	2203      	movs	r2, #3
 80012bc:	f803 2c18 	strb.w	r2, [r3, #-24]

  packet[index++] = 0x68;
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	61fa      	str	r2, [r7, #28]
 80012c6:	3320      	adds	r3, #32
 80012c8:	443b      	add	r3, r7
 80012ca:	2268      	movs	r2, #104	@ 0x68
 80012cc:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = 0x00;
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	1c5a      	adds	r2, r3, #1
 80012d4:	61fa      	str	r2, [r7, #28]
 80012d6:	3320      	adds	r3, #32
 80012d8:	443b      	add	r3, r7
 80012da:	2200      	movs	r2, #0
 80012dc:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = (velocity & 0xFF);
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	1c5a      	adds	r2, r3, #1
 80012e4:	61fa      	str	r2, [r7, #28]
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	3320      	adds	r3, #32
 80012ec:	443b      	add	r3, r7
 80012ee:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = (velocity >> 8) & 0xFF;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	0a19      	lsrs	r1, r3, #8
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	1c5a      	adds	r2, r3, #1
 80012fa:	61fa      	str	r2, [r7, #28]
 80012fc:	b2ca      	uxtb	r2, r1
 80012fe:	3320      	adds	r3, #32
 8001300:	443b      	add	r3, r7
 8001302:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = (velocity >> 16) & 0xFF;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	0c19      	lsrs	r1, r3, #16
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	1c5a      	adds	r2, r3, #1
 800130e:	61fa      	str	r2, [r7, #28]
 8001310:	b2ca      	uxtb	r2, r1
 8001312:	3320      	adds	r3, #32
 8001314:	443b      	add	r3, r7
 8001316:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = (velocity >> 24) & 0xFF;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	0e19      	lsrs	r1, r3, #24
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	1c5a      	adds	r2, r3, #1
 8001322:	61fa      	str	r2, [r7, #28]
 8001324:	b2ca      	uxtb	r2, r1
 8001326:	3320      	adds	r3, #32
 8001328:	443b      	add	r3, r7
 800132a:	f803 2c18 	strb.w	r2, [r3, #-24]

  unsigned short crc = update_crc(0, packet, index);
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	b29a      	uxth	r2, r3
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	4619      	mov	r1, r3
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff fdfd 	bl	8000f38 <update_crc>
 800133e:	4603      	mov	r3, r0
 8001340:	837b      	strh	r3, [r7, #26]
  packet[index++] = crc & 0xFF;
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	1c5a      	adds	r2, r3, #1
 8001346:	61fa      	str	r2, [r7, #28]
 8001348:	8b7a      	ldrh	r2, [r7, #26]
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	3320      	adds	r3, #32
 800134e:	443b      	add	r3, r7
 8001350:	f803 2c18 	strb.w	r2, [r3, #-24]
  packet[index++] = (crc >> 8) & 0xFF;
 8001354:	8b7b      	ldrh	r3, [r7, #26]
 8001356:	0a1b      	lsrs	r3, r3, #8
 8001358:	b299      	uxth	r1, r3
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	1c5a      	adds	r2, r3, #1
 800135e:	61fa      	str	r2, [r7, #28]
 8001360:	b2ca      	uxtb	r2, r1
 8001362:	3320      	adds	r3, #32
 8001364:	443b      	add	r3, r7
 8001366:	f803 2c18 	strb.w	r2, [r3, #-24]

  writePacket3(packet, index);
 800136a:	69fa      	ldr	r2, [r7, #28]
 800136c:	f107 0308 	add.w	r3, r7, #8
 8001370:	4611      	mov	r1, r2
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fc02 	bl	8000b7c <writePacket3>
}
 8001378:	bf00      	nop
 800137a:	3720      	adds	r7, #32
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <convertlineangVelToSpeed>:
void convertlineangVelToSpeed(uint32_t linear_vel, uint32_t angular_vel) {
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
	velocity_0 = linear_vel + (angular_vel * 9);
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	4613      	mov	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	441a      	add	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	461a      	mov	r2, r3
 8001398:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <convertlineangVelToSpeed+0x3c>)
 800139a:	601a      	str	r2, [r3, #0]
	velocity_1 = linear_vel - (angular_vel * 9);
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	4613      	mov	r3, r2
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	4413      	add	r3, r2
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b05      	ldr	r3, [pc, #20]	@ (80013c0 <convertlineangVelToSpeed+0x40>)
 80013ac:	601a      	str	r2, [r3, #0]
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20000238 	.word	0x20000238
 80013c0:	2000023c 	.word	0x2000023c

080013c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c8:	b672      	cpsid	i
}
 80013ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <Error_Handler+0x8>

080013d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	4b10      	ldr	r3, [pc, #64]	@ (800141c <HAL_MspInit+0x4c>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013de:	4a0f      	ldr	r2, [pc, #60]	@ (800141c <HAL_MspInit+0x4c>)
 80013e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013e6:	4b0d      	ldr	r3, [pc, #52]	@ (800141c <HAL_MspInit+0x4c>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	4b09      	ldr	r3, [pc, #36]	@ (800141c <HAL_MspInit+0x4c>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fa:	4a08      	ldr	r2, [pc, #32]	@ (800141c <HAL_MspInit+0x4c>)
 80013fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001400:	6413      	str	r3, [r2, #64]	@ 0x40
 8001402:	4b06      	ldr	r3, [pc, #24]	@ (800141c <HAL_MspInit+0x4c>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800

08001420 <LL_USART_IsActiveFlag_ORE>:
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	2b08      	cmp	r3, #8
 8001432:	bf0c      	ite	eq
 8001434:	2301      	moveq	r3, #1
 8001436:	2300      	movne	r3, #0
 8001438:	b2db      	uxtb	r3, r3
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <LL_USART_IsActiveFlag_IDLE>:
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0310 	and.w	r3, r3, #16
 8001456:	2b10      	cmp	r3, #16
 8001458:	bf0c      	ite	eq
 800145a:	2301      	moveq	r3, #1
 800145c:	2300      	movne	r3, #0
 800145e:	b2db      	uxtb	r3, r3
}
 8001460:	4618      	mov	r0, r3
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <LL_USART_ClearFlag_ORE>:
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800147a:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001482:	68fb      	ldr	r3, [r7, #12]
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <LL_USART_ClearFlag_IDLE>:
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800149e:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80014a6:	68fb      	ldr	r3, [r7, #12]
}
 80014a8:	bf00      	nop
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	619a      	str	r2, [r3, #24]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <LL_DMA_EnableStream>:
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80014da:	4a0c      	ldr	r2, [pc, #48]	@ (800150c <LL_DMA_EnableStream+0x3c>)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4413      	add	r3, r2
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4908      	ldr	r1, [pc, #32]	@ (800150c <LL_DMA_EnableStream+0x3c>)
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	440a      	add	r2, r1
 80014f0:	7812      	ldrb	r2, [r2, #0]
 80014f2:	4611      	mov	r1, r2
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	440a      	add	r2, r1
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6013      	str	r3, [r2, #0]
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	08005b94 	.word	0x08005b94

08001510 <LL_DMA_DisableStream>:
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 800151a:	4a0c      	ldr	r2, [pc, #48]	@ (800154c <LL_DMA_DisableStream+0x3c>)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	4413      	add	r3, r2
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4413      	add	r3, r2
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4908      	ldr	r1, [pc, #32]	@ (800154c <LL_DMA_DisableStream+0x3c>)
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	440a      	add	r2, r1
 8001530:	7812      	ldrb	r2, [r2, #0]
 8001532:	4611      	mov	r1, r2
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	440a      	add	r2, r1
 8001538:	f023 0301 	bic.w	r3, r3, #1
 800153c:	6013      	str	r3, [r2, #0]
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	08005b94 	.word	0x08005b94

08001550 <LL_DMA_SetDataLength>:
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 800155c:	4a0d      	ldr	r2, [pc, #52]	@ (8001594 <LL_DMA_SetDataLength+0x44>)
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	4413      	add	r3, r2
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	4413      	add	r3, r2
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	0c1b      	lsrs	r3, r3, #16
 800156e:	041b      	lsls	r3, r3, #16
 8001570:	4908      	ldr	r1, [pc, #32]	@ (8001594 <LL_DMA_SetDataLength+0x44>)
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	440a      	add	r2, r1
 8001576:	7812      	ldrb	r2, [r2, #0]
 8001578:	4611      	mov	r1, r2
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	440a      	add	r2, r1
 800157e:	4611      	mov	r1, r2
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	4313      	orrs	r3, r2
 8001584:	604b      	str	r3, [r1, #4]
}
 8001586:	bf00      	nop
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	08005b94 	.word	0x08005b94

08001598 <LL_DMA_GetDataLength>:
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT));
 80015a2:	4a07      	ldr	r2, [pc, #28]	@ (80015c0 <LL_DMA_GetDataLength+0x28>)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4413      	add	r3, r2
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	b29b      	uxth	r3, r3
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	08005b94 	.word	0x08005b94

080015c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <NMI_Handler+0x4>

080015cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <HardFault_Handler+0x4>

080015d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <MemManage_Handler+0x4>

080015dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <BusFault_Handler+0x4>

080015e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <UsageFault_Handler+0x4>

080015ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800161a:	f000 fd3b 	bl	8002094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}

08001622 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001634:	4802      	ldr	r0, [pc, #8]	@ (8001640 <ADC_IRQHandler+0x10>)
 8001636:	f000 fd90 	bl	800215a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000028 	.word	0x20000028

08001644 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(LL_USART_IsActiveFlag_IDLE(USART1)) {
 800164a:	482e      	ldr	r0, [pc, #184]	@ (8001704 <USART1_IRQHandler+0xc0>)
 800164c:	f7ff fefb 	bl	8001446 <LL_USART_IsActiveFlag_IDLE>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d049      	beq.n	80016ea <USART1_IRQHandler+0xa6>
		int len = RX_BUFFER_SIZE - LL_DMA_GetDataLength(DMA2, LL_DMA_STREAM_2);
 8001656:	2102      	movs	r1, #2
 8001658:	482b      	ldr	r0, [pc, #172]	@ (8001708 <USART1_IRQHandler+0xc4>)
 800165a:	f7ff ff9d 	bl	8001598 <LL_DMA_GetDataLength>
 800165e:	4603      	mov	r3, r0
 8001660:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8001664:	607b      	str	r3, [r7, #4]

		LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_2);
 8001666:	2104      	movs	r1, #4
 8001668:	4828      	ldr	r0, [pc, #160]	@ (800170c <USART1_IRQHandler+0xc8>)
 800166a:	f7ff ff23 	bl	80014b4 <LL_GPIO_SetOutputPin>

		if(len >= 10) {
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b09      	cmp	r3, #9
 8001672:	dd29      	ble.n	80016c8 <USART1_IRQHandler+0x84>
			if(PCrxBuffer[0] == 0x19 && PCrxBuffer[9] == 0x03) {
 8001674:	4b26      	ldr	r3, [pc, #152]	@ (8001710 <USART1_IRQHandler+0xcc>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b19      	cmp	r3, #25
 800167a:	d125      	bne.n	80016c8 <USART1_IRQHandler+0x84>
 800167c:	4b24      	ldr	r3, [pc, #144]	@ (8001710 <USART1_IRQHandler+0xcc>)
 800167e:	7a5b      	ldrb	r3, [r3, #9]
 8001680:	2b03      	cmp	r3, #3
 8001682:	d121      	bne.n	80016c8 <USART1_IRQHandler+0x84>
				linear_vel = (PCrxBuffer[1] << 24) | (PCrxBuffer[2] << 16) | (PCrxBuffer[3] << 8) | PCrxBuffer[4];
 8001684:	4b22      	ldr	r3, [pc, #136]	@ (8001710 <USART1_IRQHandler+0xcc>)
 8001686:	785b      	ldrb	r3, [r3, #1]
 8001688:	061a      	lsls	r2, r3, #24
 800168a:	4b21      	ldr	r3, [pc, #132]	@ (8001710 <USART1_IRQHandler+0xcc>)
 800168c:	789b      	ldrb	r3, [r3, #2]
 800168e:	041b      	lsls	r3, r3, #16
 8001690:	431a      	orrs	r2, r3
 8001692:	4b1f      	ldr	r3, [pc, #124]	@ (8001710 <USART1_IRQHandler+0xcc>)
 8001694:	78db      	ldrb	r3, [r3, #3]
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	4313      	orrs	r3, r2
 800169a:	4a1d      	ldr	r2, [pc, #116]	@ (8001710 <USART1_IRQHandler+0xcc>)
 800169c:	7912      	ldrb	r2, [r2, #4]
 800169e:	4313      	orrs	r3, r2
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001714 <USART1_IRQHandler+0xd0>)
 80016a4:	601a      	str	r2, [r3, #0]
				angular_vel = (PCrxBuffer[5] << 24) | (PCrxBuffer[6] << 16) | (PCrxBuffer[7] << 8) | PCrxBuffer[8];
 80016a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001710 <USART1_IRQHandler+0xcc>)
 80016a8:	795b      	ldrb	r3, [r3, #5]
 80016aa:	061a      	lsls	r2, r3, #24
 80016ac:	4b18      	ldr	r3, [pc, #96]	@ (8001710 <USART1_IRQHandler+0xcc>)
 80016ae:	799b      	ldrb	r3, [r3, #6]
 80016b0:	041b      	lsls	r3, r3, #16
 80016b2:	431a      	orrs	r2, r3
 80016b4:	4b16      	ldr	r3, [pc, #88]	@ (8001710 <USART1_IRQHandler+0xcc>)
 80016b6:	79db      	ldrb	r3, [r3, #7]
 80016b8:	021b      	lsls	r3, r3, #8
 80016ba:	4313      	orrs	r3, r2
 80016bc:	4a14      	ldr	r2, [pc, #80]	@ (8001710 <USART1_IRQHandler+0xcc>)
 80016be:	7a12      	ldrb	r2, [r2, #8]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	461a      	mov	r2, r3
 80016c4:	4b14      	ldr	r3, [pc, #80]	@ (8001718 <USART1_IRQHandler+0xd4>)
 80016c6:	601a      	str	r2, [r3, #0]
			}
		}
		LL_USART_ClearFlag_IDLE(USART1);
 80016c8:	480e      	ldr	r0, [pc, #56]	@ (8001704 <USART1_IRQHandler+0xc0>)
 80016ca:	f7ff fee1 	bl	8001490 <LL_USART_ClearFlag_IDLE>
		LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_2);
 80016ce:	2102      	movs	r1, #2
 80016d0:	480d      	ldr	r0, [pc, #52]	@ (8001708 <USART1_IRQHandler+0xc4>)
 80016d2:	f7ff ff1d 	bl	8001510 <LL_DMA_DisableStream>
		LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_2, RX_BUFFER_SIZE);
 80016d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016da:	2102      	movs	r1, #2
 80016dc:	480a      	ldr	r0, [pc, #40]	@ (8001708 <USART1_IRQHandler+0xc4>)
 80016de:	f7ff ff37 	bl	8001550 <LL_DMA_SetDataLength>
		LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_2);
 80016e2:	2102      	movs	r1, #2
 80016e4:	4808      	ldr	r0, [pc, #32]	@ (8001708 <USART1_IRQHandler+0xc4>)
 80016e6:	f7ff fef3 	bl	80014d0 <LL_DMA_EnableStream>
	}

	if(LL_USART_IsActiveFlag_ORE(USART1))
 80016ea:	4806      	ldr	r0, [pc, #24]	@ (8001704 <USART1_IRQHandler+0xc0>)
 80016ec:	f7ff fe98 	bl	8001420 <LL_USART_IsActiveFlag_ORE>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d002      	beq.n	80016fc <USART1_IRQHandler+0xb8>
		LL_USART_ClearFlag_ORE(USART1);
 80016f6:	4803      	ldr	r0, [pc, #12]	@ (8001704 <USART1_IRQHandler+0xc0>)
 80016f8:	f7ff feb8 	bl	800146c <LL_USART_ClearFlag_ORE>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40011000 	.word	0x40011000
 8001708:	40026400 	.word	0x40026400
 800170c:	40020c00 	.word	0x40020c00
 8001710:	20000138 	.word	0x20000138
 8001714:	20000240 	.word	0x20000240
 8001718:	20000244 	.word	0x20000244

0800171c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001730:	4802      	ldr	r0, [pc, #8]	@ (800173c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001732:	f002 fefd 	bl	8004530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000248 	.word	0x20000248

08001740 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001744:	4802      	ldr	r0, [pc, #8]	@ (8001750 <DMA2_Stream0_IRQHandler+0x10>)
 8001746:	f001 fc19 	bl	8002f7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000070 	.word	0x20000070

08001754 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Stream2_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Stream7_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001774:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <SystemInit+0x20>)
 8001776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800177a:	4a05      	ldr	r2, [pc, #20]	@ (8001790 <SystemInit+0x20>)
 800177c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001780:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800179a:	f107 0308 	add.w	r3, r7, #8
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a8:	463b      	mov	r3, r7
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80017b0:	4b1e      	ldr	r3, [pc, #120]	@ (800182c <MX_TIM8_Init+0x98>)
 80017b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001830 <MX_TIM8_Init+0x9c>)
 80017b4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 80017b6:	4b1d      	ldr	r3, [pc, #116]	@ (800182c <MX_TIM8_Init+0x98>)
 80017b8:	22b3      	movs	r2, #179	@ 0xb3
 80017ba:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017bc:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <MX_TIM8_Init+0x98>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 10000-1;
 80017c2:	4b1a      	ldr	r3, [pc, #104]	@ (800182c <MX_TIM8_Init+0x98>)
 80017c4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80017c8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ca:	4b18      	ldr	r3, [pc, #96]	@ (800182c <MX_TIM8_Init+0x98>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80017d0:	4b16      	ldr	r3, [pc, #88]	@ (800182c <MX_TIM8_Init+0x98>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d6:	4b15      	ldr	r3, [pc, #84]	@ (800182c <MX_TIM8_Init+0x98>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80017dc:	4813      	ldr	r0, [pc, #76]	@ (800182c <MX_TIM8_Init+0x98>)
 80017de:	f002 fde7 	bl	80043b0 <HAL_TIM_Base_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 80017e8:	f7ff fdec 	bl	80013c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80017f2:	f107 0308 	add.w	r3, r7, #8
 80017f6:	4619      	mov	r1, r3
 80017f8:	480c      	ldr	r0, [pc, #48]	@ (800182c <MX_TIM8_Init+0x98>)
 80017fa:	f002 ff89 	bl	8004710 <HAL_TIM_ConfigClockSource>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001804:	f7ff fdde 	bl	80013c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001808:	2320      	movs	r3, #32
 800180a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800180c:	2300      	movs	r3, #0
 800180e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001810:	463b      	mov	r3, r7
 8001812:	4619      	mov	r1, r3
 8001814:	4805      	ldr	r0, [pc, #20]	@ (800182c <MX_TIM8_Init+0x98>)
 8001816:	f003 f9bb 	bl	8004b90 <HAL_TIMEx_MasterConfigSynchronization>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001820:	f7ff fdd0 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001824:	bf00      	nop
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000248 	.word	0x20000248
 8001830:	40010400 	.word	0x40010400

08001834 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0e      	ldr	r2, [pc, #56]	@ (800187c <HAL_TIM_Base_MspInit+0x48>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d115      	bne.n	8001872 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	4b0d      	ldr	r3, [pc, #52]	@ (8001880 <HAL_TIM_Base_MspInit+0x4c>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184e:	4a0c      	ldr	r2, [pc, #48]	@ (8001880 <HAL_TIM_Base_MspInit+0x4c>)
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	6453      	str	r3, [r2, #68]	@ 0x44
 8001856:	4b0a      	ldr	r3, [pc, #40]	@ (8001880 <HAL_TIM_Base_MspInit+0x4c>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	202c      	movs	r0, #44	@ 0x2c
 8001868:	f001 fa4b 	bl	8002d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800186c:	202c      	movs	r0, #44	@ 0x2c
 800186e:	f001 fa64 	bl	8002d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40010400 	.word	0x40010400
 8001880:	40023800 	.word	0x40023800

08001884 <__NVIC_GetPriorityGrouping>:
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001888:	4b04      	ldr	r3, [pc, #16]	@ (800189c <__NVIC_GetPriorityGrouping+0x18>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	0a1b      	lsrs	r3, r3, #8
 800188e:	f003 0307 	and.w	r3, r3, #7
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_EnableIRQ>:
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	db0b      	blt.n	80018ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	f003 021f 	and.w	r2, r3, #31
 80018b8:	4907      	ldr	r1, [pc, #28]	@ (80018d8 <__NVIC_EnableIRQ+0x38>)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	095b      	lsrs	r3, r3, #5
 80018c0:	2001      	movs	r0, #1
 80018c2:	fa00 f202 	lsl.w	r2, r0, r2
 80018c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	e000e100 	.word	0xe000e100

080018dc <__NVIC_SetPriority>:
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	6039      	str	r1, [r7, #0]
 80018e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	db0a      	blt.n	8001906 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	490c      	ldr	r1, [pc, #48]	@ (8001928 <__NVIC_SetPriority+0x4c>)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	0112      	lsls	r2, r2, #4
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	440b      	add	r3, r1
 8001900:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001904:	e00a      	b.n	800191c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4908      	ldr	r1, [pc, #32]	@ (800192c <__NVIC_SetPriority+0x50>)
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	3b04      	subs	r3, #4
 8001914:	0112      	lsls	r2, r2, #4
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	440b      	add	r3, r1
 800191a:	761a      	strb	r2, [r3, #24]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000e100 	.word	0xe000e100
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <NVIC_EncodePriority>:
{
 8001930:	b480      	push	{r7}
 8001932:	b089      	sub	sp, #36	@ 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f1c3 0307 	rsb	r3, r3, #7
 800194a:	2b04      	cmp	r3, #4
 800194c:	bf28      	it	cs
 800194e:	2304      	movcs	r3, #4
 8001950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3304      	adds	r3, #4
 8001956:	2b06      	cmp	r3, #6
 8001958:	d902      	bls.n	8001960 <NVIC_EncodePriority+0x30>
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3b03      	subs	r3, #3
 800195e:	e000      	b.n	8001962 <NVIC_EncodePriority+0x32>
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	f04f 32ff 	mov.w	r2, #4294967295
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43da      	mvns	r2, r3
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	401a      	ands	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001978:	f04f 31ff 	mov.w	r1, #4294967295
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	fa01 f303 	lsl.w	r3, r1, r3
 8001982:	43d9      	mvns	r1, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	4313      	orrs	r3, r2
}
 800198a:	4618      	mov	r0, r3
 800198c:	3724      	adds	r7, #36	@ 0x24
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <LL_USART_Enable>:
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	60da      	str	r2, [r3, #12]
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <LL_USART_ConfigAsyncMode>:
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	615a      	str	r2, [r3, #20]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80019ec:	4b08      	ldr	r3, [pc, #32]	@ (8001a10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019f0:	4907      	ldr	r1, [pc, #28]	@ (8001a10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80019f8:	4b05      	ldr	r3, [pc, #20]	@ (8001a10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4013      	ands	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a02:	68fb      	ldr	r3, [r7, #12]
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	40023800 	.word	0x40023800

08001a14 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001a1c:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a20:	4907      	ldr	r1, [pc, #28]	@ (8001a40 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001a28:	4b05      	ldr	r3, [pc, #20]	@ (8001a40 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a32:	68fb      	ldr	r3, [r7, #12]
}
 8001a34:	bf00      	nop
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	40023800 	.word	0x40023800

08001a44 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a4c:	4b08      	ldr	r3, [pc, #32]	@ (8001a70 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a50:	4907      	ldr	r1, [pc, #28]	@ (8001a70 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a58:	4b05      	ldr	r3, [pc, #20]	@ (8001a70 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a62:	68fb      	ldr	r3, [r7, #12]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	40023800 	.word	0x40023800

08001a74 <LL_DMA_SetDataTransferDirection>:
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8001a80:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab8 <LL_DMA_SetDataTransferDirection+0x44>)
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	4413      	add	r3, r2
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001a94:	4908      	ldr	r1, [pc, #32]	@ (8001ab8 <LL_DMA_SetDataTransferDirection+0x44>)
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	440b      	add	r3, r1
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	440b      	add	r3, r1
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]
}
 8001aaa:	bf00      	nop
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	08005bb4 	.word	0x08005bb4

08001abc <LL_DMA_SetMode>:
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8001ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b00 <LL_DMA_SetMode+0x44>)
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	4413      	add	r3, r2
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8001adc:	4908      	ldr	r1, [pc, #32]	@ (8001b00 <LL_DMA_SetMode+0x44>)
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	440b      	add	r3, r1
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	440b      	add	r3, r1
 8001aea:	4619      	mov	r1, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]
}
 8001af2:	bf00      	nop
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	08005bb4 	.word	0x08005bb4

08001b04 <LL_DMA_SetPeriphIncMode>:
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8001b10:	4a0d      	ldr	r2, [pc, #52]	@ (8001b48 <LL_DMA_SetPeriphIncMode+0x44>)
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	4413      	add	r3, r2
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8001b24:	4908      	ldr	r1, [pc, #32]	@ (8001b48 <LL_DMA_SetPeriphIncMode+0x44>)
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	440b      	add	r3, r1
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	440b      	add	r3, r1
 8001b32:	4619      	mov	r1, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	600b      	str	r3, [r1, #0]
}
 8001b3a:	bf00      	nop
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	08005bb4 	.word	0x08005bb4

08001b4c <LL_DMA_SetMemoryIncMode>:
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8001b58:	4a0d      	ldr	r2, [pc, #52]	@ (8001b90 <LL_DMA_SetMemoryIncMode+0x44>)
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4413      	add	r3, r2
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8001b6c:	4908      	ldr	r1, [pc, #32]	@ (8001b90 <LL_DMA_SetMemoryIncMode+0x44>)
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	440b      	add	r3, r1
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	4619      	mov	r1, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	440b      	add	r3, r1
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]
}
 8001b82:	bf00      	nop
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	08005bb4 	.word	0x08005bb4

08001b94 <LL_DMA_SetPeriphSize>:
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd8 <LL_DMA_SetPeriphSize+0x44>)
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4413      	add	r3, r2
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8001bb4:	4908      	ldr	r1, [pc, #32]	@ (8001bd8 <LL_DMA_SetPeriphSize+0x44>)
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	440b      	add	r3, r1
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	440b      	add	r3, r1
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	600b      	str	r3, [r1, #0]
}
 8001bca:	bf00      	nop
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	08005bb4 	.word	0x08005bb4

08001bdc <LL_DMA_SetMemorySize>:
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8001be8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c20 <LL_DMA_SetMemorySize+0x44>)
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	4413      	add	r3, r2
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8001bfc:	4908      	ldr	r1, [pc, #32]	@ (8001c20 <LL_DMA_SetMemorySize+0x44>)
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	440b      	add	r3, r1
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	4619      	mov	r1, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	440b      	add	r3, r1
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	600b      	str	r3, [r1, #0]
}
 8001c12:	bf00      	nop
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	08005bb4 	.word	0x08005bb4

08001c24 <LL_DMA_SetStreamPriorityLevel>:
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8001c30:	4a0d      	ldr	r2, [pc, #52]	@ (8001c68 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	4413      	add	r3, r2
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001c44:	4908      	ldr	r1, [pc, #32]	@ (8001c68 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	440b      	add	r3, r1
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	440b      	add	r3, r1
 8001c52:	4619      	mov	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	600b      	str	r3, [r1, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	08005bb4 	.word	0x08005bb4

08001c6c <LL_DMA_SetChannelSelection>:
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8001c78:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb0 <LL_DMA_SetChannelSelection+0x44>)
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4413      	add	r3, r2
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8001c8c:	4908      	ldr	r1, [pc, #32]	@ (8001cb0 <LL_DMA_SetChannelSelection+0x44>)
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	440b      	add	r3, r1
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	4619      	mov	r1, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	440b      	add	r3, r1
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	600b      	str	r3, [r1, #0]
}
 8001ca2:	bf00      	nop
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	08005bb4 	.word	0x08005bb4

08001cb4 <LL_DMA_DisableFifoMode>:
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8001cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf0 <LL_DMA_DisableFifoMode+0x3c>)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4413      	add	r3, r2
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	4908      	ldr	r1, [pc, #32]	@ (8001cf0 <LL_DMA_DisableFifoMode+0x3c>)
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	440a      	add	r2, r1
 8001cd4:	7812      	ldrb	r2, [r2, #0]
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	440a      	add	r2, r1
 8001cdc:	f023 0304 	bic.w	r3, r3, #4
 8001ce0:	6153      	str	r3, [r2, #20]
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	08005bb4 	.word	0x08005bb4

08001cf4 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08e      	sub	sp, #56	@ 0x38
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001cfa:	f107 031c 	add.w	r3, r7, #28
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	60da      	str	r2, [r3, #12]
 8001d08:	611a      	str	r2, [r3, #16]
 8001d0a:	615a      	str	r2, [r3, #20]
 8001d0c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0e:	1d3b      	adds	r3, r7, #4
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
 8001d1c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001d1e:	2010      	movs	r0, #16
 8001d20:	f7ff fe90 	bl	8001a44 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001d24:	2002      	movs	r0, #2
 8001d26:	f7ff fe5d 	bl	80019e4 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001d2a:	23c0      	movs	r3, #192	@ 0xc0
 8001d2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d32:	2303      	movs	r3, #3
 8001d34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001d3e:	2307      	movs	r3, #7
 8001d40:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	4619      	mov	r1, r3
 8001d46:	4848      	ldr	r0, [pc, #288]	@ (8001e68 <MX_USART1_UART_Init+0x174>)
 8001d48:	f003 f8fd 	bl	8004f46 <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_RX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_2, LL_DMA_CHANNEL_4);
 8001d4c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d50:	2102      	movs	r1, #2
 8001d52:	4846      	ldr	r0, [pc, #280]	@ (8001e6c <MX_USART1_UART_Init+0x178>)
 8001d54:	f7ff ff8a 	bl	8001c6c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2102      	movs	r1, #2
 8001d5c:	4843      	ldr	r0, [pc, #268]	@ (8001e6c <MX_USART1_UART_Init+0x178>)
 8001d5e:	f7ff fe89 	bl	8001a74 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_2, LL_DMA_PRIORITY_LOW);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2102      	movs	r1, #2
 8001d66:	4841      	ldr	r0, [pc, #260]	@ (8001e6c <MX_USART1_UART_Init+0x178>)
 8001d68:	f7ff ff5c 	bl	8001c24 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MODE_CIRCULAR);
 8001d6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d70:	2102      	movs	r1, #2
 8001d72:	483e      	ldr	r0, [pc, #248]	@ (8001e6c <MX_USART1_UART_Init+0x178>)
 8001d74:	f7ff fea2 	bl	8001abc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_PERIPH_NOINCREMENT);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2102      	movs	r1, #2
 8001d7c:	483b      	ldr	r0, [pc, #236]	@ (8001e6c <MX_USART1_UART_Init+0x178>)
 8001d7e:	f7ff fec1 	bl	8001b04 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MEMORY_INCREMENT);
 8001d82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d86:	2102      	movs	r1, #2
 8001d88:	4838      	ldr	r0, [pc, #224]	@ (8001e6c <MX_USART1_UART_Init+0x178>)
 8001d8a:	f7ff fedf 	bl	8001b4c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_2, LL_DMA_PDATAALIGN_BYTE);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2102      	movs	r1, #2
 8001d92:	4836      	ldr	r0, [pc, #216]	@ (8001e6c <MX_USART1_UART_Init+0x178>)
 8001d94:	f7ff fefe 	bl	8001b94 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_2, LL_DMA_MDATAALIGN_BYTE);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2102      	movs	r1, #2
 8001d9c:	4833      	ldr	r0, [pc, #204]	@ (8001e6c <MX_USART1_UART_Init+0x178>)
 8001d9e:	f7ff ff1d 	bl	8001bdc <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_2);
 8001da2:	2102      	movs	r1, #2
 8001da4:	4831      	ldr	r0, [pc, #196]	@ (8001e6c <MX_USART1_UART_Init+0x178>)
 8001da6:	f7ff ff85 	bl	8001cb4 <LL_DMA_DisableFifoMode>

  /* USART1_TX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_7, LL_DMA_CHANNEL_4);
 8001daa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001dae:	2107      	movs	r1, #7
 8001db0:	482e      	ldr	r0, [pc, #184]	@ (8001e6c <MX_USART1_UART_Init+0x178>)
 8001db2:	f7ff ff5b 	bl	8001c6c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001db6:	2240      	movs	r2, #64	@ 0x40
 8001db8:	2107      	movs	r1, #7
 8001dba:	482c      	ldr	r0, [pc, #176]	@ (8001e6c <MX_USART1_UART_Init+0x178>)
 8001dbc:	f7ff fe5a 	bl	8001a74 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_7, LL_DMA_PRIORITY_LOW);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2107      	movs	r1, #7
 8001dc4:	4829      	ldr	r0, [pc, #164]	@ (8001e6c <MX_USART1_UART_Init+0x178>)
 8001dc6:	f7ff ff2d 	bl	8001c24 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_7, LL_DMA_MODE_CIRCULAR);
 8001dca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dce:	2107      	movs	r1, #7
 8001dd0:	4826      	ldr	r0, [pc, #152]	@ (8001e6c <MX_USART1_UART_Init+0x178>)
 8001dd2:	f7ff fe73 	bl	8001abc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_7, LL_DMA_PERIPH_NOINCREMENT);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2107      	movs	r1, #7
 8001dda:	4824      	ldr	r0, [pc, #144]	@ (8001e6c <MX_USART1_UART_Init+0x178>)
 8001ddc:	f7ff fe92 	bl	8001b04 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_7, LL_DMA_MEMORY_INCREMENT);
 8001de0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001de4:	2107      	movs	r1, #7
 8001de6:	4821      	ldr	r0, [pc, #132]	@ (8001e6c <MX_USART1_UART_Init+0x178>)
 8001de8:	f7ff feb0 	bl	8001b4c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_7, LL_DMA_PDATAALIGN_BYTE);
 8001dec:	2200      	movs	r2, #0
 8001dee:	2107      	movs	r1, #7
 8001df0:	481e      	ldr	r0, [pc, #120]	@ (8001e6c <MX_USART1_UART_Init+0x178>)
 8001df2:	f7ff fecf 	bl	8001b94 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_7, LL_DMA_MDATAALIGN_BYTE);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2107      	movs	r1, #7
 8001dfa:	481c      	ldr	r0, [pc, #112]	@ (8001e6c <MX_USART1_UART_Init+0x178>)
 8001dfc:	f7ff feee 	bl	8001bdc <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_7);
 8001e00:	2107      	movs	r1, #7
 8001e02:	481a      	ldr	r0, [pc, #104]	@ (8001e6c <MX_USART1_UART_Init+0x178>)
 8001e04:	f7ff ff56 	bl	8001cb4 <LL_DMA_DisableFifoMode>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001e08:	f7ff fd3c 	bl	8001884 <__NVIC_GetPriorityGrouping>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2100      	movs	r1, #0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fd8c 	bl	8001930 <NVIC_EncodePriority>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	2025      	movs	r0, #37	@ 0x25
 8001e1e:	f7ff fd5d 	bl	80018dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001e22:	2025      	movs	r0, #37	@ 0x25
 8001e24:	f7ff fd3c 	bl	80018a0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001e28:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001e2c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001e32:	2300      	movs	r3, #0
 8001e34:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001e3a:	230c      	movs	r3, #12
 8001e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001e42:	2300      	movs	r3, #0
 8001e44:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8001e46:	f107 031c 	add.w	r3, r7, #28
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4808      	ldr	r0, [pc, #32]	@ (8001e70 <MX_USART1_UART_Init+0x17c>)
 8001e4e:	f003 fcd7 	bl	8005800 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001e52:	4807      	ldr	r0, [pc, #28]	@ (8001e70 <MX_USART1_UART_Init+0x17c>)
 8001e54:	f7ff fdaf 	bl	80019b6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001e58:	4805      	ldr	r0, [pc, #20]	@ (8001e70 <MX_USART1_UART_Init+0x17c>)
 8001e5a:	f7ff fd9c 	bl	8001996 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e5e:	bf00      	nop
 8001e60:	3738      	adds	r7, #56	@ 0x38
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40020400 	.word	0x40020400
 8001e6c:	40026400 	.word	0x40026400
 8001e70:	40011000 	.word	0x40011000

08001e74 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08e      	sub	sp, #56	@ 0x38
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001e7a:	f107 031c 	add.w	r3, r7, #28
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	60da      	str	r2, [r3, #12]
 8001e88:	611a      	str	r2, [r3, #16]
 8001e8a:	615a      	str	r2, [r3, #20]
 8001e8c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8e:	1d3b      	adds	r3, r7, #4
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
 8001e9c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8001e9e:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8001ea2:	f7ff fdb7 	bl	8001a14 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001ea6:	2004      	movs	r0, #4
 8001ea8:	f7ff fd9c 	bl	80019e4 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PC5   ------> USART3_RX
  PC10   ------> USART3_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_10;
 8001eac:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8001eb0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001ec2:	2307      	movs	r3, #7
 8001ec4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4830      	ldr	r0, [pc, #192]	@ (8001f8c <MX_USART3_UART_Init+0x118>)
 8001ecc:	f003 f83b 	bl	8004f46 <LL_GPIO_Init>

  /* USART3 DMA Init */

  /* USART3_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_3, LL_DMA_CHANNEL_4);
 8001ed0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ed4:	2103      	movs	r1, #3
 8001ed6:	482e      	ldr	r0, [pc, #184]	@ (8001f90 <MX_USART3_UART_Init+0x11c>)
 8001ed8:	f7ff fec8 	bl	8001c6c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001edc:	2240      	movs	r2, #64	@ 0x40
 8001ede:	2103      	movs	r1, #3
 8001ee0:	482b      	ldr	r0, [pc, #172]	@ (8001f90 <MX_USART3_UART_Init+0x11c>)
 8001ee2:	f7ff fdc7 	bl	8001a74 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_3, LL_DMA_PRIORITY_LOW);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2103      	movs	r1, #3
 8001eea:	4829      	ldr	r0, [pc, #164]	@ (8001f90 <MX_USART3_UART_Init+0x11c>)
 8001eec:	f7ff fe9a 	bl	8001c24 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_3, LL_DMA_MODE_CIRCULAR);
 8001ef0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ef4:	2103      	movs	r1, #3
 8001ef6:	4826      	ldr	r0, [pc, #152]	@ (8001f90 <MX_USART3_UART_Init+0x11c>)
 8001ef8:	f7ff fde0 	bl	8001abc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_3, LL_DMA_PERIPH_NOINCREMENT);
 8001efc:	2200      	movs	r2, #0
 8001efe:	2103      	movs	r1, #3
 8001f00:	4823      	ldr	r0, [pc, #140]	@ (8001f90 <MX_USART3_UART_Init+0x11c>)
 8001f02:	f7ff fdff 	bl	8001b04 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_3, LL_DMA_MEMORY_INCREMENT);
 8001f06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f0a:	2103      	movs	r1, #3
 8001f0c:	4820      	ldr	r0, [pc, #128]	@ (8001f90 <MX_USART3_UART_Init+0x11c>)
 8001f0e:	f7ff fe1d 	bl	8001b4c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_3, LL_DMA_PDATAALIGN_BYTE);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2103      	movs	r1, #3
 8001f16:	481e      	ldr	r0, [pc, #120]	@ (8001f90 <MX_USART3_UART_Init+0x11c>)
 8001f18:	f7ff fe3c 	bl	8001b94 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_3, LL_DMA_MDATAALIGN_BYTE);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2103      	movs	r1, #3
 8001f20:	481b      	ldr	r0, [pc, #108]	@ (8001f90 <MX_USART3_UART_Init+0x11c>)
 8001f22:	f7ff fe5b 	bl	8001bdc <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_3);
 8001f26:	2103      	movs	r1, #3
 8001f28:	4819      	ldr	r0, [pc, #100]	@ (8001f90 <MX_USART3_UART_Init+0x11c>)
 8001f2a:	f7ff fec3 	bl	8001cb4 <LL_DMA_DisableFifoMode>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001f2e:	f7ff fca9 	bl	8001884 <__NVIC_GetPriorityGrouping>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2200      	movs	r2, #0
 8001f36:	2100      	movs	r1, #0
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fcf9 	bl	8001930 <NVIC_EncodePriority>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	4619      	mov	r1, r3
 8001f42:	2027      	movs	r0, #39	@ 0x27
 8001f44:	f7ff fcca 	bl	80018dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8001f48:	2027      	movs	r0, #39	@ 0x27
 8001f4a:	f7ff fca9 	bl	80018a0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 1000000;
 8001f4e:	4b11      	ldr	r3, [pc, #68]	@ (8001f94 <MX_USART3_UART_Init+0x120>)
 8001f50:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001f52:	2300      	movs	r3, #0
 8001f54:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001f5e:	230c      	movs	r3, #12
 8001f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001f66:	2300      	movs	r3, #0
 8001f68:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8001f6a:	f107 031c 	add.w	r3, r7, #28
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4809      	ldr	r0, [pc, #36]	@ (8001f98 <MX_USART3_UART_Init+0x124>)
 8001f72:	f003 fc45 	bl	8005800 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8001f76:	4808      	ldr	r0, [pc, #32]	@ (8001f98 <MX_USART3_UART_Init+0x124>)
 8001f78:	f7ff fd1d 	bl	80019b6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8001f7c:	4806      	ldr	r0, [pc, #24]	@ (8001f98 <MX_USART3_UART_Init+0x124>)
 8001f7e:	f7ff fd0a 	bl	8001996 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f82:	bf00      	nop
 8001f84:	3738      	adds	r7, #56	@ 0x38
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40020800 	.word	0x40020800
 8001f90:	40026000 	.word	0x40026000
 8001f94:	000f4240 	.word	0x000f4240
 8001f98:	40004800 	.word	0x40004800

08001f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fd4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001fa0:	f7ff fbe6 	bl	8001770 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fa4:	480c      	ldr	r0, [pc, #48]	@ (8001fd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fa6:	490d      	ldr	r1, [pc, #52]	@ (8001fdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fac:	e002      	b.n	8001fb4 <LoopCopyDataInit>

08001fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb2:	3304      	adds	r3, #4

08001fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb8:	d3f9      	bcc.n	8001fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fba:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fbc:	4c0a      	ldr	r4, [pc, #40]	@ (8001fe8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc0:	e001      	b.n	8001fc6 <LoopFillZerobss>

08001fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc4:	3204      	adds	r2, #4

08001fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc8:	d3fb      	bcc.n	8001fc2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001fca:	f003 fca1 	bl	8005910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fce:	f7fe fe57 	bl	8000c80 <main>
  bx  lr    
 8001fd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fdc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001fe0:	08005bd4 	.word	0x08005bd4
  ldr r2, =_sbss
 8001fe4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001fe8:	20000294 	.word	0x20000294

08001fec <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fec:	e7fe      	b.n	8001fec <CAN1_RX0_IRQHandler>
	...

08001ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8002030 <HAL_Init+0x40>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8002030 <HAL_Init+0x40>)
 8001ffa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ffe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002000:	4b0b      	ldr	r3, [pc, #44]	@ (8002030 <HAL_Init+0x40>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a0a      	ldr	r2, [pc, #40]	@ (8002030 <HAL_Init+0x40>)
 8002006:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800200a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800200c:	4b08      	ldr	r3, [pc, #32]	@ (8002030 <HAL_Init+0x40>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a07      	ldr	r2, [pc, #28]	@ (8002030 <HAL_Init+0x40>)
 8002012:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002016:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002018:	2003      	movs	r0, #3
 800201a:	f000 fe67 	bl	8002cec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800201e:	200f      	movs	r0, #15
 8002020:	f000 f808 	bl	8002034 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002024:	f7ff f9d4 	bl	80013d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40023c00 	.word	0x40023c00

08002034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800203c:	4b12      	ldr	r3, [pc, #72]	@ (8002088 <HAL_InitTick+0x54>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4b12      	ldr	r3, [pc, #72]	@ (800208c <HAL_InitTick+0x58>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	4619      	mov	r1, r3
 8002046:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800204a:	fbb3 f3f1 	udiv	r3, r3, r1
 800204e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002052:	4618      	mov	r0, r3
 8002054:	f000 fe7f 	bl	8002d56 <HAL_SYSTICK_Config>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e00e      	b.n	8002080 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b0f      	cmp	r3, #15
 8002066:	d80a      	bhi.n	800207e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002068:	2200      	movs	r2, #0
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	f04f 30ff 	mov.w	r0, #4294967295
 8002070:	f000 fe47 	bl	8002d02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002074:	4a06      	ldr	r2, [pc, #24]	@ (8002090 <HAL_InitTick+0x5c>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	e000      	b.n	8002080 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
}
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000000 	.word	0x20000000
 800208c:	20000008 	.word	0x20000008
 8002090:	20000004 	.word	0x20000004

08002094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002098:	4b06      	ldr	r3, [pc, #24]	@ (80020b4 <HAL_IncTick+0x20>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	461a      	mov	r2, r3
 800209e:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <HAL_IncTick+0x24>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4413      	add	r3, r2
 80020a4:	4a04      	ldr	r2, [pc, #16]	@ (80020b8 <HAL_IncTick+0x24>)
 80020a6:	6013      	str	r3, [r2, #0]
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000008 	.word	0x20000008
 80020b8:	20000290 	.word	0x20000290

080020bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return uwTick;
 80020c0:	4b03      	ldr	r3, [pc, #12]	@ (80020d0 <HAL_GetTick+0x14>)
 80020c2:	681b      	ldr	r3, [r3, #0]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	20000290 	.word	0x20000290

080020d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e033      	b.n	8002152 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d109      	bne.n	8002106 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7fe fa6c 	bl	80005d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210a:	f003 0310 	and.w	r3, r3, #16
 800210e:	2b00      	cmp	r3, #0
 8002110:	d118      	bne.n	8002144 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002116:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800211a:	f023 0302 	bic.w	r3, r3, #2
 800211e:	f043 0202 	orr.w	r2, r3, #2
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fb88 	bl	800283c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002136:	f023 0303 	bic.w	r3, r3, #3
 800213a:	f043 0201 	orr.w	r2, r3, #1
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	641a      	str	r2, [r3, #64]	@ 0x40
 8002142:	e001      	b.n	8002148 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002150:	7bfb      	ldrb	r3, [r7, #15]
}
 8002152:	4618      	mov	r0, r3
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b086      	sub	sp, #24
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	f003 0320 	and.w	r3, r3, #32
 8002188:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d049      	beq.n	8002224 <HAL_ADC_IRQHandler+0xca>
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d046      	beq.n	8002224 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	f003 0310 	and.w	r3, r3, #16
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d105      	bne.n	80021ae <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d12b      	bne.n	8002214 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d127      	bne.n	8002214 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ca:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d006      	beq.n	80021e0 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d119      	bne.n	8002214 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0220 	bic.w	r2, r2, #32
 80021ee:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002200:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d105      	bne.n	8002214 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220c:	f043 0201 	orr.w	r2, r3, #1
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7fe fe19 	bl	8000e4c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f06f 0212 	mvn.w	r2, #18
 8002222:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002232:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d057      	beq.n	80022ea <HAL_ADC_IRQHandler+0x190>
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d054      	beq.n	80022ea <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002244:	f003 0310 	and.w	r3, r3, #16
 8002248:	2b00      	cmp	r3, #0
 800224a:	d105      	bne.n	8002258 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002250:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d139      	bne.n	80022da <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800226c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002270:	2b00      	cmp	r3, #0
 8002272:	d006      	beq.n	8002282 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800227e:	2b00      	cmp	r3, #0
 8002280:	d12b      	bne.n	80022da <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800228c:	2b00      	cmp	r3, #0
 800228e:	d124      	bne.n	80022da <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800229a:	2b00      	cmp	r3, #0
 800229c:	d11d      	bne.n	80022da <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d119      	bne.n	80022da <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022b4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d105      	bne.n	80022da <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	f043 0201 	orr.w	r2, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 fc2c 	bl	8002b38 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f06f 020c 	mvn.w	r2, #12
 80022e8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022f8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d017      	beq.n	8002330 <HAL_ADC_IRQHandler+0x1d6>
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d014      	beq.n	8002330 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b01      	cmp	r3, #1
 8002312:	d10d      	bne.n	8002330 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002318:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 f945 	bl	80025b0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f06f 0201 	mvn.w	r2, #1
 800232e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 0320 	and.w	r3, r3, #32
 8002336:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800233e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d015      	beq.n	8002372 <HAL_ADC_IRQHandler+0x218>
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d012      	beq.n	8002372 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002350:	f043 0202 	orr.w	r2, r3, #2
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f06f 0220 	mvn.w	r2, #32
 8002360:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f92e 	bl	80025c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f06f 0220 	mvn.w	r2, #32
 8002370:	601a      	str	r2, [r3, #0]
  }
}
 8002372:	bf00      	nop
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002392:	2b01      	cmp	r3, #1
 8002394:	d101      	bne.n	800239a <HAL_ADC_Start_DMA+0x1e>
 8002396:	2302      	movs	r3, #2
 8002398:	e0e9      	b.n	800256e <HAL_ADC_Start_DMA+0x1f2>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d018      	beq.n	80023e2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0201 	orr.w	r2, r2, #1
 80023be:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023c0:	4b6d      	ldr	r3, [pc, #436]	@ (8002578 <HAL_ADC_Start_DMA+0x1fc>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a6d      	ldr	r2, [pc, #436]	@ (800257c <HAL_ADC_Start_DMA+0x200>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	0c9a      	lsrs	r2, r3, #18
 80023cc:	4613      	mov	r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	4413      	add	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80023d4:	e002      	b.n	80023dc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	3b01      	subs	r3, #1
 80023da:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f9      	bne.n	80023d6 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023f0:	d107      	bne.n	8002402 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002400:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b01      	cmp	r3, #1
 800240e:	f040 80a1 	bne.w	8002554 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002416:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800241a:	f023 0301 	bic.w	r3, r3, #1
 800241e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002430:	2b00      	cmp	r3, #0
 8002432:	d007      	beq.n	8002444 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002438:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800243c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002448:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800244c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002450:	d106      	bne.n	8002460 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002456:	f023 0206 	bic.w	r2, r3, #6
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	645a      	str	r2, [r3, #68]	@ 0x44
 800245e:	e002      	b.n	8002466 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800246e:	4b44      	ldr	r3, [pc, #272]	@ (8002580 <HAL_ADC_Start_DMA+0x204>)
 8002470:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002476:	4a43      	ldr	r2, [pc, #268]	@ (8002584 <HAL_ADC_Start_DMA+0x208>)
 8002478:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800247e:	4a42      	ldr	r2, [pc, #264]	@ (8002588 <HAL_ADC_Start_DMA+0x20c>)
 8002480:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002486:	4a41      	ldr	r2, [pc, #260]	@ (800258c <HAL_ADC_Start_DMA+0x210>)
 8002488:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002492:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80024a2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024b2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	334c      	adds	r3, #76	@ 0x4c
 80024be:	4619      	mov	r1, r3
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f000 fd02 	bl	8002ecc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 031f 	and.w	r3, r3, #31
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d12a      	bne.n	800252a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a2d      	ldr	r2, [pc, #180]	@ (8002590 <HAL_ADC_Start_DMA+0x214>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d015      	beq.n	800250a <HAL_ADC_Start_DMA+0x18e>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a2c      	ldr	r2, [pc, #176]	@ (8002594 <HAL_ADC_Start_DMA+0x218>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d105      	bne.n	80024f4 <HAL_ADC_Start_DMA+0x178>
 80024e8:	4b25      	ldr	r3, [pc, #148]	@ (8002580 <HAL_ADC_Start_DMA+0x204>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 031f 	and.w	r3, r3, #31
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00a      	beq.n	800250a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a27      	ldr	r2, [pc, #156]	@ (8002598 <HAL_ADC_Start_DMA+0x21c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d136      	bne.n	800256c <HAL_ADC_Start_DMA+0x1f0>
 80024fe:	4b20      	ldr	r3, [pc, #128]	@ (8002580 <HAL_ADC_Start_DMA+0x204>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 0310 	and.w	r3, r3, #16
 8002506:	2b00      	cmp	r3, #0
 8002508:	d130      	bne.n	800256c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d129      	bne.n	800256c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	e020      	b.n	800256c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a18      	ldr	r2, [pc, #96]	@ (8002590 <HAL_ADC_Start_DMA+0x214>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d11b      	bne.n	800256c <HAL_ADC_Start_DMA+0x1f0>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d114      	bne.n	800256c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002550:	609a      	str	r2, [r3, #8]
 8002552:	e00b      	b.n	800256c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002558:	f043 0210 	orr.w	r2, r3, #16
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002564:	f043 0201 	orr.w	r2, r3, #1
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000000 	.word	0x20000000
 800257c:	431bde83 	.word	0x431bde83
 8002580:	40012300 	.word	0x40012300
 8002584:	08002a35 	.word	0x08002a35
 8002588:	08002aef 	.word	0x08002aef
 800258c:	08002b0b 	.word	0x08002b0b
 8002590:	40012000 	.word	0x40012000
 8002594:	40012100 	.word	0x40012100
 8002598:	40012200 	.word	0x40012200

0800259c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x1c>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e113      	b.n	800281c <HAL_ADC_ConfigChannel+0x244>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b09      	cmp	r3, #9
 8002602:	d925      	bls.n	8002650 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68d9      	ldr	r1, [r3, #12]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	461a      	mov	r2, r3
 8002612:	4613      	mov	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	3b1e      	subs	r3, #30
 800261a:	2207      	movs	r2, #7
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43da      	mvns	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	400a      	ands	r2, r1
 8002628:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68d9      	ldr	r1, [r3, #12]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	b29b      	uxth	r3, r3
 800263a:	4618      	mov	r0, r3
 800263c:	4603      	mov	r3, r0
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	4403      	add	r3, r0
 8002642:	3b1e      	subs	r3, #30
 8002644:	409a      	lsls	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	60da      	str	r2, [r3, #12]
 800264e:	e022      	b.n	8002696 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6919      	ldr	r1, [r3, #16]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	b29b      	uxth	r3, r3
 800265c:	461a      	mov	r2, r3
 800265e:	4613      	mov	r3, r2
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	4413      	add	r3, r2
 8002664:	2207      	movs	r2, #7
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43da      	mvns	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	400a      	ands	r2, r1
 8002672:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6919      	ldr	r1, [r3, #16]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	b29b      	uxth	r3, r3
 8002684:	4618      	mov	r0, r3
 8002686:	4603      	mov	r3, r0
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	4403      	add	r3, r0
 800268c:	409a      	lsls	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b06      	cmp	r3, #6
 800269c:	d824      	bhi.n	80026e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	3b05      	subs	r3, #5
 80026b0:	221f      	movs	r2, #31
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43da      	mvns	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	400a      	ands	r2, r1
 80026be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	4618      	mov	r0, r3
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	3b05      	subs	r3, #5
 80026da:	fa00 f203 	lsl.w	r2, r0, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80026e6:	e04c      	b.n	8002782 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b0c      	cmp	r3, #12
 80026ee:	d824      	bhi.n	800273a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	3b23      	subs	r3, #35	@ 0x23
 8002702:	221f      	movs	r2, #31
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43da      	mvns	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	400a      	ands	r2, r1
 8002710:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	b29b      	uxth	r3, r3
 800271e:	4618      	mov	r0, r3
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	3b23      	subs	r3, #35	@ 0x23
 800272c:	fa00 f203 	lsl.w	r2, r0, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	631a      	str	r2, [r3, #48]	@ 0x30
 8002738:	e023      	b.n	8002782 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	3b41      	subs	r3, #65	@ 0x41
 800274c:	221f      	movs	r2, #31
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43da      	mvns	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	400a      	ands	r2, r1
 800275a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	b29b      	uxth	r3, r3
 8002768:	4618      	mov	r0, r3
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	3b41      	subs	r3, #65	@ 0x41
 8002776:	fa00 f203 	lsl.w	r2, r0, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002782:	4b29      	ldr	r3, [pc, #164]	@ (8002828 <HAL_ADC_ConfigChannel+0x250>)
 8002784:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a28      	ldr	r2, [pc, #160]	@ (800282c <HAL_ADC_ConfigChannel+0x254>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d10f      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x1d8>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b12      	cmp	r3, #18
 8002796:	d10b      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a1d      	ldr	r2, [pc, #116]	@ (800282c <HAL_ADC_ConfigChannel+0x254>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d12b      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x23a>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a1c      	ldr	r2, [pc, #112]	@ (8002830 <HAL_ADC_ConfigChannel+0x258>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d003      	beq.n	80027cc <HAL_ADC_ConfigChannel+0x1f4>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b11      	cmp	r3, #17
 80027ca:	d122      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a11      	ldr	r2, [pc, #68]	@ (8002830 <HAL_ADC_ConfigChannel+0x258>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d111      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027ee:	4b11      	ldr	r3, [pc, #68]	@ (8002834 <HAL_ADC_ConfigChannel+0x25c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a11      	ldr	r2, [pc, #68]	@ (8002838 <HAL_ADC_ConfigChannel+0x260>)
 80027f4:	fba2 2303 	umull	r2, r3, r2, r3
 80027f8:	0c9a      	lsrs	r2, r3, #18
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002804:	e002      	b.n	800280c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	3b01      	subs	r3, #1
 800280a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f9      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	40012300 	.word	0x40012300
 800282c:	40012000 	.word	0x40012000
 8002830:	10000012 	.word	0x10000012
 8002834:	20000000 	.word	0x20000000
 8002838:	431bde83 	.word	0x431bde83

0800283c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002844:	4b79      	ldr	r3, [pc, #484]	@ (8002a2c <ADC_Init+0x1f0>)
 8002846:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	431a      	orrs	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002870:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6859      	ldr	r1, [r3, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	021a      	lsls	r2, r3, #8
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002894:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6859      	ldr	r1, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6899      	ldr	r1, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ce:	4a58      	ldr	r2, [pc, #352]	@ (8002a30 <ADC_Init+0x1f4>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d022      	beq.n	800291a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80028e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6899      	ldr	r1, [r3, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002904:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6899      	ldr	r1, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	e00f      	b.n	800293a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002928:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002938:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0202 	bic.w	r2, r2, #2
 8002948:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6899      	ldr	r1, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	7e1b      	ldrb	r3, [r3, #24]
 8002954:	005a      	lsls	r2, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d01b      	beq.n	80029a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002976:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002986:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6859      	ldr	r1, [r3, #4]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002992:	3b01      	subs	r3, #1
 8002994:	035a      	lsls	r2, r3, #13
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	605a      	str	r2, [r3, #4]
 800299e:	e007      	b.n	80029b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029ae:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80029be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	051a      	lsls	r2, r3, #20
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80029e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6899      	ldr	r1, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80029f2:	025a      	lsls	r2, r3, #9
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6899      	ldr	r1, [r3, #8]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	029a      	lsls	r2, r3, #10
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	609a      	str	r2, [r3, #8]
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	40012300 	.word	0x40012300
 8002a30:	0f000001 	.word	0x0f000001

08002a34 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d13c      	bne.n	8002ac8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a52:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d12b      	bne.n	8002ac0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d127      	bne.n	8002ac0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a76:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d006      	beq.n	8002a8c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d119      	bne.n	8002ac0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0220 	bic.w	r2, r2, #32
 8002a9a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d105      	bne.n	8002ac0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab8:	f043 0201 	orr.w	r2, r3, #1
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f7fe f9c3 	bl	8000e4c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ac6:	e00e      	b.n	8002ae6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f7ff fd75 	bl	80025c4 <HAL_ADC_ErrorCallback>
}
 8002ada:	e004      	b.n	8002ae6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	4798      	blx	r3
}
 8002ae6:	bf00      	nop
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b084      	sub	sp, #16
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002afa:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f7ff fd4d 	bl	800259c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b02:	bf00      	nop
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b16:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2240      	movs	r2, #64	@ 0x40
 8002b1c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b22:	f043 0204 	orr.w	r2, r3, #4
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f7ff fd4a 	bl	80025c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b30:	bf00      	nop
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <__NVIC_SetPriorityGrouping>:
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b90 <__NVIC_SetPriorityGrouping+0x44>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b68:	4013      	ands	r3, r2
 8002b6a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b7e:	4a04      	ldr	r2, [pc, #16]	@ (8002b90 <__NVIC_SetPriorityGrouping+0x44>)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	60d3      	str	r3, [r2, #12]
}
 8002b84:	bf00      	nop
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <__NVIC_GetPriorityGrouping>:
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b98:	4b04      	ldr	r3, [pc, #16]	@ (8002bac <__NVIC_GetPriorityGrouping+0x18>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	0a1b      	lsrs	r3, r3, #8
 8002b9e:	f003 0307 	and.w	r3, r3, #7
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	e000ed00 	.word	0xe000ed00

08002bb0 <__NVIC_EnableIRQ>:
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	db0b      	blt.n	8002bda <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	f003 021f 	and.w	r2, r3, #31
 8002bc8:	4907      	ldr	r1, [pc, #28]	@ (8002be8 <__NVIC_EnableIRQ+0x38>)
 8002bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bce:	095b      	lsrs	r3, r3, #5
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	e000e100 	.word	0xe000e100

08002bec <__NVIC_SetPriority>:
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	6039      	str	r1, [r7, #0]
 8002bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	db0a      	blt.n	8002c16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	490c      	ldr	r1, [pc, #48]	@ (8002c38 <__NVIC_SetPriority+0x4c>)
 8002c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0a:	0112      	lsls	r2, r2, #4
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	440b      	add	r3, r1
 8002c10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002c14:	e00a      	b.n	8002c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	4908      	ldr	r1, [pc, #32]	@ (8002c3c <__NVIC_SetPriority+0x50>)
 8002c1c:	79fb      	ldrb	r3, [r7, #7]
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	3b04      	subs	r3, #4
 8002c24:	0112      	lsls	r2, r2, #4
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	440b      	add	r3, r1
 8002c2a:	761a      	strb	r2, [r3, #24]
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	e000e100 	.word	0xe000e100
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <NVIC_EncodePriority>:
{
 8002c40:	b480      	push	{r7}
 8002c42:	b089      	sub	sp, #36	@ 0x24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f1c3 0307 	rsb	r3, r3, #7
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	bf28      	it	cs
 8002c5e:	2304      	movcs	r3, #4
 8002c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	3304      	adds	r3, #4
 8002c66:	2b06      	cmp	r3, #6
 8002c68:	d902      	bls.n	8002c70 <NVIC_EncodePriority+0x30>
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	3b03      	subs	r3, #3
 8002c6e:	e000      	b.n	8002c72 <NVIC_EncodePriority+0x32>
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c74:	f04f 32ff 	mov.w	r2, #4294967295
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43da      	mvns	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	401a      	ands	r2, r3
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c88:	f04f 31ff 	mov.w	r1, #4294967295
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c92:	43d9      	mvns	r1, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c98:	4313      	orrs	r3, r2
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3724      	adds	r7, #36	@ 0x24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
	...

08002ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cb8:	d301      	bcc.n	8002cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e00f      	b.n	8002cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce8 <SysTick_Config+0x40>)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cc6:	210f      	movs	r1, #15
 8002cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ccc:	f7ff ff8e 	bl	8002bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cd0:	4b05      	ldr	r3, [pc, #20]	@ (8002ce8 <SysTick_Config+0x40>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cd6:	4b04      	ldr	r3, [pc, #16]	@ (8002ce8 <SysTick_Config+0x40>)
 8002cd8:	2207      	movs	r2, #7
 8002cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	e000e010 	.word	0xe000e010

08002cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff ff29 	bl	8002b4c <__NVIC_SetPriorityGrouping>
}
 8002cfa:	bf00      	nop
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b086      	sub	sp, #24
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	4603      	mov	r3, r0
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	607a      	str	r2, [r7, #4]
 8002d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d14:	f7ff ff3e 	bl	8002b94 <__NVIC_GetPriorityGrouping>
 8002d18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	68b9      	ldr	r1, [r7, #8]
 8002d1e:	6978      	ldr	r0, [r7, #20]
 8002d20:	f7ff ff8e 	bl	8002c40 <NVIC_EncodePriority>
 8002d24:	4602      	mov	r2, r0
 8002d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ff5d 	bl	8002bec <__NVIC_SetPriority>
}
 8002d32:	bf00      	nop
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	4603      	mov	r3, r0
 8002d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff ff31 	bl	8002bb0 <__NVIC_EnableIRQ>
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff ffa2 	bl	8002ca8 <SysTick_Config>
 8002d64:	4603      	mov	r3, r0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
	...

08002d70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d7c:	f7ff f99e 	bl	80020bc <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e099      	b.n	8002ec0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0201 	bic.w	r2, r2, #1
 8002daa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dac:	e00f      	b.n	8002dce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dae:	f7ff f985 	bl	80020bc <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b05      	cmp	r3, #5
 8002dba:	d908      	bls.n	8002dce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2203      	movs	r2, #3
 8002dc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e078      	b.n	8002ec0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1e8      	bne.n	8002dae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4b38      	ldr	r3, [pc, #224]	@ (8002ec8 <HAL_DMA_Init+0x158>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d107      	bne.n	8002e38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e30:	4313      	orrs	r3, r2
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f023 0307 	bic.w	r3, r3, #7
 8002e4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d117      	bne.n	8002e92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00e      	beq.n	8002e92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 fa6f 	bl	8003358 <DMA_CheckFifoParam>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2240      	movs	r2, #64	@ 0x40
 8002e84:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e016      	b.n	8002ec0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fa26 	bl	80032ec <DMA_CalcBaseAndBitshift>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea8:	223f      	movs	r2, #63	@ 0x3f
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	f010803f 	.word	0xf010803f

08002ecc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d101      	bne.n	8002ef2 <HAL_DMA_Start_IT+0x26>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e040      	b.n	8002f74 <HAL_DMA_Start_IT+0xa8>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d12f      	bne.n	8002f66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2202      	movs	r2, #2
 8002f0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 f9b8 	bl	8003290 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f24:	223f      	movs	r2, #63	@ 0x3f
 8002f26:	409a      	lsls	r2, r3
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0216 	orr.w	r2, r2, #22
 8002f3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d007      	beq.n	8002f54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0208 	orr.w	r2, r2, #8
 8002f52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0201 	orr.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	e005      	b.n	8002f72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f88:	4b8e      	ldr	r3, [pc, #568]	@ (80031c4 <HAL_DMA_IRQHandler+0x248>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a8e      	ldr	r2, [pc, #568]	@ (80031c8 <HAL_DMA_IRQHandler+0x24c>)
 8002f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f92:	0a9b      	lsrs	r3, r3, #10
 8002f94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa6:	2208      	movs	r2, #8
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4013      	ands	r3, r2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d01a      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d013      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0204 	bic.w	r2, r2, #4
 8002fce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd4:	2208      	movs	r2, #8
 8002fd6:	409a      	lsls	r2, r3
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe0:	f043 0201 	orr.w	r2, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fec:	2201      	movs	r2, #1
 8002fee:	409a      	lsls	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d012      	beq.n	800301e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00b      	beq.n	800301e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800300a:	2201      	movs	r2, #1
 800300c:	409a      	lsls	r2, r3
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003016:	f043 0202 	orr.w	r2, r3, #2
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003022:	2204      	movs	r2, #4
 8003024:	409a      	lsls	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4013      	ands	r3, r2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d012      	beq.n	8003054 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00b      	beq.n	8003054 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003040:	2204      	movs	r2, #4
 8003042:	409a      	lsls	r2, r3
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800304c:	f043 0204 	orr.w	r2, r3, #4
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003058:	2210      	movs	r2, #16
 800305a:	409a      	lsls	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4013      	ands	r3, r2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d043      	beq.n	80030ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d03c      	beq.n	80030ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003076:	2210      	movs	r2, #16
 8003078:	409a      	lsls	r2, r3
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d018      	beq.n	80030be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d108      	bne.n	80030ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d024      	beq.n	80030ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	4798      	blx	r3
 80030aa:	e01f      	b.n	80030ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d01b      	beq.n	80030ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	4798      	blx	r3
 80030bc:	e016      	b.n	80030ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d107      	bne.n	80030dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0208 	bic.w	r2, r2, #8
 80030da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f0:	2220      	movs	r2, #32
 80030f2:	409a      	lsls	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4013      	ands	r3, r2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 808f 	beq.w	800321c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0310 	and.w	r3, r3, #16
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 8087 	beq.w	800321c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003112:	2220      	movs	r2, #32
 8003114:	409a      	lsls	r2, r3
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b05      	cmp	r3, #5
 8003124:	d136      	bne.n	8003194 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0216 	bic.w	r2, r2, #22
 8003134:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695a      	ldr	r2, [r3, #20]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003144:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	2b00      	cmp	r3, #0
 800314c:	d103      	bne.n	8003156 <HAL_DMA_IRQHandler+0x1da>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003152:	2b00      	cmp	r3, #0
 8003154:	d007      	beq.n	8003166 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0208 	bic.w	r2, r2, #8
 8003164:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800316a:	223f      	movs	r2, #63	@ 0x3f
 800316c:	409a      	lsls	r2, r3
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003186:	2b00      	cmp	r3, #0
 8003188:	d07e      	beq.n	8003288 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	4798      	blx	r3
        }
        return;
 8003192:	e079      	b.n	8003288 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d01d      	beq.n	80031de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10d      	bne.n	80031cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d031      	beq.n	800321c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	4798      	blx	r3
 80031c0:	e02c      	b.n	800321c <HAL_DMA_IRQHandler+0x2a0>
 80031c2:	bf00      	nop
 80031c4:	20000000 	.word	0x20000000
 80031c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d023      	beq.n	800321c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	4798      	blx	r3
 80031dc:	e01e      	b.n	800321c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10f      	bne.n	800320c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0210 	bic.w	r2, r2, #16
 80031fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003220:	2b00      	cmp	r3, #0
 8003222:	d032      	beq.n	800328a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d022      	beq.n	8003276 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2205      	movs	r2, #5
 8003234:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0201 	bic.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	3301      	adds	r3, #1
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	429a      	cmp	r2, r3
 8003252:	d307      	bcc.n	8003264 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f2      	bne.n	8003248 <HAL_DMA_IRQHandler+0x2cc>
 8003262:	e000      	b.n	8003266 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003264:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	4798      	blx	r3
 8003286:	e000      	b.n	800328a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003288:	bf00      	nop
    }
  }
}
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
 800329c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80032ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b40      	cmp	r3, #64	@ 0x40
 80032bc:	d108      	bne.n	80032d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032ce:	e007      	b.n	80032e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68ba      	ldr	r2, [r7, #8]
 80032d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	60da      	str	r2, [r3, #12]
}
 80032e0:	bf00      	nop
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	3b10      	subs	r3, #16
 80032fc:	4a14      	ldr	r2, [pc, #80]	@ (8003350 <DMA_CalcBaseAndBitshift+0x64>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	091b      	lsrs	r3, r3, #4
 8003304:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003306:	4a13      	ldr	r2, [pc, #76]	@ (8003354 <DMA_CalcBaseAndBitshift+0x68>)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4413      	add	r3, r2
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	461a      	mov	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b03      	cmp	r3, #3
 8003318:	d909      	bls.n	800332e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003322:	f023 0303 	bic.w	r3, r3, #3
 8003326:	1d1a      	adds	r2, r3, #4
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	659a      	str	r2, [r3, #88]	@ 0x58
 800332c:	e007      	b.n	800333e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003336:	f023 0303 	bic.w	r3, r3, #3
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003342:	4618      	mov	r0, r3
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	aaaaaaab 	.word	0xaaaaaaab
 8003354:	08005bbc 	.word	0x08005bbc

08003358 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003368:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d11f      	bne.n	80033b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	2b03      	cmp	r3, #3
 8003376:	d856      	bhi.n	8003426 <DMA_CheckFifoParam+0xce>
 8003378:	a201      	add	r2, pc, #4	@ (adr r2, 8003380 <DMA_CheckFifoParam+0x28>)
 800337a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337e:	bf00      	nop
 8003380:	08003391 	.word	0x08003391
 8003384:	080033a3 	.word	0x080033a3
 8003388:	08003391 	.word	0x08003391
 800338c:	08003427 	.word	0x08003427
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003394:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d046      	beq.n	800342a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033a0:	e043      	b.n	800342a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033aa:	d140      	bne.n	800342e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033b0:	e03d      	b.n	800342e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033ba:	d121      	bne.n	8003400 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b03      	cmp	r3, #3
 80033c0:	d837      	bhi.n	8003432 <DMA_CheckFifoParam+0xda>
 80033c2:	a201      	add	r2, pc, #4	@ (adr r2, 80033c8 <DMA_CheckFifoParam+0x70>)
 80033c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c8:	080033d9 	.word	0x080033d9
 80033cc:	080033df 	.word	0x080033df
 80033d0:	080033d9 	.word	0x080033d9
 80033d4:	080033f1 	.word	0x080033f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	73fb      	strb	r3, [r7, #15]
      break;
 80033dc:	e030      	b.n	8003440 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d025      	beq.n	8003436 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ee:	e022      	b.n	8003436 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033f8:	d11f      	bne.n	800343a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033fe:	e01c      	b.n	800343a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d903      	bls.n	800340e <DMA_CheckFifoParam+0xb6>
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2b03      	cmp	r3, #3
 800340a:	d003      	beq.n	8003414 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800340c:	e018      	b.n	8003440 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	73fb      	strb	r3, [r7, #15]
      break;
 8003412:	e015      	b.n	8003440 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003418:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00e      	beq.n	800343e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	73fb      	strb	r3, [r7, #15]
      break;
 8003424:	e00b      	b.n	800343e <DMA_CheckFifoParam+0xe6>
      break;
 8003426:	bf00      	nop
 8003428:	e00a      	b.n	8003440 <DMA_CheckFifoParam+0xe8>
      break;
 800342a:	bf00      	nop
 800342c:	e008      	b.n	8003440 <DMA_CheckFifoParam+0xe8>
      break;
 800342e:	bf00      	nop
 8003430:	e006      	b.n	8003440 <DMA_CheckFifoParam+0xe8>
      break;
 8003432:	bf00      	nop
 8003434:	e004      	b.n	8003440 <DMA_CheckFifoParam+0xe8>
      break;
 8003436:	bf00      	nop
 8003438:	e002      	b.n	8003440 <DMA_CheckFifoParam+0xe8>
      break;   
 800343a:	bf00      	nop
 800343c:	e000      	b.n	8003440 <DMA_CheckFifoParam+0xe8>
      break;
 800343e:	bf00      	nop
    }
  } 
  
  return status; 
 8003440:	7bfb      	ldrb	r3, [r7, #15]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop

08003450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003450:	b480      	push	{r7}
 8003452:	b089      	sub	sp, #36	@ 0x24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800345a:	2300      	movs	r3, #0
 800345c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800345e:	2300      	movs	r3, #0
 8003460:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003462:	2300      	movs	r3, #0
 8003464:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
 800346a:	e165      	b.n	8003738 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800346c:	2201      	movs	r2, #1
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4013      	ands	r3, r2
 800347e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	429a      	cmp	r2, r3
 8003486:	f040 8154 	bne.w	8003732 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	2b01      	cmp	r3, #1
 8003494:	d005      	beq.n	80034a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d130      	bne.n	8003504 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	2203      	movs	r2, #3
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4013      	ands	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034d8:	2201      	movs	r2, #1
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4013      	ands	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	091b      	lsrs	r3, r3, #4
 80034ee:	f003 0201 	and.w	r2, r3, #1
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 0303 	and.w	r3, r3, #3
 800350c:	2b03      	cmp	r3, #3
 800350e:	d017      	beq.n	8003540 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	2203      	movs	r2, #3
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43db      	mvns	r3, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4313      	orrs	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 0303 	and.w	r3, r3, #3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d123      	bne.n	8003594 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	08da      	lsrs	r2, r3, #3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3208      	adds	r2, #8
 8003554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003558:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	220f      	movs	r2, #15
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4013      	ands	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4313      	orrs	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	08da      	lsrs	r2, r3, #3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3208      	adds	r2, #8
 800358e:	69b9      	ldr	r1, [r7, #24]
 8003590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	2203      	movs	r2, #3
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	43db      	mvns	r3, r3
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4013      	ands	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 0203 	and.w	r2, r3, #3
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4313      	orrs	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 80ae 	beq.w	8003732 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035d6:	2300      	movs	r3, #0
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	4b5d      	ldr	r3, [pc, #372]	@ (8003750 <HAL_GPIO_Init+0x300>)
 80035dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035de:	4a5c      	ldr	r2, [pc, #368]	@ (8003750 <HAL_GPIO_Init+0x300>)
 80035e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80035e6:	4b5a      	ldr	r3, [pc, #360]	@ (8003750 <HAL_GPIO_Init+0x300>)
 80035e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035f2:	4a58      	ldr	r2, [pc, #352]	@ (8003754 <HAL_GPIO_Init+0x304>)
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	089b      	lsrs	r3, r3, #2
 80035f8:	3302      	adds	r3, #2
 80035fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f003 0303 	and.w	r3, r3, #3
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	220f      	movs	r2, #15
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43db      	mvns	r3, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4013      	ands	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a4f      	ldr	r2, [pc, #316]	@ (8003758 <HAL_GPIO_Init+0x308>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d025      	beq.n	800366a <HAL_GPIO_Init+0x21a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a4e      	ldr	r2, [pc, #312]	@ (800375c <HAL_GPIO_Init+0x30c>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d01f      	beq.n	8003666 <HAL_GPIO_Init+0x216>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a4d      	ldr	r2, [pc, #308]	@ (8003760 <HAL_GPIO_Init+0x310>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d019      	beq.n	8003662 <HAL_GPIO_Init+0x212>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a4c      	ldr	r2, [pc, #304]	@ (8003764 <HAL_GPIO_Init+0x314>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d013      	beq.n	800365e <HAL_GPIO_Init+0x20e>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a4b      	ldr	r2, [pc, #300]	@ (8003768 <HAL_GPIO_Init+0x318>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d00d      	beq.n	800365a <HAL_GPIO_Init+0x20a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a4a      	ldr	r2, [pc, #296]	@ (800376c <HAL_GPIO_Init+0x31c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d007      	beq.n	8003656 <HAL_GPIO_Init+0x206>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a49      	ldr	r2, [pc, #292]	@ (8003770 <HAL_GPIO_Init+0x320>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d101      	bne.n	8003652 <HAL_GPIO_Init+0x202>
 800364e:	2306      	movs	r3, #6
 8003650:	e00c      	b.n	800366c <HAL_GPIO_Init+0x21c>
 8003652:	2307      	movs	r3, #7
 8003654:	e00a      	b.n	800366c <HAL_GPIO_Init+0x21c>
 8003656:	2305      	movs	r3, #5
 8003658:	e008      	b.n	800366c <HAL_GPIO_Init+0x21c>
 800365a:	2304      	movs	r3, #4
 800365c:	e006      	b.n	800366c <HAL_GPIO_Init+0x21c>
 800365e:	2303      	movs	r3, #3
 8003660:	e004      	b.n	800366c <HAL_GPIO_Init+0x21c>
 8003662:	2302      	movs	r3, #2
 8003664:	e002      	b.n	800366c <HAL_GPIO_Init+0x21c>
 8003666:	2301      	movs	r3, #1
 8003668:	e000      	b.n	800366c <HAL_GPIO_Init+0x21c>
 800366a:	2300      	movs	r3, #0
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	f002 0203 	and.w	r2, r2, #3
 8003672:	0092      	lsls	r2, r2, #2
 8003674:	4093      	lsls	r3, r2
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	4313      	orrs	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800367c:	4935      	ldr	r1, [pc, #212]	@ (8003754 <HAL_GPIO_Init+0x304>)
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	089b      	lsrs	r3, r3, #2
 8003682:	3302      	adds	r3, #2
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800368a:	4b3a      	ldr	r3, [pc, #232]	@ (8003774 <HAL_GPIO_Init+0x324>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	43db      	mvns	r3, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4013      	ands	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036ae:	4a31      	ldr	r2, [pc, #196]	@ (8003774 <HAL_GPIO_Init+0x324>)
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036b4:	4b2f      	ldr	r3, [pc, #188]	@ (8003774 <HAL_GPIO_Init+0x324>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	43db      	mvns	r3, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4013      	ands	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036d8:	4a26      	ldr	r2, [pc, #152]	@ (8003774 <HAL_GPIO_Init+0x324>)
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036de:	4b25      	ldr	r3, [pc, #148]	@ (8003774 <HAL_GPIO_Init+0x324>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	43db      	mvns	r3, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4013      	ands	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	4313      	orrs	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003702:	4a1c      	ldr	r2, [pc, #112]	@ (8003774 <HAL_GPIO_Init+0x324>)
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003708:	4b1a      	ldr	r3, [pc, #104]	@ (8003774 <HAL_GPIO_Init+0x324>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	43db      	mvns	r3, r3
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4013      	ands	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800372c:	4a11      	ldr	r2, [pc, #68]	@ (8003774 <HAL_GPIO_Init+0x324>)
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	3301      	adds	r3, #1
 8003736:	61fb      	str	r3, [r7, #28]
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	2b0f      	cmp	r3, #15
 800373c:	f67f ae96 	bls.w	800346c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003740:	bf00      	nop
 8003742:	bf00      	nop
 8003744:	3724      	adds	r7, #36	@ 0x24
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40023800 	.word	0x40023800
 8003754:	40013800 	.word	0x40013800
 8003758:	40020000 	.word	0x40020000
 800375c:	40020400 	.word	0x40020400
 8003760:	40020800 	.word	0x40020800
 8003764:	40020c00 	.word	0x40020c00
 8003768:	40021000 	.word	0x40021000
 800376c:	40021400 	.word	0x40021400
 8003770:	40021800 	.word	0x40021800
 8003774:	40013c00 	.word	0x40013c00

08003778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	807b      	strh	r3, [r7, #2]
 8003784:	4613      	mov	r3, r2
 8003786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003788:	787b      	ldrb	r3, [r7, #1]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800378e:	887a      	ldrh	r2, [r7, #2]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003794:	e003      	b.n	800379e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003796:	887b      	ldrh	r3, [r7, #2]
 8003798:	041a      	lsls	r2, r3, #16
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	619a      	str	r2, [r3, #24]
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
	...

080037ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80037b6:	2300      	movs	r3, #0
 80037b8:	603b      	str	r3, [r7, #0]
 80037ba:	4b20      	ldr	r3, [pc, #128]	@ (800383c <HAL_PWREx_EnableOverDrive+0x90>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037be:	4a1f      	ldr	r2, [pc, #124]	@ (800383c <HAL_PWREx_EnableOverDrive+0x90>)
 80037c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80037c6:	4b1d      	ldr	r3, [pc, #116]	@ (800383c <HAL_PWREx_EnableOverDrive+0x90>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ce:	603b      	str	r3, [r7, #0]
 80037d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80037d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003840 <HAL_PWREx_EnableOverDrive+0x94>)
 80037d4:	2201      	movs	r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037d8:	f7fe fc70 	bl	80020bc <HAL_GetTick>
 80037dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037de:	e009      	b.n	80037f4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037e0:	f7fe fc6c 	bl	80020bc <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80037ee:	d901      	bls.n	80037f4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e01f      	b.n	8003834 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037f4:	4b13      	ldr	r3, [pc, #76]	@ (8003844 <HAL_PWREx_EnableOverDrive+0x98>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003800:	d1ee      	bne.n	80037e0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003802:	4b11      	ldr	r3, [pc, #68]	@ (8003848 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003804:	2201      	movs	r2, #1
 8003806:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003808:	f7fe fc58 	bl	80020bc <HAL_GetTick>
 800380c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800380e:	e009      	b.n	8003824 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003810:	f7fe fc54 	bl	80020bc <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800381e:	d901      	bls.n	8003824 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e007      	b.n	8003834 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003824:	4b07      	ldr	r3, [pc, #28]	@ (8003844 <HAL_PWREx_EnableOverDrive+0x98>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800382c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003830:	d1ee      	bne.n	8003810 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40023800 	.word	0x40023800
 8003840:	420e0040 	.word	0x420e0040
 8003844:	40007000 	.word	0x40007000
 8003848:	420e0044 	.word	0x420e0044

0800384c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e0cc      	b.n	80039fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003860:	4b68      	ldr	r3, [pc, #416]	@ (8003a04 <HAL_RCC_ClockConfig+0x1b8>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 030f 	and.w	r3, r3, #15
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d90c      	bls.n	8003888 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386e:	4b65      	ldr	r3, [pc, #404]	@ (8003a04 <HAL_RCC_ClockConfig+0x1b8>)
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003876:	4b63      	ldr	r3, [pc, #396]	@ (8003a04 <HAL_RCC_ClockConfig+0x1b8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d001      	beq.n	8003888 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e0b8      	b.n	80039fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d020      	beq.n	80038d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d005      	beq.n	80038ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038a0:	4b59      	ldr	r3, [pc, #356]	@ (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	4a58      	ldr	r2, [pc, #352]	@ (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d005      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038b8:	4b53      	ldr	r3, [pc, #332]	@ (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	4a52      	ldr	r2, [pc, #328]	@ (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038c4:	4b50      	ldr	r3, [pc, #320]	@ (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	494d      	ldr	r1, [pc, #308]	@ (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d044      	beq.n	800396c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d107      	bne.n	80038fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ea:	4b47      	ldr	r3, [pc, #284]	@ (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d119      	bne.n	800392a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e07f      	b.n	80039fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d003      	beq.n	800390a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003906:	2b03      	cmp	r3, #3
 8003908:	d107      	bne.n	800391a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390a:	4b3f      	ldr	r3, [pc, #252]	@ (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d109      	bne.n	800392a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e06f      	b.n	80039fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e067      	b.n	80039fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800392a:	4b37      	ldr	r3, [pc, #220]	@ (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f023 0203 	bic.w	r2, r3, #3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	4934      	ldr	r1, [pc, #208]	@ (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 8003938:	4313      	orrs	r3, r2
 800393a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800393c:	f7fe fbbe 	bl	80020bc <HAL_GetTick>
 8003940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003942:	e00a      	b.n	800395a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003944:	f7fe fbba 	bl	80020bc <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003952:	4293      	cmp	r3, r2
 8003954:	d901      	bls.n	800395a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e04f      	b.n	80039fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395a:	4b2b      	ldr	r3, [pc, #172]	@ (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 020c 	and.w	r2, r3, #12
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	429a      	cmp	r2, r3
 800396a:	d1eb      	bne.n	8003944 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800396c:	4b25      	ldr	r3, [pc, #148]	@ (8003a04 <HAL_RCC_ClockConfig+0x1b8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 030f 	and.w	r3, r3, #15
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d20c      	bcs.n	8003994 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397a:	4b22      	ldr	r3, [pc, #136]	@ (8003a04 <HAL_RCC_ClockConfig+0x1b8>)
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003982:	4b20      	ldr	r3, [pc, #128]	@ (8003a04 <HAL_RCC_ClockConfig+0x1b8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d001      	beq.n	8003994 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e032      	b.n	80039fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b00      	cmp	r3, #0
 800399e:	d008      	beq.n	80039b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039a0:	4b19      	ldr	r3, [pc, #100]	@ (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	4916      	ldr	r1, [pc, #88]	@ (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d009      	beq.n	80039d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039be:	4b12      	ldr	r3, [pc, #72]	@ (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	490e      	ldr	r1, [pc, #56]	@ (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039d2:	f000 f821 	bl	8003a18 <HAL_RCC_GetSysClockFreq>
 80039d6:	4602      	mov	r2, r0
 80039d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003a08 <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	091b      	lsrs	r3, r3, #4
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	490a      	ldr	r1, [pc, #40]	@ (8003a0c <HAL_RCC_ClockConfig+0x1c0>)
 80039e4:	5ccb      	ldrb	r3, [r1, r3]
 80039e6:	fa22 f303 	lsr.w	r3, r2, r3
 80039ea:	4a09      	ldr	r2, [pc, #36]	@ (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 80039ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80039ee:	4b09      	ldr	r3, [pc, #36]	@ (8003a14 <HAL_RCC_ClockConfig+0x1c8>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fe fb1e 	bl	8002034 <HAL_InitTick>

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40023c00 	.word	0x40023c00
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	08005b9c 	.word	0x08005b9c
 8003a10:	20000000 	.word	0x20000000
 8003a14:	20000004 	.word	0x20000004

08003a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a1c:	b0ae      	sub	sp, #184	@ 0xb8
 8003a1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a3e:	4bcb      	ldr	r3, [pc, #812]	@ (8003d6c <HAL_RCC_GetSysClockFreq+0x354>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 030c 	and.w	r3, r3, #12
 8003a46:	2b0c      	cmp	r3, #12
 8003a48:	f200 8204 	bhi.w	8003e54 <HAL_RCC_GetSysClockFreq+0x43c>
 8003a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a54 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a52:	bf00      	nop
 8003a54:	08003a89 	.word	0x08003a89
 8003a58:	08003e55 	.word	0x08003e55
 8003a5c:	08003e55 	.word	0x08003e55
 8003a60:	08003e55 	.word	0x08003e55
 8003a64:	08003a91 	.word	0x08003a91
 8003a68:	08003e55 	.word	0x08003e55
 8003a6c:	08003e55 	.word	0x08003e55
 8003a70:	08003e55 	.word	0x08003e55
 8003a74:	08003a99 	.word	0x08003a99
 8003a78:	08003e55 	.word	0x08003e55
 8003a7c:	08003e55 	.word	0x08003e55
 8003a80:	08003e55 	.word	0x08003e55
 8003a84:	08003c89 	.word	0x08003c89
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a88:	4bb9      	ldr	r3, [pc, #740]	@ (8003d70 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a8e:	e1e5      	b.n	8003e5c <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a90:	4bb7      	ldr	r3, [pc, #732]	@ (8003d70 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a96:	e1e1      	b.n	8003e5c <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a98:	4bb4      	ldr	r3, [pc, #720]	@ (8003d6c <HAL_RCC_GetSysClockFreq+0x354>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003aa0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aa4:	4bb1      	ldr	r3, [pc, #708]	@ (8003d6c <HAL_RCC_GetSysClockFreq+0x354>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d071      	beq.n	8003b94 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ab0:	4bae      	ldr	r3, [pc, #696]	@ (8003d6c <HAL_RCC_GetSysClockFreq+0x354>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	099b      	lsrs	r3, r3, #6
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003abc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003ac0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003acc:	2300      	movs	r3, #0
 8003ace:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003ad2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003ad6:	4622      	mov	r2, r4
 8003ad8:	462b      	mov	r3, r5
 8003ada:	f04f 0000 	mov.w	r0, #0
 8003ade:	f04f 0100 	mov.w	r1, #0
 8003ae2:	0159      	lsls	r1, r3, #5
 8003ae4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ae8:	0150      	lsls	r0, r2, #5
 8003aea:	4602      	mov	r2, r0
 8003aec:	460b      	mov	r3, r1
 8003aee:	4621      	mov	r1, r4
 8003af0:	1a51      	subs	r1, r2, r1
 8003af2:	6439      	str	r1, [r7, #64]	@ 0x40
 8003af4:	4629      	mov	r1, r5
 8003af6:	eb63 0301 	sbc.w	r3, r3, r1
 8003afa:	647b      	str	r3, [r7, #68]	@ 0x44
 8003afc:	f04f 0200 	mov.w	r2, #0
 8003b00:	f04f 0300 	mov.w	r3, #0
 8003b04:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003b08:	4649      	mov	r1, r9
 8003b0a:	018b      	lsls	r3, r1, #6
 8003b0c:	4641      	mov	r1, r8
 8003b0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b12:	4641      	mov	r1, r8
 8003b14:	018a      	lsls	r2, r1, #6
 8003b16:	4641      	mov	r1, r8
 8003b18:	1a51      	subs	r1, r2, r1
 8003b1a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b1c:	4649      	mov	r1, r9
 8003b1e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	f04f 0300 	mov.w	r3, #0
 8003b2c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003b30:	4649      	mov	r1, r9
 8003b32:	00cb      	lsls	r3, r1, #3
 8003b34:	4641      	mov	r1, r8
 8003b36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b3a:	4641      	mov	r1, r8
 8003b3c:	00ca      	lsls	r2, r1, #3
 8003b3e:	4610      	mov	r0, r2
 8003b40:	4619      	mov	r1, r3
 8003b42:	4603      	mov	r3, r0
 8003b44:	4622      	mov	r2, r4
 8003b46:	189b      	adds	r3, r3, r2
 8003b48:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b4a:	462b      	mov	r3, r5
 8003b4c:	460a      	mov	r2, r1
 8003b4e:	eb42 0303 	adc.w	r3, r2, r3
 8003b52:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b60:	4629      	mov	r1, r5
 8003b62:	028b      	lsls	r3, r1, #10
 8003b64:	4621      	mov	r1, r4
 8003b66:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b6a:	4621      	mov	r1, r4
 8003b6c:	028a      	lsls	r2, r1, #10
 8003b6e:	4610      	mov	r0, r2
 8003b70:	4619      	mov	r1, r3
 8003b72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b76:	2200      	movs	r2, #0
 8003b78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b7c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b80:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003b84:	f7fc fb3e 	bl	8000204 <__aeabi_uldivmod>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b92:	e067      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b94:	4b75      	ldr	r3, [pc, #468]	@ (8003d6c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	099b      	lsrs	r3, r3, #6
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ba0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003ba4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bae:	2300      	movs	r3, #0
 8003bb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003bb2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003bb6:	4622      	mov	r2, r4
 8003bb8:	462b      	mov	r3, r5
 8003bba:	f04f 0000 	mov.w	r0, #0
 8003bbe:	f04f 0100 	mov.w	r1, #0
 8003bc2:	0159      	lsls	r1, r3, #5
 8003bc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bc8:	0150      	lsls	r0, r2, #5
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4621      	mov	r1, r4
 8003bd0:	1a51      	subs	r1, r2, r1
 8003bd2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003bd4:	4629      	mov	r1, r5
 8003bd6:	eb63 0301 	sbc.w	r3, r3, r1
 8003bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003be8:	4649      	mov	r1, r9
 8003bea:	018b      	lsls	r3, r1, #6
 8003bec:	4641      	mov	r1, r8
 8003bee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bf2:	4641      	mov	r1, r8
 8003bf4:	018a      	lsls	r2, r1, #6
 8003bf6:	4641      	mov	r1, r8
 8003bf8:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bfc:	4649      	mov	r1, r9
 8003bfe:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c02:	f04f 0200 	mov.w	r2, #0
 8003c06:	f04f 0300 	mov.w	r3, #0
 8003c0a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c0e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c16:	4692      	mov	sl, r2
 8003c18:	469b      	mov	fp, r3
 8003c1a:	4623      	mov	r3, r4
 8003c1c:	eb1a 0303 	adds.w	r3, sl, r3
 8003c20:	623b      	str	r3, [r7, #32]
 8003c22:	462b      	mov	r3, r5
 8003c24:	eb4b 0303 	adc.w	r3, fp, r3
 8003c28:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	f04f 0300 	mov.w	r3, #0
 8003c32:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003c36:	4629      	mov	r1, r5
 8003c38:	028b      	lsls	r3, r1, #10
 8003c3a:	4621      	mov	r1, r4
 8003c3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c40:	4621      	mov	r1, r4
 8003c42:	028a      	lsls	r2, r1, #10
 8003c44:	4610      	mov	r0, r2
 8003c46:	4619      	mov	r1, r3
 8003c48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c50:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c52:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003c56:	f7fc fad5 	bl	8000204 <__aeabi_uldivmod>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4613      	mov	r3, r2
 8003c60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c64:	4b41      	ldr	r3, [pc, #260]	@ (8003d6c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	0c1b      	lsrs	r3, r3, #16
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	3301      	adds	r3, #1
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003c76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c86:	e0e9      	b.n	8003e5c <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c88:	4b38      	ldr	r3, [pc, #224]	@ (8003d6c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c94:	4b35      	ldr	r3, [pc, #212]	@ (8003d6c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d069      	beq.n	8003d74 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ca0:	4b32      	ldr	r3, [pc, #200]	@ (8003d6c <HAL_RCC_GetSysClockFreq+0x354>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	099b      	lsrs	r3, r3, #6
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003caa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003cac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cb2:	663b      	str	r3, [r7, #96]	@ 0x60
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	667b      	str	r3, [r7, #100]	@ 0x64
 8003cb8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003cbc:	4622      	mov	r2, r4
 8003cbe:	462b      	mov	r3, r5
 8003cc0:	f04f 0000 	mov.w	r0, #0
 8003cc4:	f04f 0100 	mov.w	r1, #0
 8003cc8:	0159      	lsls	r1, r3, #5
 8003cca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cce:	0150      	lsls	r0, r2, #5
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4621      	mov	r1, r4
 8003cd6:	1a51      	subs	r1, r2, r1
 8003cd8:	61b9      	str	r1, [r7, #24]
 8003cda:	4629      	mov	r1, r5
 8003cdc:	eb63 0301 	sbc.w	r3, r3, r1
 8003ce0:	61fb      	str	r3, [r7, #28]
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003cee:	4659      	mov	r1, fp
 8003cf0:	018b      	lsls	r3, r1, #6
 8003cf2:	4651      	mov	r1, sl
 8003cf4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cf8:	4651      	mov	r1, sl
 8003cfa:	018a      	lsls	r2, r1, #6
 8003cfc:	4651      	mov	r1, sl
 8003cfe:	ebb2 0801 	subs.w	r8, r2, r1
 8003d02:	4659      	mov	r1, fp
 8003d04:	eb63 0901 	sbc.w	r9, r3, r1
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d14:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d18:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d1c:	4690      	mov	r8, r2
 8003d1e:	4699      	mov	r9, r3
 8003d20:	4623      	mov	r3, r4
 8003d22:	eb18 0303 	adds.w	r3, r8, r3
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	462b      	mov	r3, r5
 8003d2a:	eb49 0303 	adc.w	r3, r9, r3
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003d3c:	4629      	mov	r1, r5
 8003d3e:	028b      	lsls	r3, r1, #10
 8003d40:	4621      	mov	r1, r4
 8003d42:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d46:	4621      	mov	r1, r4
 8003d48:	028a      	lsls	r2, r1, #10
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d52:	2200      	movs	r2, #0
 8003d54:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d56:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003d58:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d5c:	f7fc fa52 	bl	8000204 <__aeabi_uldivmod>
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4613      	mov	r3, r2
 8003d66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d6a:	e063      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x41c>
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d74:	4b3d      	ldr	r3, [pc, #244]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x454>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	099b      	lsrs	r3, r3, #6
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	4611      	mov	r1, r2
 8003d80:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d84:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d86:	2300      	movs	r3, #0
 8003d88:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d8a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003d8e:	4642      	mov	r2, r8
 8003d90:	464b      	mov	r3, r9
 8003d92:	f04f 0000 	mov.w	r0, #0
 8003d96:	f04f 0100 	mov.w	r1, #0
 8003d9a:	0159      	lsls	r1, r3, #5
 8003d9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003da0:	0150      	lsls	r0, r2, #5
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4641      	mov	r1, r8
 8003da8:	1a51      	subs	r1, r2, r1
 8003daa:	60b9      	str	r1, [r7, #8]
 8003dac:	4649      	mov	r1, r9
 8003dae:	eb63 0301 	sbc.w	r3, r3, r1
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003dc0:	4659      	mov	r1, fp
 8003dc2:	018b      	lsls	r3, r1, #6
 8003dc4:	4651      	mov	r1, sl
 8003dc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dca:	4651      	mov	r1, sl
 8003dcc:	018a      	lsls	r2, r1, #6
 8003dce:	4651      	mov	r1, sl
 8003dd0:	1a54      	subs	r4, r2, r1
 8003dd2:	4659      	mov	r1, fp
 8003dd4:	eb63 0501 	sbc.w	r5, r3, r1
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	00eb      	lsls	r3, r5, #3
 8003de2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003de6:	00e2      	lsls	r2, r4, #3
 8003de8:	4614      	mov	r4, r2
 8003dea:	461d      	mov	r5, r3
 8003dec:	4643      	mov	r3, r8
 8003dee:	18e3      	adds	r3, r4, r3
 8003df0:	603b      	str	r3, [r7, #0]
 8003df2:	464b      	mov	r3, r9
 8003df4:	eb45 0303 	adc.w	r3, r5, r3
 8003df8:	607b      	str	r3, [r7, #4]
 8003dfa:	f04f 0200 	mov.w	r2, #0
 8003dfe:	f04f 0300 	mov.w	r3, #0
 8003e02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e06:	4629      	mov	r1, r5
 8003e08:	028b      	lsls	r3, r1, #10
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e10:	4621      	mov	r1, r4
 8003e12:	028a      	lsls	r2, r1, #10
 8003e14:	4610      	mov	r0, r2
 8003e16:	4619      	mov	r1, r3
 8003e18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e20:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003e22:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e26:	f7fc f9ed 	bl	8000204 <__aeabi_uldivmod>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	4613      	mov	r3, r2
 8003e30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003e34:	4b0d      	ldr	r3, [pc, #52]	@ (8003e6c <HAL_RCC_GetSysClockFreq+0x454>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	0f1b      	lsrs	r3, r3, #28
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003e42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e52:	e003      	b.n	8003e5c <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e54:	4b06      	ldr	r3, [pc, #24]	@ (8003e70 <HAL_RCC_GetSysClockFreq+0x458>)
 8003e56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	37b8      	adds	r7, #184	@ 0xb8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	00f42400 	.word	0x00f42400

08003e74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e28d      	b.n	80043a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 8083 	beq.w	8003f9a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e94:	4b94      	ldr	r3, [pc, #592]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 030c 	and.w	r3, r3, #12
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d019      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003ea0:	4b91      	ldr	r3, [pc, #580]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f003 030c 	and.w	r3, r3, #12
        || \
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d106      	bne.n	8003eba <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003eac:	4b8e      	ldr	r3, [pc, #568]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003eb8:	d00c      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eba:	4b8b      	ldr	r3, [pc, #556]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003ec2:	2b0c      	cmp	r3, #12
 8003ec4:	d112      	bne.n	8003eec <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ec6:	4b88      	ldr	r3, [pc, #544]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ece:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ed2:	d10b      	bne.n	8003eec <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed4:	4b84      	ldr	r3, [pc, #528]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d05b      	beq.n	8003f98 <HAL_RCC_OscConfig+0x124>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d157      	bne.n	8003f98 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e25a      	b.n	80043a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ef4:	d106      	bne.n	8003f04 <HAL_RCC_OscConfig+0x90>
 8003ef6:	4b7c      	ldr	r3, [pc, #496]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a7b      	ldr	r2, [pc, #492]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 8003efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	e01d      	b.n	8003f40 <HAL_RCC_OscConfig+0xcc>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f0c:	d10c      	bne.n	8003f28 <HAL_RCC_OscConfig+0xb4>
 8003f0e:	4b76      	ldr	r3, [pc, #472]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a75      	ldr	r2, [pc, #468]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 8003f14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	4b73      	ldr	r3, [pc, #460]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a72      	ldr	r2, [pc, #456]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 8003f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f24:	6013      	str	r3, [r2, #0]
 8003f26:	e00b      	b.n	8003f40 <HAL_RCC_OscConfig+0xcc>
 8003f28:	4b6f      	ldr	r3, [pc, #444]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a6e      	ldr	r2, [pc, #440]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 8003f2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f32:	6013      	str	r3, [r2, #0]
 8003f34:	4b6c      	ldr	r3, [pc, #432]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a6b      	ldr	r2, [pc, #428]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 8003f3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d013      	beq.n	8003f70 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f48:	f7fe f8b8 	bl	80020bc <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f50:	f7fe f8b4 	bl	80020bc <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b64      	cmp	r3, #100	@ 0x64
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e21f      	b.n	80043a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f62:	4b61      	ldr	r3, [pc, #388]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0f0      	beq.n	8003f50 <HAL_RCC_OscConfig+0xdc>
 8003f6e:	e014      	b.n	8003f9a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f70:	f7fe f8a4 	bl	80020bc <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f78:	f7fe f8a0 	bl	80020bc <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b64      	cmp	r3, #100	@ 0x64
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e20b      	b.n	80043a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f8a:	4b57      	ldr	r3, [pc, #348]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f0      	bne.n	8003f78 <HAL_RCC_OscConfig+0x104>
 8003f96:	e000      	b.n	8003f9a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d06f      	beq.n	8004086 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003fa6:	4b50      	ldr	r3, [pc, #320]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 030c 	and.w	r3, r3, #12
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d017      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003fb2:	4b4d      	ldr	r3, [pc, #308]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 030c 	and.w	r3, r3, #12
        || \
 8003fba:	2b08      	cmp	r3, #8
 8003fbc:	d105      	bne.n	8003fca <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003fbe:	4b4a      	ldr	r3, [pc, #296]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00b      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fca:	4b47      	ldr	r3, [pc, #284]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003fd2:	2b0c      	cmp	r3, #12
 8003fd4:	d11c      	bne.n	8004010 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fd6:	4b44      	ldr	r3, [pc, #272]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d116      	bne.n	8004010 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fe2:	4b41      	ldr	r3, [pc, #260]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d005      	beq.n	8003ffa <HAL_RCC_OscConfig+0x186>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d001      	beq.n	8003ffa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e1d3      	b.n	80043a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ffa:	4b3b      	ldr	r3, [pc, #236]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	4937      	ldr	r1, [pc, #220]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 800400a:	4313      	orrs	r3, r2
 800400c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800400e:	e03a      	b.n	8004086 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d020      	beq.n	800405a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004018:	4b34      	ldr	r3, [pc, #208]	@ (80040ec <HAL_RCC_OscConfig+0x278>)
 800401a:	2201      	movs	r2, #1
 800401c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401e:	f7fe f84d 	bl	80020bc <HAL_GetTick>
 8004022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004024:	e008      	b.n	8004038 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004026:	f7fe f849 	bl	80020bc <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e1b4      	b.n	80043a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004038:	4b2b      	ldr	r3, [pc, #172]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0f0      	beq.n	8004026 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004044:	4b28      	ldr	r3, [pc, #160]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	4925      	ldr	r1, [pc, #148]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 8004054:	4313      	orrs	r3, r2
 8004056:	600b      	str	r3, [r1, #0]
 8004058:	e015      	b.n	8004086 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800405a:	4b24      	ldr	r3, [pc, #144]	@ (80040ec <HAL_RCC_OscConfig+0x278>)
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004060:	f7fe f82c 	bl	80020bc <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004068:	f7fe f828 	bl	80020bc <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e193      	b.n	80043a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800407a:	4b1b      	ldr	r3, [pc, #108]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f0      	bne.n	8004068 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0308 	and.w	r3, r3, #8
 800408e:	2b00      	cmp	r3, #0
 8004090:	d036      	beq.n	8004100 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d016      	beq.n	80040c8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800409a:	4b15      	ldr	r3, [pc, #84]	@ (80040f0 <HAL_RCC_OscConfig+0x27c>)
 800409c:	2201      	movs	r2, #1
 800409e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a0:	f7fe f80c 	bl	80020bc <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040a8:	f7fe f808 	bl	80020bc <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e173      	b.n	80043a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ba:	4b0b      	ldr	r3, [pc, #44]	@ (80040e8 <HAL_RCC_OscConfig+0x274>)
 80040bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d0f0      	beq.n	80040a8 <HAL_RCC_OscConfig+0x234>
 80040c6:	e01b      	b.n	8004100 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040c8:	4b09      	ldr	r3, [pc, #36]	@ (80040f0 <HAL_RCC_OscConfig+0x27c>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ce:	f7fd fff5 	bl	80020bc <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d4:	e00e      	b.n	80040f4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040d6:	f7fd fff1 	bl	80020bc <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d907      	bls.n	80040f4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e15c      	b.n	80043a2 <HAL_RCC_OscConfig+0x52e>
 80040e8:	40023800 	.word	0x40023800
 80040ec:	42470000 	.word	0x42470000
 80040f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040f4:	4b8a      	ldr	r3, [pc, #552]	@ (8004320 <HAL_RCC_OscConfig+0x4ac>)
 80040f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1ea      	bne.n	80040d6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 8097 	beq.w	800423c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800410e:	2300      	movs	r3, #0
 8004110:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004112:	4b83      	ldr	r3, [pc, #524]	@ (8004320 <HAL_RCC_OscConfig+0x4ac>)
 8004114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10f      	bne.n	800413e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800411e:	2300      	movs	r3, #0
 8004120:	60bb      	str	r3, [r7, #8]
 8004122:	4b7f      	ldr	r3, [pc, #508]	@ (8004320 <HAL_RCC_OscConfig+0x4ac>)
 8004124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004126:	4a7e      	ldr	r2, [pc, #504]	@ (8004320 <HAL_RCC_OscConfig+0x4ac>)
 8004128:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800412c:	6413      	str	r3, [r2, #64]	@ 0x40
 800412e:	4b7c      	ldr	r3, [pc, #496]	@ (8004320 <HAL_RCC_OscConfig+0x4ac>)
 8004130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004136:	60bb      	str	r3, [r7, #8]
 8004138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800413a:	2301      	movs	r3, #1
 800413c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800413e:	4b79      	ldr	r3, [pc, #484]	@ (8004324 <HAL_RCC_OscConfig+0x4b0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004146:	2b00      	cmp	r3, #0
 8004148:	d118      	bne.n	800417c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800414a:	4b76      	ldr	r3, [pc, #472]	@ (8004324 <HAL_RCC_OscConfig+0x4b0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a75      	ldr	r2, [pc, #468]	@ (8004324 <HAL_RCC_OscConfig+0x4b0>)
 8004150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004156:	f7fd ffb1 	bl	80020bc <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800415e:	f7fd ffad 	bl	80020bc <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e118      	b.n	80043a2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004170:	4b6c      	ldr	r3, [pc, #432]	@ (8004324 <HAL_RCC_OscConfig+0x4b0>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0f0      	beq.n	800415e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d106      	bne.n	8004192 <HAL_RCC_OscConfig+0x31e>
 8004184:	4b66      	ldr	r3, [pc, #408]	@ (8004320 <HAL_RCC_OscConfig+0x4ac>)
 8004186:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004188:	4a65      	ldr	r2, [pc, #404]	@ (8004320 <HAL_RCC_OscConfig+0x4ac>)
 800418a:	f043 0301 	orr.w	r3, r3, #1
 800418e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004190:	e01c      	b.n	80041cc <HAL_RCC_OscConfig+0x358>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	2b05      	cmp	r3, #5
 8004198:	d10c      	bne.n	80041b4 <HAL_RCC_OscConfig+0x340>
 800419a:	4b61      	ldr	r3, [pc, #388]	@ (8004320 <HAL_RCC_OscConfig+0x4ac>)
 800419c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800419e:	4a60      	ldr	r2, [pc, #384]	@ (8004320 <HAL_RCC_OscConfig+0x4ac>)
 80041a0:	f043 0304 	orr.w	r3, r3, #4
 80041a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80041a6:	4b5e      	ldr	r3, [pc, #376]	@ (8004320 <HAL_RCC_OscConfig+0x4ac>)
 80041a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041aa:	4a5d      	ldr	r2, [pc, #372]	@ (8004320 <HAL_RCC_OscConfig+0x4ac>)
 80041ac:	f043 0301 	orr.w	r3, r3, #1
 80041b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80041b2:	e00b      	b.n	80041cc <HAL_RCC_OscConfig+0x358>
 80041b4:	4b5a      	ldr	r3, [pc, #360]	@ (8004320 <HAL_RCC_OscConfig+0x4ac>)
 80041b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b8:	4a59      	ldr	r2, [pc, #356]	@ (8004320 <HAL_RCC_OscConfig+0x4ac>)
 80041ba:	f023 0301 	bic.w	r3, r3, #1
 80041be:	6713      	str	r3, [r2, #112]	@ 0x70
 80041c0:	4b57      	ldr	r3, [pc, #348]	@ (8004320 <HAL_RCC_OscConfig+0x4ac>)
 80041c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c4:	4a56      	ldr	r2, [pc, #344]	@ (8004320 <HAL_RCC_OscConfig+0x4ac>)
 80041c6:	f023 0304 	bic.w	r3, r3, #4
 80041ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d015      	beq.n	8004200 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d4:	f7fd ff72 	bl	80020bc <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041da:	e00a      	b.n	80041f2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041dc:	f7fd ff6e 	bl	80020bc <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e0d7      	b.n	80043a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f2:	4b4b      	ldr	r3, [pc, #300]	@ (8004320 <HAL_RCC_OscConfig+0x4ac>)
 80041f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0ee      	beq.n	80041dc <HAL_RCC_OscConfig+0x368>
 80041fe:	e014      	b.n	800422a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004200:	f7fd ff5c 	bl	80020bc <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004206:	e00a      	b.n	800421e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004208:	f7fd ff58 	bl	80020bc <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004216:	4293      	cmp	r3, r2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e0c1      	b.n	80043a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800421e:	4b40      	ldr	r3, [pc, #256]	@ (8004320 <HAL_RCC_OscConfig+0x4ac>)
 8004220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1ee      	bne.n	8004208 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800422a:	7dfb      	ldrb	r3, [r7, #23]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d105      	bne.n	800423c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004230:	4b3b      	ldr	r3, [pc, #236]	@ (8004320 <HAL_RCC_OscConfig+0x4ac>)
 8004232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004234:	4a3a      	ldr	r2, [pc, #232]	@ (8004320 <HAL_RCC_OscConfig+0x4ac>)
 8004236:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800423a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 80ad 	beq.w	80043a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004246:	4b36      	ldr	r3, [pc, #216]	@ (8004320 <HAL_RCC_OscConfig+0x4ac>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 030c 	and.w	r3, r3, #12
 800424e:	2b08      	cmp	r3, #8
 8004250:	d060      	beq.n	8004314 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	2b02      	cmp	r3, #2
 8004258:	d145      	bne.n	80042e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800425a:	4b33      	ldr	r3, [pc, #204]	@ (8004328 <HAL_RCC_OscConfig+0x4b4>)
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004260:	f7fd ff2c 	bl	80020bc <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004268:	f7fd ff28 	bl	80020bc <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e093      	b.n	80043a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800427a:	4b29      	ldr	r3, [pc, #164]	@ (8004320 <HAL_RCC_OscConfig+0x4ac>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1f0      	bne.n	8004268 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69da      	ldr	r2, [r3, #28]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004294:	019b      	lsls	r3, r3, #6
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429c:	085b      	lsrs	r3, r3, #1
 800429e:	3b01      	subs	r3, #1
 80042a0:	041b      	lsls	r3, r3, #16
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a8:	061b      	lsls	r3, r3, #24
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b0:	071b      	lsls	r3, r3, #28
 80042b2:	491b      	ldr	r1, [pc, #108]	@ (8004320 <HAL_RCC_OscConfig+0x4ac>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004328 <HAL_RCC_OscConfig+0x4b4>)
 80042ba:	2201      	movs	r2, #1
 80042bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042be:	f7fd fefd 	bl	80020bc <HAL_GetTick>
 80042c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042c4:	e008      	b.n	80042d8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042c6:	f7fd fef9 	bl	80020bc <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e064      	b.n	80043a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d8:	4b11      	ldr	r3, [pc, #68]	@ (8004320 <HAL_RCC_OscConfig+0x4ac>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0f0      	beq.n	80042c6 <HAL_RCC_OscConfig+0x452>
 80042e4:	e05c      	b.n	80043a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e6:	4b10      	ldr	r3, [pc, #64]	@ (8004328 <HAL_RCC_OscConfig+0x4b4>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ec:	f7fd fee6 	bl	80020bc <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f4:	f7fd fee2 	bl	80020bc <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e04d      	b.n	80043a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004306:	4b06      	ldr	r3, [pc, #24]	@ (8004320 <HAL_RCC_OscConfig+0x4ac>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f0      	bne.n	80042f4 <HAL_RCC_OscConfig+0x480>
 8004312:	e045      	b.n	80043a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d107      	bne.n	800432c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e040      	b.n	80043a2 <HAL_RCC_OscConfig+0x52e>
 8004320:	40023800 	.word	0x40023800
 8004324:	40007000 	.word	0x40007000
 8004328:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800432c:	4b1f      	ldr	r3, [pc, #124]	@ (80043ac <HAL_RCC_OscConfig+0x538>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d030      	beq.n	800439c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004344:	429a      	cmp	r2, r3
 8004346:	d129      	bne.n	800439c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004352:	429a      	cmp	r2, r3
 8004354:	d122      	bne.n	800439c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800435c:	4013      	ands	r3, r2
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004362:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004364:	4293      	cmp	r3, r2
 8004366:	d119      	bne.n	800439c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004372:	085b      	lsrs	r3, r3, #1
 8004374:	3b01      	subs	r3, #1
 8004376:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004378:	429a      	cmp	r2, r3
 800437a:	d10f      	bne.n	800439c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004386:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004388:	429a      	cmp	r2, r3
 800438a:	d107      	bne.n	800439c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004396:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004398:	429a      	cmp	r2, r3
 800439a:	d001      	beq.n	80043a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e000      	b.n	80043a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40023800 	.word	0x40023800

080043b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e041      	b.n	8004446 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d106      	bne.n	80043dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7fd fa2c 	bl	8001834 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2202      	movs	r2, #2
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3304      	adds	r3, #4
 80043ec:	4619      	mov	r1, r3
 80043ee:	4610      	mov	r0, r2
 80043f0:	f000 fa88 	bl	8004904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b01      	cmp	r3, #1
 8004462:	d001      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e04e      	b.n	8004506 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 0201 	orr.w	r2, r2, #1
 800447e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a23      	ldr	r2, [pc, #140]	@ (8004514 <HAL_TIM_Base_Start_IT+0xc4>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d022      	beq.n	80044d0 <HAL_TIM_Base_Start_IT+0x80>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004492:	d01d      	beq.n	80044d0 <HAL_TIM_Base_Start_IT+0x80>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a1f      	ldr	r2, [pc, #124]	@ (8004518 <HAL_TIM_Base_Start_IT+0xc8>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d018      	beq.n	80044d0 <HAL_TIM_Base_Start_IT+0x80>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a1e      	ldr	r2, [pc, #120]	@ (800451c <HAL_TIM_Base_Start_IT+0xcc>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d013      	beq.n	80044d0 <HAL_TIM_Base_Start_IT+0x80>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a1c      	ldr	r2, [pc, #112]	@ (8004520 <HAL_TIM_Base_Start_IT+0xd0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00e      	beq.n	80044d0 <HAL_TIM_Base_Start_IT+0x80>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004524 <HAL_TIM_Base_Start_IT+0xd4>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d009      	beq.n	80044d0 <HAL_TIM_Base_Start_IT+0x80>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a19      	ldr	r2, [pc, #100]	@ (8004528 <HAL_TIM_Base_Start_IT+0xd8>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d004      	beq.n	80044d0 <HAL_TIM_Base_Start_IT+0x80>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a18      	ldr	r2, [pc, #96]	@ (800452c <HAL_TIM_Base_Start_IT+0xdc>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d111      	bne.n	80044f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b06      	cmp	r3, #6
 80044e0:	d010      	beq.n	8004504 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f042 0201 	orr.w	r2, r2, #1
 80044f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f2:	e007      	b.n	8004504 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	40010000 	.word	0x40010000
 8004518:	40000400 	.word	0x40000400
 800451c:	40000800 	.word	0x40000800
 8004520:	40000c00 	.word	0x40000c00
 8004524:	40010400 	.word	0x40010400
 8004528:	40014000 	.word	0x40014000
 800452c:	40001800 	.word	0x40001800

08004530 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d020      	beq.n	8004594 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01b      	beq.n	8004594 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f06f 0202 	mvn.w	r2, #2
 8004564:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f9a3 	bl	80048c6 <HAL_TIM_IC_CaptureCallback>
 8004580:	e005      	b.n	800458e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f995 	bl	80048b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f9a6 	bl	80048da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f003 0304 	and.w	r3, r3, #4
 800459a:	2b00      	cmp	r3, #0
 800459c:	d020      	beq.n	80045e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d01b      	beq.n	80045e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f06f 0204 	mvn.w	r2, #4
 80045b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2202      	movs	r2, #2
 80045b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f97d 	bl	80048c6 <HAL_TIM_IC_CaptureCallback>
 80045cc:	e005      	b.n	80045da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f96f 	bl	80048b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 f980 	bl	80048da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f003 0308 	and.w	r3, r3, #8
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d020      	beq.n	800462c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f003 0308 	and.w	r3, r3, #8
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d01b      	beq.n	800462c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f06f 0208 	mvn.w	r2, #8
 80045fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2204      	movs	r2, #4
 8004602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f957 	bl	80048c6 <HAL_TIM_IC_CaptureCallback>
 8004618:	e005      	b.n	8004626 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f949 	bl	80048b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f95a 	bl	80048da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f003 0310 	and.w	r3, r3, #16
 8004632:	2b00      	cmp	r3, #0
 8004634:	d020      	beq.n	8004678 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f003 0310 	and.w	r3, r3, #16
 800463c:	2b00      	cmp	r3, #0
 800463e:	d01b      	beq.n	8004678 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f06f 0210 	mvn.w	r2, #16
 8004648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2208      	movs	r2, #8
 800464e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f931 	bl	80048c6 <HAL_TIM_IC_CaptureCallback>
 8004664:	e005      	b.n	8004672 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f923 	bl	80048b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f934 	bl	80048da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00c      	beq.n	800469c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	d007      	beq.n	800469c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f06f 0201 	mvn.w	r2, #1
 8004694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f901 	bl	800489e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00c      	beq.n	80046c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d007      	beq.n	80046c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80046b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 faee 	bl	8004c9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00c      	beq.n	80046e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d007      	beq.n	80046e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f905 	bl	80048ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	f003 0320 	and.w	r3, r3, #32
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00c      	beq.n	8004708 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f003 0320 	and.w	r3, r3, #32
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d007      	beq.n	8004708 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f06f 0220 	mvn.w	r2, #32
 8004700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 fac0 	bl	8004c88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004708:	bf00      	nop
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800471a:	2300      	movs	r3, #0
 800471c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004724:	2b01      	cmp	r3, #1
 8004726:	d101      	bne.n	800472c <HAL_TIM_ConfigClockSource+0x1c>
 8004728:	2302      	movs	r3, #2
 800472a:	e0b4      	b.n	8004896 <HAL_TIM_ConfigClockSource+0x186>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800474a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004752:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004764:	d03e      	beq.n	80047e4 <HAL_TIM_ConfigClockSource+0xd4>
 8004766:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800476a:	f200 8087 	bhi.w	800487c <HAL_TIM_ConfigClockSource+0x16c>
 800476e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004772:	f000 8086 	beq.w	8004882 <HAL_TIM_ConfigClockSource+0x172>
 8004776:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800477a:	d87f      	bhi.n	800487c <HAL_TIM_ConfigClockSource+0x16c>
 800477c:	2b70      	cmp	r3, #112	@ 0x70
 800477e:	d01a      	beq.n	80047b6 <HAL_TIM_ConfigClockSource+0xa6>
 8004780:	2b70      	cmp	r3, #112	@ 0x70
 8004782:	d87b      	bhi.n	800487c <HAL_TIM_ConfigClockSource+0x16c>
 8004784:	2b60      	cmp	r3, #96	@ 0x60
 8004786:	d050      	beq.n	800482a <HAL_TIM_ConfigClockSource+0x11a>
 8004788:	2b60      	cmp	r3, #96	@ 0x60
 800478a:	d877      	bhi.n	800487c <HAL_TIM_ConfigClockSource+0x16c>
 800478c:	2b50      	cmp	r3, #80	@ 0x50
 800478e:	d03c      	beq.n	800480a <HAL_TIM_ConfigClockSource+0xfa>
 8004790:	2b50      	cmp	r3, #80	@ 0x50
 8004792:	d873      	bhi.n	800487c <HAL_TIM_ConfigClockSource+0x16c>
 8004794:	2b40      	cmp	r3, #64	@ 0x40
 8004796:	d058      	beq.n	800484a <HAL_TIM_ConfigClockSource+0x13a>
 8004798:	2b40      	cmp	r3, #64	@ 0x40
 800479a:	d86f      	bhi.n	800487c <HAL_TIM_ConfigClockSource+0x16c>
 800479c:	2b30      	cmp	r3, #48	@ 0x30
 800479e:	d064      	beq.n	800486a <HAL_TIM_ConfigClockSource+0x15a>
 80047a0:	2b30      	cmp	r3, #48	@ 0x30
 80047a2:	d86b      	bhi.n	800487c <HAL_TIM_ConfigClockSource+0x16c>
 80047a4:	2b20      	cmp	r3, #32
 80047a6:	d060      	beq.n	800486a <HAL_TIM_ConfigClockSource+0x15a>
 80047a8:	2b20      	cmp	r3, #32
 80047aa:	d867      	bhi.n	800487c <HAL_TIM_ConfigClockSource+0x16c>
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d05c      	beq.n	800486a <HAL_TIM_ConfigClockSource+0x15a>
 80047b0:	2b10      	cmp	r3, #16
 80047b2:	d05a      	beq.n	800486a <HAL_TIM_ConfigClockSource+0x15a>
 80047b4:	e062      	b.n	800487c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047c6:	f000 f9c3 	bl	8004b50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80047d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	609a      	str	r2, [r3, #8]
      break;
 80047e2:	e04f      	b.n	8004884 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047f4:	f000 f9ac 	bl	8004b50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004806:	609a      	str	r2, [r3, #8]
      break;
 8004808:	e03c      	b.n	8004884 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004816:	461a      	mov	r2, r3
 8004818:	f000 f920 	bl	8004a5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2150      	movs	r1, #80	@ 0x50
 8004822:	4618      	mov	r0, r3
 8004824:	f000 f979 	bl	8004b1a <TIM_ITRx_SetConfig>
      break;
 8004828:	e02c      	b.n	8004884 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004836:	461a      	mov	r2, r3
 8004838:	f000 f93f 	bl	8004aba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2160      	movs	r1, #96	@ 0x60
 8004842:	4618      	mov	r0, r3
 8004844:	f000 f969 	bl	8004b1a <TIM_ITRx_SetConfig>
      break;
 8004848:	e01c      	b.n	8004884 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004856:	461a      	mov	r2, r3
 8004858:	f000 f900 	bl	8004a5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2140      	movs	r1, #64	@ 0x40
 8004862:	4618      	mov	r0, r3
 8004864:	f000 f959 	bl	8004b1a <TIM_ITRx_SetConfig>
      break;
 8004868:	e00c      	b.n	8004884 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4619      	mov	r1, r3
 8004874:	4610      	mov	r0, r2
 8004876:	f000 f950 	bl	8004b1a <TIM_ITRx_SetConfig>
      break;
 800487a:	e003      	b.n	8004884 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	73fb      	strb	r3, [r7, #15]
      break;
 8004880:	e000      	b.n	8004884 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004882:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004894:	7bfb      	ldrb	r3, [r7, #15]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
	...

08004904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a46      	ldr	r2, [pc, #280]	@ (8004a30 <TIM_Base_SetConfig+0x12c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d013      	beq.n	8004944 <TIM_Base_SetConfig+0x40>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004922:	d00f      	beq.n	8004944 <TIM_Base_SetConfig+0x40>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a43      	ldr	r2, [pc, #268]	@ (8004a34 <TIM_Base_SetConfig+0x130>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d00b      	beq.n	8004944 <TIM_Base_SetConfig+0x40>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a42      	ldr	r2, [pc, #264]	@ (8004a38 <TIM_Base_SetConfig+0x134>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d007      	beq.n	8004944 <TIM_Base_SetConfig+0x40>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a41      	ldr	r2, [pc, #260]	@ (8004a3c <TIM_Base_SetConfig+0x138>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d003      	beq.n	8004944 <TIM_Base_SetConfig+0x40>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a40      	ldr	r2, [pc, #256]	@ (8004a40 <TIM_Base_SetConfig+0x13c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d108      	bne.n	8004956 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800494a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a35      	ldr	r2, [pc, #212]	@ (8004a30 <TIM_Base_SetConfig+0x12c>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d02b      	beq.n	80049b6 <TIM_Base_SetConfig+0xb2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004964:	d027      	beq.n	80049b6 <TIM_Base_SetConfig+0xb2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a32      	ldr	r2, [pc, #200]	@ (8004a34 <TIM_Base_SetConfig+0x130>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d023      	beq.n	80049b6 <TIM_Base_SetConfig+0xb2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a31      	ldr	r2, [pc, #196]	@ (8004a38 <TIM_Base_SetConfig+0x134>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d01f      	beq.n	80049b6 <TIM_Base_SetConfig+0xb2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a30      	ldr	r2, [pc, #192]	@ (8004a3c <TIM_Base_SetConfig+0x138>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d01b      	beq.n	80049b6 <TIM_Base_SetConfig+0xb2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a2f      	ldr	r2, [pc, #188]	@ (8004a40 <TIM_Base_SetConfig+0x13c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d017      	beq.n	80049b6 <TIM_Base_SetConfig+0xb2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a2e      	ldr	r2, [pc, #184]	@ (8004a44 <TIM_Base_SetConfig+0x140>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d013      	beq.n	80049b6 <TIM_Base_SetConfig+0xb2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a2d      	ldr	r2, [pc, #180]	@ (8004a48 <TIM_Base_SetConfig+0x144>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d00f      	beq.n	80049b6 <TIM_Base_SetConfig+0xb2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a2c      	ldr	r2, [pc, #176]	@ (8004a4c <TIM_Base_SetConfig+0x148>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00b      	beq.n	80049b6 <TIM_Base_SetConfig+0xb2>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a2b      	ldr	r2, [pc, #172]	@ (8004a50 <TIM_Base_SetConfig+0x14c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d007      	beq.n	80049b6 <TIM_Base_SetConfig+0xb2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004a54 <TIM_Base_SetConfig+0x150>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d003      	beq.n	80049b6 <TIM_Base_SetConfig+0xb2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a29      	ldr	r2, [pc, #164]	@ (8004a58 <TIM_Base_SetConfig+0x154>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d108      	bne.n	80049c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a10      	ldr	r2, [pc, #64]	@ (8004a30 <TIM_Base_SetConfig+0x12c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d003      	beq.n	80049fc <TIM_Base_SetConfig+0xf8>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a12      	ldr	r2, [pc, #72]	@ (8004a40 <TIM_Base_SetConfig+0x13c>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d103      	bne.n	8004a04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	691a      	ldr	r2, [r3, #16]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d105      	bne.n	8004a22 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f023 0201 	bic.w	r2, r3, #1
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	611a      	str	r2, [r3, #16]
  }
}
 8004a22:	bf00      	nop
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	40010000 	.word	0x40010000
 8004a34:	40000400 	.word	0x40000400
 8004a38:	40000800 	.word	0x40000800
 8004a3c:	40000c00 	.word	0x40000c00
 8004a40:	40010400 	.word	0x40010400
 8004a44:	40014000 	.word	0x40014000
 8004a48:	40014400 	.word	0x40014400
 8004a4c:	40014800 	.word	0x40014800
 8004a50:	40001800 	.word	0x40001800
 8004a54:	40001c00 	.word	0x40001c00
 8004a58:	40002000 	.word	0x40002000

08004a5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	f023 0201 	bic.w	r2, r3, #1
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f023 030a 	bic.w	r3, r3, #10
 8004a98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	621a      	str	r2, [r3, #32]
}
 8004aae:	bf00      	nop
 8004ab0:	371c      	adds	r7, #28
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b087      	sub	sp, #28
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	60f8      	str	r0, [r7, #12]
 8004ac2:	60b9      	str	r1, [r7, #8]
 8004ac4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	f023 0210 	bic.w	r2, r3, #16
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ae4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	031b      	lsls	r3, r3, #12
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004af6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	011b      	lsls	r3, r3, #4
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	621a      	str	r2, [r3, #32]
}
 8004b0e:	bf00      	nop
 8004b10:	371c      	adds	r7, #28
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b085      	sub	sp, #20
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
 8004b22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f043 0307 	orr.w	r3, r3, #7
 8004b3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	609a      	str	r2, [r3, #8]
}
 8004b44:	bf00      	nop
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	021a      	lsls	r2, r3, #8
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	431a      	orrs	r2, r3
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	609a      	str	r2, [r3, #8]
}
 8004b84:	bf00      	nop
 8004b86:	371c      	adds	r7, #28
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e05a      	b.n	8004c5e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a21      	ldr	r2, [pc, #132]	@ (8004c6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d022      	beq.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bf4:	d01d      	beq.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a1d      	ldr	r2, [pc, #116]	@ (8004c70 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d018      	beq.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a1b      	ldr	r2, [pc, #108]	@ (8004c74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d013      	beq.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8004c78 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d00e      	beq.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a18      	ldr	r2, [pc, #96]	@ (8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d009      	beq.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a17      	ldr	r2, [pc, #92]	@ (8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d004      	beq.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a15      	ldr	r2, [pc, #84]	@ (8004c84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d10c      	bne.n	8004c4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40010000 	.word	0x40010000
 8004c70:	40000400 	.word	0x40000400
 8004c74:	40000800 	.word	0x40000800
 8004c78:	40000c00 	.word	0x40000c00
 8004c7c:	40010400 	.word	0x40010400
 8004c80:	40014000 	.word	0x40014000
 8004c84:	40001800 	.word	0x40001800

08004c88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <LL_GPIO_SetPinMode>:
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b08b      	sub	sp, #44	@ 0x2c
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	fa93 f3a3 	rbit	r3, r3
 8004cca:	613b      	str	r3, [r7, #16]
  return result;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8004cd6:	2320      	movs	r3, #32
 8004cd8:	e003      	b.n	8004ce2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	fab3 f383 	clz	r3, r3
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	2103      	movs	r1, #3
 8004ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cea:	43db      	mvns	r3, r3
 8004cec:	401a      	ands	r2, r3
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	fa93 f3a3 	rbit	r3, r3
 8004cf8:	61fb      	str	r3, [r7, #28]
  return result;
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8004d04:	2320      	movs	r3, #32
 8004d06:	e003      	b.n	8004d10 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8004d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0a:	fab3 f383 	clz	r3, r3
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	fa01 f303 	lsl.w	r3, r1, r3
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	601a      	str	r2, [r3, #0]
}
 8004d1e:	bf00      	nop
 8004d20:	372c      	adds	r7, #44	@ 0x2c
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <LL_GPIO_SetPinOutputType>:
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b085      	sub	sp, #20
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	60f8      	str	r0, [r7, #12]
 8004d32:	60b9      	str	r1, [r7, #8]
 8004d34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	401a      	ands	r2, r3
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	fb01 f303 	mul.w	r3, r1, r3
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	605a      	str	r2, [r3, #4]
}
 8004d4e:	bf00      	nop
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <LL_GPIO_SetPinSpeed>:
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b08b      	sub	sp, #44	@ 0x2c
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	689a      	ldr	r2, [r3, #8]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	fa93 f3a3 	rbit	r3, r3
 8004d74:	613b      	str	r3, [r7, #16]
  return result;
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8004d80:	2320      	movs	r3, #32
 8004d82:	e003      	b.n	8004d8c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	fab3 f383 	clz	r3, r3
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	2103      	movs	r1, #3
 8004d90:	fa01 f303 	lsl.w	r3, r1, r3
 8004d94:	43db      	mvns	r3, r3
 8004d96:	401a      	ands	r2, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	fa93 f3a3 	rbit	r3, r3
 8004da2:	61fb      	str	r3, [r7, #28]
  return result;
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8004dae:	2320      	movs	r3, #32
 8004db0:	e003      	b.n	8004dba <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8004db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db4:	fab3 f383 	clz	r3, r3
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	005b      	lsls	r3, r3, #1
 8004dbc:	6879      	ldr	r1, [r7, #4]
 8004dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	609a      	str	r2, [r3, #8]
}
 8004dc8:	bf00      	nop
 8004dca:	372c      	adds	r7, #44	@ 0x2c
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <LL_GPIO_SetPinPull>:
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b08b      	sub	sp, #44	@ 0x2c
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	fa93 f3a3 	rbit	r3, r3
 8004dee:	613b      	str	r3, [r7, #16]
  return result;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8004dfa:	2320      	movs	r3, #32
 8004dfc:	e003      	b.n	8004e06 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	fab3 f383 	clz	r3, r3
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	005b      	lsls	r3, r3, #1
 8004e08:	2103      	movs	r1, #3
 8004e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e0e:	43db      	mvns	r3, r3
 8004e10:	401a      	ands	r2, r3
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	fa93 f3a3 	rbit	r3, r3
 8004e1c:	61fb      	str	r3, [r7, #28]
  return result;
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8004e28:	2320      	movs	r3, #32
 8004e2a:	e003      	b.n	8004e34 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2e:	fab3 f383 	clz	r3, r3
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	6879      	ldr	r1, [r7, #4]
 8004e38:	fa01 f303 	lsl.w	r3, r1, r3
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	60da      	str	r2, [r3, #12]
}
 8004e42:	bf00      	nop
 8004e44:	372c      	adds	r7, #44	@ 0x2c
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <LL_GPIO_SetAFPin_0_7>:
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b08b      	sub	sp, #44	@ 0x2c
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	60f8      	str	r0, [r7, #12]
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a1a      	ldr	r2, [r3, #32]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	fa93 f3a3 	rbit	r3, r3
 8004e68:	613b      	str	r3, [r7, #16]
  return result;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8004e74:	2320      	movs	r3, #32
 8004e76:	e003      	b.n	8004e80 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	fab3 f383 	clz	r3, r3
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	210f      	movs	r1, #15
 8004e84:	fa01 f303 	lsl.w	r3, r1, r3
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	401a      	ands	r2, r3
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	fa93 f3a3 	rbit	r3, r3
 8004e96:	61fb      	str	r3, [r7, #28]
  return result;
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8004ea2:	2320      	movs	r3, #32
 8004ea4:	e003      	b.n	8004eae <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea8:	fab3 f383 	clz	r3, r3
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	6879      	ldr	r1, [r7, #4]
 8004eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	621a      	str	r2, [r3, #32]
}
 8004ebc:	bf00      	nop
 8004ebe:	372c      	adds	r7, #44	@ 0x2c
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <LL_GPIO_SetAFPin_8_15>:
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b08b      	sub	sp, #44	@ 0x2c
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	0a1b      	lsrs	r3, r3, #8
 8004edc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	fa93 f3a3 	rbit	r3, r3
 8004ee4:	613b      	str	r3, [r7, #16]
  return result;
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8004ef0:	2320      	movs	r3, #32
 8004ef2:	e003      	b.n	8004efc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	fab3 f383 	clz	r3, r3
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	210f      	movs	r1, #15
 8004f00:	fa01 f303 	lsl.w	r3, r1, r3
 8004f04:	43db      	mvns	r3, r3
 8004f06:	401a      	ands	r2, r3
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	0a1b      	lsrs	r3, r3, #8
 8004f0c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0e:	6a3b      	ldr	r3, [r7, #32]
 8004f10:	fa93 f3a3 	rbit	r3, r3
 8004f14:	61fb      	str	r3, [r7, #28]
  return result;
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8004f20:	2320      	movs	r3, #32
 8004f22:	e003      	b.n	8004f2c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8004f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f26:	fab3 f383 	clz	r3, r3
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	6879      	ldr	r1, [r7, #4]
 8004f30:	fa01 f303 	lsl.w	r3, r1, r3
 8004f34:	431a      	orrs	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004f3a:	bf00      	nop
 8004f3c:	372c      	adds	r7, #44	@ 0x2c
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b08a      	sub	sp, #40	@ 0x28
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	fa93 f3a3 	rbit	r3, r3
 8004f64:	617b      	str	r3, [r7, #20]
  return result;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <LL_GPIO_Init+0x2e>
    return 32U;
 8004f70:	2320      	movs	r3, #32
 8004f72:	e003      	b.n	8004f7c <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	fab3 f383 	clz	r3, r3
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004f7e:	e057      	b.n	8005030 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	2101      	movs	r1, #1
 8004f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f88:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8004f90:	6a3b      	ldr	r3, [r7, #32]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d049      	beq.n	800502a <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d003      	beq.n	8004fa6 <LL_GPIO_Init+0x60>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d10d      	bne.n	8004fc2 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	461a      	mov	r2, r3
 8004fac:	6a39      	ldr	r1, [r7, #32]
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7ff fed3 	bl	8004d5a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	6a39      	ldr	r1, [r7, #32]
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7ff feb4 	bl	8004d2a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	6a39      	ldr	r1, [r7, #32]
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff ff02 	bl	8004dd4 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d121      	bne.n	800501c <LL_GPIO_Init+0xd6>
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	fa93 f3a3 	rbit	r3, r3
 8004fe2:	60bb      	str	r3, [r7, #8]
  return result;
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <LL_GPIO_Init+0xac>
    return 32U;
 8004fee:	2320      	movs	r3, #32
 8004ff0:	e003      	b.n	8004ffa <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	fab3 f383 	clz	r3, r3
 8004ff8:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004ffa:	2b07      	cmp	r3, #7
 8004ffc:	d807      	bhi.n	800500e <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	461a      	mov	r2, r3
 8005004:	6a39      	ldr	r1, [r7, #32]
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7ff ff21 	bl	8004e4e <LL_GPIO_SetAFPin_0_7>
 800500c:	e006      	b.n	800501c <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	461a      	mov	r2, r3
 8005014:	6a39      	ldr	r1, [r7, #32]
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7ff ff56 	bl	8004ec8 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	461a      	mov	r2, r3
 8005022:	6a39      	ldr	r1, [r7, #32]
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7ff fe43 	bl	8004cb0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800502a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502c:	3301      	adds	r3, #1
 800502e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005036:	fa22 f303 	lsr.w	r3, r2, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1a0      	bne.n	8004f80 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3728      	adds	r7, #40	@ 0x28
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800504c:	4b04      	ldr	r3, [pc, #16]	@ (8005060 <LL_RCC_GetSysClkSource+0x18>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f003 030c 	and.w	r3, r3, #12
}
 8005054:	4618      	mov	r0, r3
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	40023800 	.word	0x40023800

08005064 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005068:	4b04      	ldr	r3, [pc, #16]	@ (800507c <LL_RCC_GetAHBPrescaler+0x18>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005070:	4618      	mov	r0, r3
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	40023800 	.word	0x40023800

08005080 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005084:	4b04      	ldr	r3, [pc, #16]	@ (8005098 <LL_RCC_GetAPB1Prescaler+0x18>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 800508c:	4618      	mov	r0, r3
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	40023800 	.word	0x40023800

0800509c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800509c:	b480      	push	{r7}
 800509e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80050a0:	4b04      	ldr	r3, [pc, #16]	@ (80050b4 <LL_RCC_GetAPB2Prescaler+0x18>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	40023800 	.word	0x40023800

080050b8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80050bc:	4b04      	ldr	r3, [pc, #16]	@ (80050d0 <LL_RCC_PLL_GetMainSource+0x18>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	40023800 	.word	0x40023800

080050d4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80050d8:	4b04      	ldr	r3, [pc, #16]	@ (80050ec <LL_RCC_PLL_GetN+0x18>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	099b      	lsrs	r3, r3, #6
 80050de:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	40023800 	.word	0x40023800

080050f0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80050f0:	b480      	push	{r7}
 80050f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80050f4:	4b04      	ldr	r3, [pc, #16]	@ (8005108 <LL_RCC_PLL_GetP+0x18>)
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40023800 	.word	0x40023800

0800510c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005110:	4b04      	ldr	r3, [pc, #16]	@ (8005124 <LL_RCC_PLL_GetR+0x18>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
 8005118:	4618      	mov	r0, r3
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	40023800 	.word	0x40023800

08005128 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005128:	b480      	push	{r7}
 800512a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800512c:	4b04      	ldr	r3, [pc, #16]	@ (8005140 <LL_RCC_PLL_GetDivider+0x18>)
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8005134:	4618      	mov	r0, r3
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	40023800 	.word	0x40023800

08005144 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800514c:	f000 f820 	bl	8005190 <RCC_GetSystemClockFreq>
 8005150:	4602      	mov	r2, r0
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4618      	mov	r0, r3
 800515c:	f000 f85a 	bl	8005214 <RCC_GetHCLKClockFreq>
 8005160:	4602      	mov	r2, r0
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	4618      	mov	r0, r3
 800516c:	f000 f868 	bl	8005240 <RCC_GetPCLK1ClockFreq>
 8005170:	4602      	mov	r2, r0
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	4618      	mov	r0, r3
 800517c:	f000 f874 	bl	8005268 <RCC_GetPCLK2ClockFreq>
 8005180:	4602      	mov	r2, r0
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	60da      	str	r2, [r3, #12]
}
 8005186:	bf00      	nop
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800519a:	f7ff ff55 	bl	8005048 <LL_RCC_GetSysClkSource>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b0c      	cmp	r3, #12
 80051a2:	d82d      	bhi.n	8005200 <RCC_GetSystemClockFreq+0x70>
 80051a4:	a201      	add	r2, pc, #4	@ (adr r2, 80051ac <RCC_GetSystemClockFreq+0x1c>)
 80051a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051aa:	bf00      	nop
 80051ac:	080051e1 	.word	0x080051e1
 80051b0:	08005201 	.word	0x08005201
 80051b4:	08005201 	.word	0x08005201
 80051b8:	08005201 	.word	0x08005201
 80051bc:	080051e7 	.word	0x080051e7
 80051c0:	08005201 	.word	0x08005201
 80051c4:	08005201 	.word	0x08005201
 80051c8:	08005201 	.word	0x08005201
 80051cc:	080051ed 	.word	0x080051ed
 80051d0:	08005201 	.word	0x08005201
 80051d4:	08005201 	.word	0x08005201
 80051d8:	08005201 	.word	0x08005201
 80051dc:	080051f7 	.word	0x080051f7
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80051e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005210 <RCC_GetSystemClockFreq+0x80>)
 80051e2:	607b      	str	r3, [r7, #4]
      break;
 80051e4:	e00f      	b.n	8005206 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80051e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005210 <RCC_GetSystemClockFreq+0x80>)
 80051e8:	607b      	str	r3, [r7, #4]
      break;
 80051ea:	e00c      	b.n	8005206 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80051ec:	2008      	movs	r0, #8
 80051ee:	f000 f84f 	bl	8005290 <RCC_PLL_GetFreqDomain_SYS>
 80051f2:	6078      	str	r0, [r7, #4]
      break;
 80051f4:	e007      	b.n	8005206 <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 80051f6:	200c      	movs	r0, #12
 80051f8:	f000 f84a 	bl	8005290 <RCC_PLL_GetFreqDomain_SYS>
 80051fc:	6078      	str	r0, [r7, #4]
      break;
 80051fe:	e002      	b.n	8005206 <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8005200:	4b03      	ldr	r3, [pc, #12]	@ (8005210 <RCC_GetSystemClockFreq+0x80>)
 8005202:	607b      	str	r3, [r7, #4]
      break;
 8005204:	bf00      	nop
  }

  return frequency;
 8005206:	687b      	ldr	r3, [r7, #4]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	00f42400 	.word	0x00f42400

08005214 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800521c:	f7ff ff22 	bl	8005064 <LL_RCC_GetAHBPrescaler>
 8005220:	4603      	mov	r3, r0
 8005222:	091b      	lsrs	r3, r3, #4
 8005224:	f003 030f 	and.w	r3, r3, #15
 8005228:	4a04      	ldr	r2, [pc, #16]	@ (800523c <RCC_GetHCLKClockFreq+0x28>)
 800522a:	5cd3      	ldrb	r3, [r2, r3]
 800522c:	461a      	mov	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	40d3      	lsrs	r3, r2
}
 8005232:	4618      	mov	r0, r3
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	08005b9c 	.word	0x08005b9c

08005240 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005248:	f7ff ff1a 	bl	8005080 <LL_RCC_GetAPB1Prescaler>
 800524c:	4603      	mov	r3, r0
 800524e:	0a9b      	lsrs	r3, r3, #10
 8005250:	4a04      	ldr	r2, [pc, #16]	@ (8005264 <RCC_GetPCLK1ClockFreq+0x24>)
 8005252:	5cd3      	ldrb	r3, [r2, r3]
 8005254:	461a      	mov	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	40d3      	lsrs	r3, r2
}
 800525a:	4618      	mov	r0, r3
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	08005bac 	.word	0x08005bac

08005268 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005270:	f7ff ff14 	bl	800509c <LL_RCC_GetAPB2Prescaler>
 8005274:	4603      	mov	r3, r0
 8005276:	0b5b      	lsrs	r3, r3, #13
 8005278:	4a04      	ldr	r2, [pc, #16]	@ (800528c <RCC_GetPCLK2ClockFreq+0x24>)
 800527a:	5cd3      	ldrb	r3, [r2, r3]
 800527c:	461a      	mov	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	40d3      	lsrs	r3, r2
}
 8005282:	4618      	mov	r0, r3
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	08005bac 	.word	0x08005bac

08005290 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8005290:	b590      	push	{r4, r7, lr}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8005298:	2300      	movs	r3, #0
 800529a:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 800529c:	2300      	movs	r3, #0
 800529e:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80052a4:	f7ff ff08 	bl	80050b8 <LL_RCC_PLL_GetMainSource>
 80052a8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d004      	beq.n	80052ba <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052b6:	d003      	beq.n	80052c0 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80052b8:	e005      	b.n	80052c6 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80052ba:	4b1c      	ldr	r3, [pc, #112]	@ (800532c <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 80052bc:	617b      	str	r3, [r7, #20]
      break;
 80052be:	e005      	b.n	80052cc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80052c0:	4b1a      	ldr	r3, [pc, #104]	@ (800532c <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 80052c2:	617b      	str	r3, [r7, #20]
      break;
 80052c4:	e002      	b.n	80052cc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80052c6:	4b19      	ldr	r3, [pc, #100]	@ (800532c <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 80052c8:	617b      	str	r3, [r7, #20]
      break;
 80052ca:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b08      	cmp	r3, #8
 80052d0:	d114      	bne.n	80052fc <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80052d2:	f7ff ff29 	bl	8005128 <LL_RCC_PLL_GetDivider>
 80052d6:	4602      	mov	r2, r0
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	fbb3 f4f2 	udiv	r4, r3, r2
 80052de:	f7ff fef9 	bl	80050d4 <LL_RCC_PLL_GetN>
 80052e2:	4603      	mov	r3, r0
 80052e4:	fb03 f404 	mul.w	r4, r3, r4
 80052e8:	f7ff ff02 	bl	80050f0 <LL_RCC_PLL_GetP>
 80052ec:	4603      	mov	r3, r0
 80052ee:	0c1b      	lsrs	r3, r3, #16
 80052f0:	3301      	adds	r3, #1
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	fbb4 f3f3 	udiv	r3, r4, r3
 80052f8:	613b      	str	r3, [r7, #16]
 80052fa:	e011      	b.n	8005320 <RCC_PLL_GetFreqDomain_SYS+0x90>
                                              LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80052fc:	f7ff ff14 	bl	8005128 <LL_RCC_PLL_GetDivider>
 8005300:	4602      	mov	r2, r0
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	fbb3 f4f2 	udiv	r4, r3, r2
 8005308:	f7ff fee4 	bl	80050d4 <LL_RCC_PLL_GetN>
 800530c:	4603      	mov	r3, r0
 800530e:	fb03 f404 	mul.w	r4, r3, r4
 8005312:	f7ff fefb 	bl	800510c <LL_RCC_PLL_GetR>
 8005316:	4603      	mov	r3, r0
 8005318:	0f1b      	lsrs	r3, r3, #28
 800531a:	fbb4 f3f3 	udiv	r3, r4, r3
 800531e:	613b      	str	r3, [r7, #16]
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8005320:	693b      	ldr	r3, [r7, #16]
}
 8005322:	4618      	mov	r0, r3
 8005324:	371c      	adds	r7, #28
 8005326:	46bd      	mov	sp, r7
 8005328:	bd90      	pop	{r4, r7, pc}
 800532a:	bf00      	nop
 800532c:	00f42400 	.word	0x00f42400

08005330 <LL_USART_IsEnabled>:
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005340:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005344:	bf0c      	ite	eq
 8005346:	2301      	moveq	r3, #1
 8005348:	2300      	movne	r3, #0
 800534a:	b2db      	uxtb	r3, r3
}
 800534c:	4618      	mov	r0, r3
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <LL_USART_SetStopBitsLength>:
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	431a      	orrs	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	611a      	str	r2, [r3, #16]
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <LL_USART_SetHWFlowCtrl>:
{
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	431a      	orrs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	615a      	str	r2, [r3, #20]
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <LL_USART_SetBaudRate>:
{
 80053a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053a8:	b0c0      	sub	sp, #256	@ 0x100
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80053b0:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 80053b4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80053b8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053c4:	f040 810c 	bne.w	80055e0 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80053c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80053cc:	2200      	movs	r2, #0
 80053ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80053d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80053d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80053da:	4622      	mov	r2, r4
 80053dc:	462b      	mov	r3, r5
 80053de:	1891      	adds	r1, r2, r2
 80053e0:	6639      	str	r1, [r7, #96]	@ 0x60
 80053e2:	415b      	adcs	r3, r3
 80053e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80053e6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80053ea:	4621      	mov	r1, r4
 80053ec:	eb12 0801 	adds.w	r8, r2, r1
 80053f0:	4629      	mov	r1, r5
 80053f2:	eb43 0901 	adc.w	r9, r3, r1
 80053f6:	f04f 0200 	mov.w	r2, #0
 80053fa:	f04f 0300 	mov.w	r3, #0
 80053fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005402:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005406:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800540a:	4690      	mov	r8, r2
 800540c:	4699      	mov	r9, r3
 800540e:	4623      	mov	r3, r4
 8005410:	eb18 0303 	adds.w	r3, r8, r3
 8005414:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005418:	462b      	mov	r3, r5
 800541a:	eb49 0303 	adc.w	r3, r9, r3
 800541e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005422:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005426:	2200      	movs	r2, #0
 8005428:	469a      	mov	sl, r3
 800542a:	4693      	mov	fp, r2
 800542c:	eb1a 030a 	adds.w	r3, sl, sl
 8005430:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005432:	eb4b 030b 	adc.w	r3, fp, fp
 8005436:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005438:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800543c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005440:	f7fa fee0 	bl	8000204 <__aeabi_uldivmod>
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	4b64      	ldr	r3, [pc, #400]	@ (80055dc <LL_USART_SetBaudRate+0x238>)
 800544a:	fba3 2302 	umull	r2, r3, r3, r2
 800544e:	095b      	lsrs	r3, r3, #5
 8005450:	b29b      	uxth	r3, r3
 8005452:	011b      	lsls	r3, r3, #4
 8005454:	b29c      	uxth	r4, r3
 8005456:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800545a:	2200      	movs	r2, #0
 800545c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005460:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005464:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8005468:	4642      	mov	r2, r8
 800546a:	464b      	mov	r3, r9
 800546c:	1891      	adds	r1, r2, r2
 800546e:	6539      	str	r1, [r7, #80]	@ 0x50
 8005470:	415b      	adcs	r3, r3
 8005472:	657b      	str	r3, [r7, #84]	@ 0x54
 8005474:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005478:	4641      	mov	r1, r8
 800547a:	1851      	adds	r1, r2, r1
 800547c:	64b9      	str	r1, [r7, #72]	@ 0x48
 800547e:	4649      	mov	r1, r9
 8005480:	414b      	adcs	r3, r1
 8005482:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005484:	f04f 0200 	mov.w	r2, #0
 8005488:	f04f 0300 	mov.w	r3, #0
 800548c:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8005490:	4659      	mov	r1, fp
 8005492:	00cb      	lsls	r3, r1, #3
 8005494:	4651      	mov	r1, sl
 8005496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800549a:	4651      	mov	r1, sl
 800549c:	00ca      	lsls	r2, r1, #3
 800549e:	4610      	mov	r0, r2
 80054a0:	4619      	mov	r1, r3
 80054a2:	4603      	mov	r3, r0
 80054a4:	4642      	mov	r2, r8
 80054a6:	189b      	adds	r3, r3, r2
 80054a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054ac:	464b      	mov	r3, r9
 80054ae:	460a      	mov	r2, r1
 80054b0:	eb42 0303 	adc.w	r3, r2, r3
 80054b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80054b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80054bc:	2200      	movs	r2, #0
 80054be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054c2:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80054c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80054ca:	460b      	mov	r3, r1
 80054cc:	18db      	adds	r3, r3, r3
 80054ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80054d0:	4613      	mov	r3, r2
 80054d2:	eb42 0303 	adc.w	r3, r2, r3
 80054d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80054d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80054dc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80054e0:	f7fa fe90 	bl	8000204 <__aeabi_uldivmod>
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	4611      	mov	r1, r2
 80054ea:	4b3c      	ldr	r3, [pc, #240]	@ (80055dc <LL_USART_SetBaudRate+0x238>)
 80054ec:	fba3 2301 	umull	r2, r3, r3, r1
 80054f0:	095b      	lsrs	r3, r3, #5
 80054f2:	2264      	movs	r2, #100	@ 0x64
 80054f4:	fb02 f303 	mul.w	r3, r2, r3
 80054f8:	1acb      	subs	r3, r1, r3
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005500:	4b36      	ldr	r3, [pc, #216]	@ (80055dc <LL_USART_SetBaudRate+0x238>)
 8005502:	fba3 2302 	umull	r2, r3, r3, r2
 8005506:	095b      	lsrs	r3, r3, #5
 8005508:	b29b      	uxth	r3, r3
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	b29b      	uxth	r3, r3
 800550e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005512:	b29b      	uxth	r3, r3
 8005514:	4423      	add	r3, r4
 8005516:	b29c      	uxth	r4, r3
 8005518:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800551c:	2200      	movs	r2, #0
 800551e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005522:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005526:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800552a:	4642      	mov	r2, r8
 800552c:	464b      	mov	r3, r9
 800552e:	1891      	adds	r1, r2, r2
 8005530:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005532:	415b      	adcs	r3, r3
 8005534:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005536:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800553a:	4641      	mov	r1, r8
 800553c:	1851      	adds	r1, r2, r1
 800553e:	6339      	str	r1, [r7, #48]	@ 0x30
 8005540:	4649      	mov	r1, r9
 8005542:	414b      	adcs	r3, r1
 8005544:	637b      	str	r3, [r7, #52]	@ 0x34
 8005546:	f04f 0200 	mov.w	r2, #0
 800554a:	f04f 0300 	mov.w	r3, #0
 800554e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005552:	4659      	mov	r1, fp
 8005554:	00cb      	lsls	r3, r1, #3
 8005556:	4651      	mov	r1, sl
 8005558:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800555c:	4651      	mov	r1, sl
 800555e:	00ca      	lsls	r2, r1, #3
 8005560:	4610      	mov	r0, r2
 8005562:	4619      	mov	r1, r3
 8005564:	4603      	mov	r3, r0
 8005566:	4642      	mov	r2, r8
 8005568:	189b      	adds	r3, r3, r2
 800556a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800556e:	464b      	mov	r3, r9
 8005570:	460a      	mov	r2, r1
 8005572:	eb42 0303 	adc.w	r3, r2, r3
 8005576:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800557a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800557e:	2200      	movs	r2, #0
 8005580:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005584:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8005588:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800558c:	460b      	mov	r3, r1
 800558e:	18db      	adds	r3, r3, r3
 8005590:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005592:	4613      	mov	r3, r2
 8005594:	eb42 0303 	adc.w	r3, r2, r3
 8005598:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800559a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800559e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80055a2:	f7fa fe2f 	bl	8000204 <__aeabi_uldivmod>
 80055a6:	4602      	mov	r2, r0
 80055a8:	460b      	mov	r3, r1
 80055aa:	4b0c      	ldr	r3, [pc, #48]	@ (80055dc <LL_USART_SetBaudRate+0x238>)
 80055ac:	fba3 1302 	umull	r1, r3, r3, r2
 80055b0:	095b      	lsrs	r3, r3, #5
 80055b2:	2164      	movs	r1, #100	@ 0x64
 80055b4:	fb01 f303 	mul.w	r3, r1, r3
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	3332      	adds	r3, #50	@ 0x32
 80055be:	4a07      	ldr	r2, [pc, #28]	@ (80055dc <LL_USART_SetBaudRate+0x238>)
 80055c0:	fba2 2303 	umull	r2, r3, r2, r3
 80055c4:	095b      	lsrs	r3, r3, #5
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	f003 0307 	and.w	r3, r3, #7
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	4423      	add	r3, r4
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	461a      	mov	r2, r3
 80055d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055d8:	609a      	str	r2, [r3, #8]
}
 80055da:	e108      	b.n	80057ee <LL_USART_SetBaudRate+0x44a>
 80055dc:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80055e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80055e4:	2200      	movs	r2, #0
 80055e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80055ea:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80055ee:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80055f2:	4642      	mov	r2, r8
 80055f4:	464b      	mov	r3, r9
 80055f6:	1891      	adds	r1, r2, r2
 80055f8:	6239      	str	r1, [r7, #32]
 80055fa:	415b      	adcs	r3, r3
 80055fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80055fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005602:	4641      	mov	r1, r8
 8005604:	1854      	adds	r4, r2, r1
 8005606:	4649      	mov	r1, r9
 8005608:	eb43 0501 	adc.w	r5, r3, r1
 800560c:	f04f 0200 	mov.w	r2, #0
 8005610:	f04f 0300 	mov.w	r3, #0
 8005614:	00eb      	lsls	r3, r5, #3
 8005616:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800561a:	00e2      	lsls	r2, r4, #3
 800561c:	4614      	mov	r4, r2
 800561e:	461d      	mov	r5, r3
 8005620:	4643      	mov	r3, r8
 8005622:	18e3      	adds	r3, r4, r3
 8005624:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005628:	464b      	mov	r3, r9
 800562a:	eb45 0303 	adc.w	r3, r5, r3
 800562e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005632:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005636:	2200      	movs	r2, #0
 8005638:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800563c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005640:	f04f 0200 	mov.w	r2, #0
 8005644:	f04f 0300 	mov.w	r3, #0
 8005648:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800564c:	4629      	mov	r1, r5
 800564e:	008b      	lsls	r3, r1, #2
 8005650:	4621      	mov	r1, r4
 8005652:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005656:	4621      	mov	r1, r4
 8005658:	008a      	lsls	r2, r1, #2
 800565a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800565e:	f7fa fdd1 	bl	8000204 <__aeabi_uldivmod>
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	4b65      	ldr	r3, [pc, #404]	@ (80057fc <LL_USART_SetBaudRate+0x458>)
 8005668:	fba3 2302 	umull	r2, r3, r3, r2
 800566c:	095b      	lsrs	r3, r3, #5
 800566e:	b29b      	uxth	r3, r3
 8005670:	011b      	lsls	r3, r3, #4
 8005672:	b29c      	uxth	r4, r3
 8005674:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005678:	2200      	movs	r2, #0
 800567a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800567e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005682:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8005686:	4642      	mov	r2, r8
 8005688:	464b      	mov	r3, r9
 800568a:	1891      	adds	r1, r2, r2
 800568c:	61b9      	str	r1, [r7, #24]
 800568e:	415b      	adcs	r3, r3
 8005690:	61fb      	str	r3, [r7, #28]
 8005692:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005696:	4641      	mov	r1, r8
 8005698:	1851      	adds	r1, r2, r1
 800569a:	6139      	str	r1, [r7, #16]
 800569c:	4649      	mov	r1, r9
 800569e:	414b      	adcs	r3, r1
 80056a0:	617b      	str	r3, [r7, #20]
 80056a2:	f04f 0200 	mov.w	r2, #0
 80056a6:	f04f 0300 	mov.w	r3, #0
 80056aa:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056ae:	4659      	mov	r1, fp
 80056b0:	00cb      	lsls	r3, r1, #3
 80056b2:	4651      	mov	r1, sl
 80056b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056b8:	4651      	mov	r1, sl
 80056ba:	00ca      	lsls	r2, r1, #3
 80056bc:	4610      	mov	r0, r2
 80056be:	4619      	mov	r1, r3
 80056c0:	4603      	mov	r3, r0
 80056c2:	4642      	mov	r2, r8
 80056c4:	189b      	adds	r3, r3, r2
 80056c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80056ca:	464b      	mov	r3, r9
 80056cc:	460a      	mov	r2, r1
 80056ce:	eb42 0303 	adc.w	r3, r2, r3
 80056d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80056d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80056da:	2200      	movs	r2, #0
 80056dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056e0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80056e4:	f04f 0200 	mov.w	r2, #0
 80056e8:	f04f 0300 	mov.w	r3, #0
 80056ec:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80056f0:	4649      	mov	r1, r9
 80056f2:	008b      	lsls	r3, r1, #2
 80056f4:	4641      	mov	r1, r8
 80056f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056fa:	4641      	mov	r1, r8
 80056fc:	008a      	lsls	r2, r1, #2
 80056fe:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8005702:	f7fa fd7f 	bl	8000204 <__aeabi_uldivmod>
 8005706:	4602      	mov	r2, r0
 8005708:	460b      	mov	r3, r1
 800570a:	4611      	mov	r1, r2
 800570c:	4b3b      	ldr	r3, [pc, #236]	@ (80057fc <LL_USART_SetBaudRate+0x458>)
 800570e:	fba3 2301 	umull	r2, r3, r3, r1
 8005712:	095b      	lsrs	r3, r3, #5
 8005714:	2264      	movs	r2, #100	@ 0x64
 8005716:	fb02 f303 	mul.w	r3, r2, r3
 800571a:	1acb      	subs	r3, r1, r3
 800571c:	011b      	lsls	r3, r3, #4
 800571e:	3332      	adds	r3, #50	@ 0x32
 8005720:	4a36      	ldr	r2, [pc, #216]	@ (80057fc <LL_USART_SetBaudRate+0x458>)
 8005722:	fba2 2303 	umull	r2, r3, r2, r3
 8005726:	095b      	lsrs	r3, r3, #5
 8005728:	b29b      	uxth	r3, r3
 800572a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800572e:	b29b      	uxth	r3, r3
 8005730:	4423      	add	r3, r4
 8005732:	b29c      	uxth	r4, r3
 8005734:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005738:	2200      	movs	r2, #0
 800573a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800573c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800573e:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005742:	4642      	mov	r2, r8
 8005744:	464b      	mov	r3, r9
 8005746:	1891      	adds	r1, r2, r2
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	415b      	adcs	r3, r3
 800574c:	60fb      	str	r3, [r7, #12]
 800574e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005752:	4641      	mov	r1, r8
 8005754:	1851      	adds	r1, r2, r1
 8005756:	6039      	str	r1, [r7, #0]
 8005758:	4649      	mov	r1, r9
 800575a:	414b      	adcs	r3, r1
 800575c:	607b      	str	r3, [r7, #4]
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800576a:	4659      	mov	r1, fp
 800576c:	00cb      	lsls	r3, r1, #3
 800576e:	4651      	mov	r1, sl
 8005770:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005774:	4651      	mov	r1, sl
 8005776:	00ca      	lsls	r2, r1, #3
 8005778:	4610      	mov	r0, r2
 800577a:	4619      	mov	r1, r3
 800577c:	4603      	mov	r3, r0
 800577e:	4642      	mov	r2, r8
 8005780:	189b      	adds	r3, r3, r2
 8005782:	673b      	str	r3, [r7, #112]	@ 0x70
 8005784:	464b      	mov	r3, r9
 8005786:	460a      	mov	r2, r1
 8005788:	eb42 0303 	adc.w	r3, r2, r3
 800578c:	677b      	str	r3, [r7, #116]	@ 0x74
 800578e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005792:	2200      	movs	r2, #0
 8005794:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005796:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005798:	f04f 0200 	mov.w	r2, #0
 800579c:	f04f 0300 	mov.w	r3, #0
 80057a0:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 80057a4:	4649      	mov	r1, r9
 80057a6:	008b      	lsls	r3, r1, #2
 80057a8:	4641      	mov	r1, r8
 80057aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057ae:	4641      	mov	r1, r8
 80057b0:	008a      	lsls	r2, r1, #2
 80057b2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80057b6:	f7fa fd25 	bl	8000204 <__aeabi_uldivmod>
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4b0f      	ldr	r3, [pc, #60]	@ (80057fc <LL_USART_SetBaudRate+0x458>)
 80057c0:	fba3 1302 	umull	r1, r3, r3, r2
 80057c4:	095b      	lsrs	r3, r3, #5
 80057c6:	2164      	movs	r1, #100	@ 0x64
 80057c8:	fb01 f303 	mul.w	r3, r1, r3
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	011b      	lsls	r3, r3, #4
 80057d0:	3332      	adds	r3, #50	@ 0x32
 80057d2:	4a0a      	ldr	r2, [pc, #40]	@ (80057fc <LL_USART_SetBaudRate+0x458>)
 80057d4:	fba2 2303 	umull	r2, r3, r2, r3
 80057d8:	095b      	lsrs	r3, r3, #5
 80057da:	b29b      	uxth	r3, r3
 80057dc:	f003 030f 	and.w	r3, r3, #15
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	4423      	add	r3, r4
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	461a      	mov	r2, r3
 80057e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ec:	609a      	str	r2, [r3, #8]
}
 80057ee:	bf00      	nop
 80057f0:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80057f4:	46bd      	mov	sp, r7
 80057f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057fa:	bf00      	nop
 80057fc:	51eb851f 	.word	0x51eb851f

08005800 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b088      	sub	sp, #32
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800580e:	2300      	movs	r3, #0
 8005810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7ff fd8c 	bl	8005330 <LL_USART_IsEnabled>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d15e      	bne.n	80058dc <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8005826:	f023 030c 	bic.w	r3, r3, #12
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	6851      	ldr	r1, [r2, #4]
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	68d2      	ldr	r2, [r2, #12]
 8005832:	4311      	orrs	r1, r2
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	6912      	ldr	r2, [r2, #16]
 8005838:	4311      	orrs	r1, r2
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	6992      	ldr	r2, [r2, #24]
 800583e:	430a      	orrs	r2, r1
 8005840:	431a      	orrs	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	4619      	mov	r1, r3
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7ff fd83 	bl	8005358 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	4619      	mov	r1, r3
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7ff fd90 	bl	800537e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800585e:	f107 0308 	add.w	r3, r7, #8
 8005862:	4618      	mov	r0, r3
 8005864:	f7ff fc6e 	bl	8005144 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a1f      	ldr	r2, [pc, #124]	@ (80058e8 <LL_USART_Init+0xe8>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d102      	bne.n	8005876 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	61bb      	str	r3, [r7, #24]
 8005874:	e021      	b.n	80058ba <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a1c      	ldr	r2, [pc, #112]	@ (80058ec <LL_USART_Init+0xec>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d102      	bne.n	8005884 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	61bb      	str	r3, [r7, #24]
 8005882:	e01a      	b.n	80058ba <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a1a      	ldr	r2, [pc, #104]	@ (80058f0 <LL_USART_Init+0xf0>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d102      	bne.n	8005892 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	61bb      	str	r3, [r7, #24]
 8005890:	e013      	b.n	80058ba <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a17      	ldr	r2, [pc, #92]	@ (80058f4 <LL_USART_Init+0xf4>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d102      	bne.n	80058a0 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	61bb      	str	r3, [r7, #24]
 800589e:	e00c      	b.n	80058ba <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a15      	ldr	r2, [pc, #84]	@ (80058f8 <LL_USART_Init+0xf8>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d102      	bne.n	80058ae <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	61bb      	str	r3, [r7, #24]
 80058ac:	e005      	b.n	80058ba <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a12      	ldr	r2, [pc, #72]	@ (80058fc <LL_USART_Init+0xfc>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d101      	bne.n	80058ba <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00d      	beq.n	80058dc <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d009      	beq.n	80058dc <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80058c8:	2300      	movs	r3, #0
 80058ca:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80058d4:	69b9      	ldr	r1, [r7, #24]
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7ff fd64 	bl	80053a4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80058dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3720      	adds	r7, #32
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	40011000 	.word	0x40011000
 80058ec:	40004400 	.word	0x40004400
 80058f0:	40004800 	.word	0x40004800
 80058f4:	40011400 	.word	0x40011400
 80058f8:	40004c00 	.word	0x40004c00
 80058fc:	40005000 	.word	0x40005000

08005900 <memset>:
 8005900:	4402      	add	r2, r0
 8005902:	4603      	mov	r3, r0
 8005904:	4293      	cmp	r3, r2
 8005906:	d100      	bne.n	800590a <memset+0xa>
 8005908:	4770      	bx	lr
 800590a:	f803 1b01 	strb.w	r1, [r3], #1
 800590e:	e7f9      	b.n	8005904 <memset+0x4>

08005910 <__libc_init_array>:
 8005910:	b570      	push	{r4, r5, r6, lr}
 8005912:	4d0d      	ldr	r5, [pc, #52]	@ (8005948 <__libc_init_array+0x38>)
 8005914:	4c0d      	ldr	r4, [pc, #52]	@ (800594c <__libc_init_array+0x3c>)
 8005916:	1b64      	subs	r4, r4, r5
 8005918:	10a4      	asrs	r4, r4, #2
 800591a:	2600      	movs	r6, #0
 800591c:	42a6      	cmp	r6, r4
 800591e:	d109      	bne.n	8005934 <__libc_init_array+0x24>
 8005920:	4d0b      	ldr	r5, [pc, #44]	@ (8005950 <__libc_init_array+0x40>)
 8005922:	4c0c      	ldr	r4, [pc, #48]	@ (8005954 <__libc_init_array+0x44>)
 8005924:	f000 f826 	bl	8005974 <_init>
 8005928:	1b64      	subs	r4, r4, r5
 800592a:	10a4      	asrs	r4, r4, #2
 800592c:	2600      	movs	r6, #0
 800592e:	42a6      	cmp	r6, r4
 8005930:	d105      	bne.n	800593e <__libc_init_array+0x2e>
 8005932:	bd70      	pop	{r4, r5, r6, pc}
 8005934:	f855 3b04 	ldr.w	r3, [r5], #4
 8005938:	4798      	blx	r3
 800593a:	3601      	adds	r6, #1
 800593c:	e7ee      	b.n	800591c <__libc_init_array+0xc>
 800593e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005942:	4798      	blx	r3
 8005944:	3601      	adds	r6, #1
 8005946:	e7f2      	b.n	800592e <__libc_init_array+0x1e>
 8005948:	08005bcc 	.word	0x08005bcc
 800594c:	08005bcc 	.word	0x08005bcc
 8005950:	08005bcc 	.word	0x08005bcc
 8005954:	08005bd0 	.word	0x08005bd0

08005958 <memcpy>:
 8005958:	440a      	add	r2, r1
 800595a:	4291      	cmp	r1, r2
 800595c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005960:	d100      	bne.n	8005964 <memcpy+0xc>
 8005962:	4770      	bx	lr
 8005964:	b510      	push	{r4, lr}
 8005966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800596a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800596e:	4291      	cmp	r1, r2
 8005970:	d1f9      	bne.n	8005966 <memcpy+0xe>
 8005972:	bd10      	pop	{r4, pc}

08005974 <_init>:
 8005974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005976:	bf00      	nop
 8005978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800597a:	bc08      	pop	{r3}
 800597c:	469e      	mov	lr, r3
 800597e:	4770      	bx	lr

08005980 <_fini>:
 8005980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005982:	bf00      	nop
 8005984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005986:	bc08      	pop	{r3}
 8005988:	469e      	mov	lr, r3
 800598a:	4770      	bx	lr
